
block2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00006cb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e4  080076e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ec  080076ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ec  080076ec  000176ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076f0  080076f0  000176f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080076f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000078  0800776c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800776c  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a9a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003901  00000000  00000000  00038b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003c448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002583e  00000000  00000000  0003ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b635  00000000  00000000  000642ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0fb1  00000000  00000000  0007f903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001608b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000566c  00000000  00000000  00160904  2**2
=======
  1 .text         00007364  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d9c  08007d9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000078  08007e1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08007e1c  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a15  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e5  00000000  00000000  00038abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002583e  00000000  00000000  0003e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5f7  00000000  00000000  0006420e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0fda  00000000  00000000  0007f805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001607df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005724  00000000  00000000  00160830  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001f0:	08006e68 	.word	0x08006e68
=======
 80001f0:	0800751c 	.word	0x0800751c
>>>>>>> Stashed changes

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
<<<<<<< Updated upstream
 800020c:	08006e68 	.word	0x08006e68
=======
 800020c:	0800751c 	.word	0x0800751c
>>>>>>> Stashed changes

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

<<<<<<< Updated upstream
080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f001 fb27 	bl	8001c68 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 fd3e 	bl	80010a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000624:	230f      	movs	r3, #15
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f001 fc47 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 fd2e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000094 	.word	0x20000094
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d127      	bne.n	80006ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006b2:	2320      	movs	r3, #32
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	f002 fd43 	bl	8003150 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020800 	.word	0x40020800

080006e0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_DAC_Init+0x4c>)
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_DAC_Init+0x50>)
 80006f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_DAC_Init+0x4c>)
 80006f6:	f001 ff26 	bl	8002546 <HAL_DAC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000700:	f000 fcce 	bl	80010a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_DAC_Init+0x4c>)
 8000714:	f002 f841 	bl	800279a <HAL_DAC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800071e:	f000 fcbf 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000dc 	.word	0x200000dc
 8000730:	40007400 	.word	0x40007400

08000734 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <HAL_DAC_MspInit+0xdc>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d157      	bne.n	8000806 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 8000760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <HAL_DAC_MspInit+0xe0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800078e:	2310      	movs	r3, #16
 8000790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	2303      	movs	r3, #3
 8000794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	481d      	ldr	r0, [pc, #116]	; (8000818 <HAL_DAC_MspInit+0xe4>)
 80007a2:	f002 fcd5 	bl	8003150 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <HAL_DAC_MspInit+0xec>)
 80007aa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007ae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80007b2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ce:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007ec:	f002 f8ae 	bl	800294c <HAL_DMA_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 80007f6:	f000 fc53 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_DAC_MspInit+0xe8>)
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_DAC_MspInit+0xe8>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40007400 	.word	0x40007400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	200000f0 	.word	0x200000f0
 8000820:	40026088 	.word	0x40026088

08000824 <Set_Pin_Input>:

#include "dht11.h"


void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f002 fc7c 	bl	8003150 <HAL_GPIO_Init>
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f002 fc5e 	bl	8003150 <HAL_GPIO_Init>
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Delay_us>:

void Delay_us(TIM_HandleTypeDef *htimx, uint32_t time)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	// reset counter
	__HAL_TIM_SET_COUNTER(htimx, 0);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(htimx)) < time);
 80008ae:	bf00      	nop
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f9      	bhi.n	80008b0 <Delay_us+0x14>
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <dht11_StartSignal>:

void dht11_StartSignal(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *htimx)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	460b      	mov	r3, r1
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	817b      	strh	r3, [r7, #10]
	// stop timer
	HAL_TIM_Base_Stop(htimx);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f004 f97d 	bl	8004bd8 <HAL_TIM_Base_Stop>

	// reset timer
	HAL_TIM_Base_Init(htimx);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f004 f8c2 	bl	8004a68 <HAL_TIM_Base_Init>

	// start timer
	HAL_TIM_Base_Start(htimx);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f004 f90f 	bl	8004b08 <HAL_TIM_Base_Start>

	Set_Pin_Output(GPIOx, GPIO_Pin);
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	4619      	mov	r1, r3
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f7ff ffb6 	bl	8000860 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 80008f4:	897b      	ldrh	r3, [r7, #10]
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f002 fdd4 	bl	80034a8 <HAL_GPIO_WritePin>
	Delay_us(htimx, 18000);
 8000900:	f244 6150 	movw	r1, #18000	; 0x4650
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ffc9 	bl	800089c <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 800090a:	897b      	ldrh	r3, [r7, #10]
 800090c:	2201      	movs	r2, #1
 800090e:	4619      	mov	r1, r3
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f002 fdc9 	bl	80034a8 <HAL_GPIO_WritePin>
	Set_Pin_Input(GPIOx, GPIO_Pin);
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	4619      	mov	r1, r3
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f7ff ff82 	bl	8000824 <Set_Pin_Input>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <dht11_Reply>:

int8_t dht11_Reply(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *htimx)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	460b      	mov	r3, r1
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	817b      	strh	r3, [r7, #10]
	int8_t reply = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	75fb      	strb	r3, [r7, #23]
	Delay_us(htimx, 40);
 800093a:	2128      	movs	r1, #40	; 0x28
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ffad 	bl	800089c <Delay_us>
	if(!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 8000942:	897b      	ldrh	r3, [r7, #10]
 8000944:	4619      	mov	r1, r3
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f002 fd96 	bl	8003478 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d110      	bne.n	8000974 <dht11_Reply+0x4c>
	{
		Delay_us(htimx, 80);
 8000952:	2150      	movs	r1, #80	; 0x50
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ffa1 	bl	800089c <Delay_us>
		if((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 800095a:	897b      	ldrh	r3, [r7, #10]
 800095c:	4619      	mov	r1, r3
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f002 fd8a 	bl	8003478 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <dht11_Reply+0x48>
		{
			reply = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	75fb      	strb	r3, [r7, #23]
 800096e:	e001      	b.n	8000974 <dht11_Reply+0x4c>
		} else reply = -1; // Fehlerkondition
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	75fb      	strb	r3, [r7, #23]
	}
	while((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)));
 8000974:	bf00      	nop
 8000976:	897b      	ldrh	r3, [r7, #10]
 8000978:	4619      	mov	r1, r3
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f002 fd7c 	bl	8003478 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f7      	bne.n	8000976 <dht11_Reply+0x4e>
	return reply;
 8000986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <dht11_ReadData>:

uint8_t dht11_ReadData(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *htimx)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	460b      	mov	r3, r1
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	817b      	strh	r3, [r7, #10]
	uint8_t data;
	for(int i=0; i<8; i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	e03b      	b.n	8000a1e <dht11_ReadData+0x8c>
	{
		while(!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)));
 80009a6:	bf00      	nop
 80009a8:	897b      	ldrh	r3, [r7, #10]
 80009aa:	4619      	mov	r1, r3
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f002 fd63 	bl	8003478 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f7      	beq.n	80009a8 <dht11_ReadData+0x16>
		Delay_us(htimx, 45);
 80009b8:	212d      	movs	r1, #45	; 0x2d
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff6e 	bl	800089c <Delay_us>
		if(!(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)))
 80009c0:	897b      	ldrh	r3, [r7, #10]
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f002 fd57 	bl	8003478 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10e      	bne.n	80009ee <dht11_ReadData+0x5c>
		{
			data &= ~(1<<(7-i));
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2201      	movs	r2, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009e6:	4013      	ands	r3, r2
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	75fb      	strb	r3, [r7, #23]
 80009ec:	e00b      	b.n	8000a06 <dht11_ReadData+0x74>
		} else data |= (1<<(7-i));
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	f1c3 0307 	rsb	r3, r3, #7
 80009f4:	2201      	movs	r2, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	75fb      	strb	r3, [r7, #23]
		while((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)));
 8000a06:	bf00      	nop
 8000a08:	897b      	ldrh	r3, [r7, #10]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f002 fd33 	bl	8003478 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f7      	bne.n	8000a08 <dht11_ReadData+0x76>
	for(int i=0; i<8; i++)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	ddc0      	ble.n	80009a6 <dht11_ReadData+0x14>
	}
	return data;
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2010      	movs	r0, #16
 8000a58:	f001 fd3f 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a5c:	2010      	movs	r0, #16
 8000a5e:	f001 fd58 	bl	8002512 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_GPIO_Init+0x100>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DHT11_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000afc:	481d      	ldr	r0, [pc, #116]	; (8000b74 <MX_GPIO_Init+0x104>)
 8000afe:	f002 fcd3 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <MX_GPIO_Init+0x108>)
 8000b1a:	f002 fb19 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DHT11_Pin;
 8000b1e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_GPIO_Init+0x104>)
 8000b38:	f002 fb0a 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_GPIO_Init+0x104>)
 8000b54:	f002 fafc 	bl	8003150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2028      	movs	r0, #40	; 0x28
 8000b5e:	f001 fcbc 	bl	80024da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f001 fcd5 	bl	8002512 <HAL_NVIC_EnableIRQ>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f002 fcc1 	bl	8003540 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 fa6c 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000150 	.word	0x20000150
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c34:	f002 fa8c 	bl	8003150 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <main>:
=======
080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b974 	b.w	8000c1c <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	4604      	mov	r4, r0
 8000954:	468e      	mov	lr, r1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d14d      	bne.n	80009f6 <__udivmoddi4+0xaa>
 800095a:	428a      	cmp	r2, r1
 800095c:	4694      	mov	ip, r2
 800095e:	d969      	bls.n	8000a34 <__udivmoddi4+0xe8>
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	b152      	cbz	r2, 800097c <__udivmoddi4+0x30>
 8000966:	fa01 f302 	lsl.w	r3, r1, r2
 800096a:	f1c2 0120 	rsb	r1, r2, #32
 800096e:	fa20 f101 	lsr.w	r1, r0, r1
 8000972:	fa0c fc02 	lsl.w	ip, ip, r2
 8000976:	ea41 0e03 	orr.w	lr, r1, r3
 800097a:	4094      	lsls	r4, r2
 800097c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000980:	0c21      	lsrs	r1, r4, #16
 8000982:	fbbe f6f8 	udiv	r6, lr, r8
 8000986:	fa1f f78c 	uxth.w	r7, ip
 800098a:	fb08 e316 	mls	r3, r8, r6, lr
 800098e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000992:	fb06 f107 	mul.w	r1, r6, r7
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f106 30ff 	add.w	r0, r6, #4294967295
 80009a2:	f080 811f 	bcs.w	8000be4 <__udivmoddi4+0x298>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 811c 	bls.w	8000be4 <__udivmoddi4+0x298>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b8:	fb08 3310 	mls	r3, r8, r0, r3
 80009bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c0:	fb00 f707 	mul.w	r7, r0, r7
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	d90a      	bls.n	80009de <__udivmoddi4+0x92>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d0:	f080 810a 	bcs.w	8000be8 <__udivmoddi4+0x29c>
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	f240 8107 	bls.w	8000be8 <__udivmoddi4+0x29c>
 80009da:	4464      	add	r4, ip
 80009dc:	3802      	subs	r0, #2
 80009de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009e2:	1be4      	subs	r4, r4, r7
 80009e4:	2600      	movs	r6, #0
 80009e6:	b11d      	cbz	r5, 80009f0 <__udivmoddi4+0xa4>
 80009e8:	40d4      	lsrs	r4, r2
 80009ea:	2300      	movs	r3, #0
 80009ec:	e9c5 4300 	strd	r4, r3, [r5]
 80009f0:	4631      	mov	r1, r6
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d909      	bls.n	8000a0e <__udivmoddi4+0xc2>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	f000 80ef 	beq.w	8000bde <__udivmoddi4+0x292>
 8000a00:	2600      	movs	r6, #0
 8000a02:	e9c5 0100 	strd	r0, r1, [r5]
 8000a06:	4630      	mov	r0, r6
 8000a08:	4631      	mov	r1, r6
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	fab3 f683 	clz	r6, r3
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d14a      	bne.n	8000aac <__udivmoddi4+0x160>
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d302      	bcc.n	8000a20 <__udivmoddi4+0xd4>
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	f200 80f9 	bhi.w	8000c12 <__udivmoddi4+0x2c6>
 8000a20:	1a84      	subs	r4, r0, r2
 8000a22:	eb61 0303 	sbc.w	r3, r1, r3
 8000a26:	2001      	movs	r0, #1
 8000a28:	469e      	mov	lr, r3
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d0e0      	beq.n	80009f0 <__udivmoddi4+0xa4>
 8000a2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a32:	e7dd      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000a34:	b902      	cbnz	r2, 8000a38 <__udivmoddi4+0xec>
 8000a36:	deff      	udf	#255	; 0xff
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	f040 8092 	bne.w	8000b66 <__udivmoddi4+0x21a>
 8000a42:	eba1 010c 	sub.w	r1, r1, ip
 8000a46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4a:	fa1f fe8c 	uxth.w	lr, ip
 8000a4e:	2601      	movs	r6, #1
 8000a50:	0c20      	lsrs	r0, r4, #16
 8000a52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a56:	fb07 1113 	mls	r1, r7, r3, r1
 8000a5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5e:	fb0e f003 	mul.w	r0, lr, r3
 8000a62:	4288      	cmp	r0, r1
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x12c>
 8000a66:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x12a>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f200 80cb 	bhi.w	8000c0c <__udivmoddi4+0x2c0>
 8000a76:	4643      	mov	r3, r8
 8000a78:	1a09      	subs	r1, r1, r0
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a80:	fb07 1110 	mls	r1, r7, r0, r1
 8000a84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a88:	fb0e fe00 	mul.w	lr, lr, r0
 8000a8c:	45a6      	cmp	lr, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x156>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a98:	d202      	bcs.n	8000aa0 <__udivmoddi4+0x154>
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	f200 80bb 	bhi.w	8000c16 <__udivmoddi4+0x2ca>
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	eba4 040e 	sub.w	r4, r4, lr
 8000aa6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aaa:	e79c      	b.n	80009e6 <__udivmoddi4+0x9a>
 8000aac:	f1c6 0720 	rsb	r7, r6, #32
 8000ab0:	40b3      	lsls	r3, r6
 8000ab2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aba:	fa20 f407 	lsr.w	r4, r0, r7
 8000abe:	fa01 f306 	lsl.w	r3, r1, r6
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	40f9      	lsrs	r1, r7
 8000ac6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aca:	fa00 f306 	lsl.w	r3, r0, r6
 8000ace:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ad2:	0c20      	lsrs	r0, r4, #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fb09 1118 	mls	r1, r9, r8, r1
 8000adc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae4:	4288      	cmp	r0, r1
 8000ae6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aea:	d90b      	bls.n	8000b04 <__udivmoddi4+0x1b8>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af4:	f080 8088 	bcs.w	8000c08 <__udivmoddi4+0x2bc>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f240 8085 	bls.w	8000c08 <__udivmoddi4+0x2bc>
 8000afe:	f1a8 0802 	sub.w	r8, r8, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1a09      	subs	r1, r1, r0
 8000b06:	b2a4      	uxth	r4, r4
 8000b08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b18:	458e      	cmp	lr, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x1e2>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b24:	d26c      	bcs.n	8000c00 <__udivmoddi4+0x2b4>
 8000b26:	458e      	cmp	lr, r1
 8000b28:	d96a      	bls.n	8000c00 <__udivmoddi4+0x2b4>
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b32:	fba0 9402 	umull	r9, r4, r0, r2
 8000b36:	eba1 010e 	sub.w	r1, r1, lr
 8000b3a:	42a1      	cmp	r1, r4
 8000b3c:	46c8      	mov	r8, r9
 8000b3e:	46a6      	mov	lr, r4
 8000b40:	d356      	bcc.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b42:	d053      	beq.n	8000bec <__udivmoddi4+0x2a0>
 8000b44:	b15d      	cbz	r5, 8000b5e <__udivmoddi4+0x212>
 8000b46:	ebb3 0208 	subs.w	r2, r3, r8
 8000b4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b52:	fa22 f306 	lsr.w	r3, r2, r6
 8000b56:	40f1      	lsrs	r1, r6
 8000b58:	431f      	orrs	r7, r3
 8000b5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5e:	2600      	movs	r6, #0
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	40d8      	lsrs	r0, r3
 8000b6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b70:	fa21 f303 	lsr.w	r3, r1, r3
 8000b74:	4091      	lsls	r1, r2
 8000b76:	4301      	orrs	r1, r0
 8000b78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b84:	fb07 3610 	mls	r6, r7, r0, r3
 8000b88:	0c0b      	lsrs	r3, r1, #16
 8000b8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b92:	429e      	cmp	r6, r3
 8000b94:	fa04 f402 	lsl.w	r4, r4, r2
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x260>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba2:	d22f      	bcs.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba4:	429e      	cmp	r6, r3
 8000ba6:	d92d      	bls.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1b9b      	subs	r3, r3, r6
 8000bae:	b289      	uxth	r1, r1
 8000bb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x28a>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bcc:	d216      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d914      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000bd2:	3e02      	subs	r6, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	1ac9      	subs	r1, r1, r3
 8000bd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bdc:	e738      	b.n	8000a50 <__udivmoddi4+0x104>
 8000bde:	462e      	mov	r6, r5
 8000be0:	4628      	mov	r0, r5
 8000be2:	e705      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000be4:	4606      	mov	r6, r0
 8000be6:	e6e3      	b.n	80009b0 <__udivmoddi4+0x64>
 8000be8:	4618      	mov	r0, r3
 8000bea:	e6f8      	b.n	80009de <__udivmoddi4+0x92>
 8000bec:	454b      	cmp	r3, r9
 8000bee:	d2a9      	bcs.n	8000b44 <__udivmoddi4+0x1f8>
 8000bf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	e7a3      	b.n	8000b44 <__udivmoddi4+0x1f8>
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	e7ea      	b.n	8000bd6 <__udivmoddi4+0x28a>
 8000c00:	4620      	mov	r0, r4
 8000c02:	e794      	b.n	8000b2e <__udivmoddi4+0x1e2>
 8000c04:	4640      	mov	r0, r8
 8000c06:	e7d1      	b.n	8000bac <__udivmoddi4+0x260>
 8000c08:	46d0      	mov	r8, sl
 8000c0a:	e77b      	b.n	8000b04 <__udivmoddi4+0x1b8>
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	4461      	add	r1, ip
 8000c10:	e732      	b.n	8000a78 <__udivmoddi4+0x12c>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e709      	b.n	8000a2a <__udivmoddi4+0xde>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	e742      	b.n	8000aa2 <__udivmoddi4+0x156>

08000c1c <__aeabi_idiv0>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <MX_ADC1_Init>:
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_ADC1_Init+0x9c>)
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	761a      	strb	r2, [r3, #24]
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_ADC1_Init+0xa0>)
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	61da      	str	r2, [r3, #28]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000c82:	f001 fb65 	bl	8002350 <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x70>
 8000c8c:	f000 fd7a 	bl	8001784 <Error_Handler>
 8000c90:	230f      	movs	r3, #15
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_ADC1_Init+0x98>)
 8000ca2:	f001 fc85 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x90>
 8000cac:	f000 fd6a 	bl	8001784 <Error_Handler>
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000094 	.word	0x20000094
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	0f000001 	.word	0x0f000001

08000cc4 <HAL_ADC_MspInit>:
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0x7c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d127      	bne.n	8000d36 <HAL_ADC_MspInit+0x72>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_ADC_MspInit+0x80>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2320      	movs	r3, #32
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	2303      	movs	r3, #3
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_ADC_MspInit+0x84>)
 8000d32:	f002 fd67 	bl	8003804 <HAL_GPIO_Init>
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40012000 	.word	0x40012000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800

08000d4c <MX_DAC_Init>:
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DAC_Init+0x4c>)
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <MX_DAC_Init+0x50>)
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_DAC_Init+0x4c>)
 8000d62:	f001 ff64 	bl	8002c2e <HAL_DAC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_DAC_Init+0x24>
 8000d6c:	f000 fd0a 	bl	8001784 <Error_Handler>
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_DAC_Init+0x4c>)
 8000d80:	f002 f864 	bl	8002e4c <HAL_DAC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_DAC_Init+0x42>
 8000d8a:	f000 fcfb 	bl	8001784 <Error_Handler>
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000dc 	.word	0x200000dc
 8000d9c:	40007400 	.word	0x40007400

08000da0 <HAL_DAC_MspInit>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <HAL_DAC_MspInit+0xdc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d157      	bne.n	8000e72 <HAL_DAC_MspInit+0xd2>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_DAC_MspInit+0xe0>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481d      	ldr	r0, [pc, #116]	; (8000e84 <HAL_DAC_MspInit+0xe4>)
 8000e0e:	f002 fcf9 	bl	8003804 <HAL_GPIO_Init>
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_DAC_MspInit+0xec>)
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e1a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e42:	619a      	str	r2, [r3, #24]
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
 8000e56:	480c      	ldr	r0, [pc, #48]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e58:	f002 f8d2 	bl	8003000 <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_DAC_MspInit+0xc6>
 8000e62:	f000 fc8f 	bl	8001784 <Error_Handler>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_DAC_MspInit+0xe8>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6393      	str	r3, [r2, #56]	; 0x38
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40007400 	.word	0x40007400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	200000f0 	.word	0x200000f0
 8000e8c:	40026088 	.word	0x40026088

08000e90 <Set_Pin_Input>:
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f002 fca0 	bl	8003804 <HAL_GPIO_Init>
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Set_Pin_Output>:
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f002 fc82 	bl	8003804 <HAL_GPIO_Init>
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Delay_us>:
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
 8000f1a:	bf00      	nop
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f9      	bhi.n	8000f1c <Delay_us+0x14>
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <dht11_StartSignal>:
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	817b      	strh	r3, [r7, #10]
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f004 f9a1 	bl	800528c <HAL_TIM_Base_Stop>
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f004 f8e6 	bl	800511c <HAL_TIM_Base_Init>
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f004 f933 	bl	80051bc <HAL_TIM_Base_Start>
 8000f56:	897b      	ldrh	r3, [r7, #10]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff ffb6 	bl	8000ecc <Set_Pin_Output>
 8000f60:	897b      	ldrh	r3, [r7, #10]
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f002 fdf8 	bl	8003b5c <HAL_GPIO_WritePin>
 8000f6c:	f244 6150 	movw	r1, #18000	; 0x4650
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffc9 	bl	8000f08 <Delay_us>
 8000f76:	897b      	ldrh	r3, [r7, #10]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f002 fded 	bl	8003b5c <HAL_GPIO_WritePin>
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	4619      	mov	r1, r3
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff ff82 	bl	8000e90 <Set_Pin_Input>
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <dht11_Reply>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	817b      	strh	r3, [r7, #10]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
 8000fa6:	2128      	movs	r1, #40	; 0x28
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffad 	bl	8000f08 <Delay_us>
 8000fae:	897b      	ldrh	r3, [r7, #10]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f002 fdba 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d110      	bne.n	8000fe0 <dht11_Reply+0x4c>
 8000fbe:	2150      	movs	r1, #80	; 0x50
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffa1 	bl	8000f08 <Delay_us>
 8000fc6:	897b      	ldrh	r3, [r7, #10]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f002 fdae 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <dht11_Reply+0x48>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
 8000fda:	e001      	b.n	8000fe0 <dht11_Reply+0x4c>
 8000fdc:	23ff      	movs	r3, #255	; 0xff
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	bf00      	nop
 8000fe2:	897b      	ldrh	r3, [r7, #10]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f002 fda0 	bl	8003b2c <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f7      	bne.n	8000fe2 <dht11_Reply+0x4e>
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <dht11_ReadData>:
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	460b      	mov	r3, r1
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	817b      	strh	r3, [r7, #10]
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e03b      	b.n	800108a <dht11_ReadData+0x8c>
 8001012:	bf00      	nop
 8001014:	897b      	ldrh	r3, [r7, #10]
 8001016:	4619      	mov	r1, r3
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f002 fd87 	bl	8003b2c <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f7      	beq.n	8001014 <dht11_ReadData+0x16>
 8001024:	212d      	movs	r1, #45	; 0x2d
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff6e 	bl	8000f08 <Delay_us>
 800102c:	897b      	ldrh	r3, [r7, #10]
 800102e:	4619      	mov	r1, r3
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f002 fd7b 	bl	8003b2c <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10e      	bne.n	800105a <dht11_ReadData+0x5c>
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2201      	movs	r2, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	b25b      	sxtb	r3, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	b25a      	sxtb	r2, r3
 800104e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001052:	4013      	ands	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	75fb      	strb	r3, [r7, #23]
 8001058:	e00b      	b.n	8001072 <dht11_ReadData+0x74>
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f1c3 0307 	rsb	r3, r3, #7
 8001060:	2201      	movs	r2, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	b25a      	sxtb	r2, r3
 8001068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106c:	4313      	orrs	r3, r2
 800106e:	b25b      	sxtb	r3, r3
 8001070:	75fb      	strb	r3, [r7, #23]
 8001072:	bf00      	nop
 8001074:	897b      	ldrh	r3, [r7, #10]
 8001076:	4619      	mov	r1, r3
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f002 fd57 	bl	8003b2c <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f7      	bne.n	8001074 <dht11_ReadData+0x76>
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	3301      	adds	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	2b07      	cmp	r3, #7
 800108e:	ddc0      	ble.n	8001012 <dht11_ReadData+0x14>
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <MX_DMA_Init>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_DMA_Init+0x3c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_DMA_Init+0x3c>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_DMA_Init+0x3c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2010      	movs	r0, #16
 80010c4:	f001 fd7d 	bl	8002bc2 <HAL_NVIC_SetPriority>
 80010c8:	2010      	movs	r0, #16
 80010ca:	f001 fd96 	bl	8002bfa <HAL_NVIC_EnableIRQ>
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <MX_GPIO_Init>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <MX_GPIO_Init+0x100>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a38      	ldr	r2, [pc, #224]	; (80011dc <MX_GPIO_Init+0x100>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <MX_GPIO_Init+0x100>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <MX_GPIO_Init+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <MX_GPIO_Init+0x100>)
 8001118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <MX_GPIO_Init+0x100>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_GPIO_Init+0x100>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <MX_GPIO_Init+0x100>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_GPIO_Init+0x100>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <MX_GPIO_Init+0x100>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <MX_GPIO_Init+0x100>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_GPIO_Init+0x100>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001168:	481d      	ldr	r0, [pc, #116]	; (80011e0 <MX_GPIO_Init+0x104>)
 800116a:	f002 fcf7 	bl	8003b5c <HAL_GPIO_WritePin>
 800116e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <MX_GPIO_Init+0x108>)
 8001186:	f002 fb3d 	bl	8003804 <HAL_GPIO_Init>
 800118a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_GPIO_Init+0x104>)
 80011a4:	f002 fb2e 	bl	8003804 <HAL_GPIO_Init>
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_GPIO_Init+0x104>)
 80011c0:	f002 fb20 	bl	8003804 <HAL_GPIO_Init>
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f001 fcfa 	bl	8002bc2 <HAL_NVIC_SetPriority>
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f001 fd13 	bl	8002bfa <HAL_NVIC_EnableIRQ>
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800

080011e8 <MX_I2C1_Init>:
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C1_Init+0x50>)
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_I2C1_Init+0x54>)
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C1_Init+0x50>)
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_I2C1_Init+0x58>)
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_I2C1_Init+0x50>)
 8001206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_I2C1_Init+0x50>)
 8001226:	f002 fce5 	bl	8003bf4 <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C1_Init+0x4c>
 8001230:	f000 faa8 	bl	8001784 <Error_Handler>
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000150 	.word	0x20000150
 800123c:	40005400 	.word	0x40005400
 8001240:	000186a0 	.word	0x000186a0

08001244 <HAL_I2C_MspInit>:
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_I2C_MspInit+0x84>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12c      	bne.n	80012c0 <HAL_I2C_MspInit+0x7c>
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_I2C_MspInit+0x88>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_I2C_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	2312      	movs	r3, #18
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	2304      	movs	r3, #4
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_I2C_MspInit+0x8c>)
 80012a0:	f002 fab0 	bl	8003804 <HAL_GPIO_Init>
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_I2C_MspInit+0x88>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400

080012d4 <main>:
>>>>>>> Stashed changes
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000c6e:	f000 ff65 	bl	8001b3c <HAL_Init>
=======
 80012d8:	f000 ffa4 	bl	8002224 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f857 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f7ff fefb 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
<<<<<<< Updated upstream
 8000c7a:	f000 febb 	bl	80019f4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c7e:	f000 fd3b 	bl	80016f8 <MX_TIM3_Init>
=======
 80012e4:	f000 fefa 	bl	80020dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012e8:	f000 fd7a 	bl	8001de0 <MX_TIM3_Init>
>>>>>>> Stashed changes
  MX_I2C1_Init();
 8000c82:	f7ff ff7b 	bl	8000b7c <MX_I2C1_Init>
  MX_TIM2_Init();
<<<<<<< Updated upstream
 8000c86:	f000 fce9 	bl	800165c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c8a:	f000 fd83 	bl	8001794 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000c8e:	f000 fdd5 	bl	800183c <MX_TIM12_Init>
=======
 80012f0:	f000 fd28 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM4_Init();
 80012f4:	f000 fdc2 	bl	8001e7c <MX_TIM4_Init>
  MX_TIM12_Init();
 80012f8:	f000 fe14 	bl	8001f24 <MX_TIM12_Init>
>>>>>>> Stashed changes
  MX_DMA_Init();
 8000c92:	f7ff fecd 	bl	8000a30 <MX_DMA_Init>
  MX_DAC_Init();
 8000c96:	f7ff fd23 	bl	80006e0 <MX_DAC_Init>
  MX_ADC1_Init();
 8000c9a:	f7ff fc8b 	bl	80005b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
<<<<<<< Updated upstream
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <main+0x94>)
 8000ca0:	f003 ffc2 	bl	8004c28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8000ca4:	4816      	ldr	r0, [pc, #88]	; (8000d00 <main+0x98>)
 8000ca6:	f003 ffbf 	bl	8004c28 <HAL_TIM_Base_Start_IT>
  //display init
  HAL_TIM_Base_Start_IT(&htim2);
 8000caa:	4816      	ldr	r0, [pc, #88]	; (8000d04 <main+0x9c>)
 8000cac:	f003 ffbc 	bl	8004c28 <HAL_TIM_Base_Start_IT>
  ssd1306_Init(&hi2c1);
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <main+0xa0>)
 8000cb2:	f000 fa13 	bl	80010dc <ssd1306_Init>
  HAL_ADC_Start_IT(&hadc1);
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <main+0xa4>)
 8000cb8:	f001 f81a 	bl	8001cf0 <HAL_ADC_Start_IT>

  ssd1306_Fill(DISPLAY_COLOR_DARK);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 fa81 	bl	80011c4 <ssd1306_Fill>
  HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <main+0xa8>)
 8000cc6:	f002 fc08 	bl	80034da <HAL_GPIO_TogglePin>
  ssd1306_SetCursor(0,30);
 8000cca:	211e      	movs	r1, #30
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fbd5 	bl	800147c <ssd1306_SetCursor>
  ssd1306_WriteString("Herz: 10", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <main+0xac>)
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	ca06      	ldmia	r2, {r1, r2}
 8000cd8:	480f      	ldr	r0, [pc, #60]	; (8000d18 <main+0xb0>)
 8000cda:	f000 fba9 	bl	8001430 <ssd1306_WriteString>


  //DAC init
  const uint16_t aSine12bit_Buffer[2] = {
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <main+0xb4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	607b      	str	r3, [r7, #4]
                        2047, 2447};

  HAL_DAC_Start_DMA( &hdac, DAC_CHANNEL_1,(uint32_t*)aSine12bit_Buffer, 2, DAC_ALIGN_12B_R);
 8000ce4:	1d3a      	adds	r2, r7, #4
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2302      	movs	r3, #2
 8000cec:	2100      	movs	r1, #0
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <main+0xb8>)
 8000cf0:	f001 fc4c 	bl	800258c <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  test();
 8000cf4:	f000 f9be 	bl	8001074 <test>
  {
 8000cf8:	e7fc      	b.n	8000cf4 <main+0x8c>
 8000cfa:	bf00      	nop
 8000cfc:	20000660 	.word	0x20000660
 8000d00:	200006a8 	.word	0x200006a8
 8000d04:	200005d0 	.word	0x200005d0
 8000d08:	20000150 	.word	0x20000150
 8000d0c:	20000094 	.word	0x20000094
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20000000 	.word	0x20000000
 8000d18:	08006e80 	.word	0x08006e80
 8000d1c:	08006e8c 	.word	0x08006e8c
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <SystemClock_Config>:
=======
 8001308:	480e      	ldr	r0, [pc, #56]	; (8001344 <main+0x70>)
 800130a:	f003 ffe7 	bl	80052dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <main+0x74>)
 8001310:	f003 ffe4 	bl	80052dc <HAL_TIM_Base_Start_IT>
  //display init
  HAL_TIM_Base_Start_IT(&htim2);
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <main+0x78>)
 8001316:	f003 ffe1 	bl	80052dc <HAL_TIM_Base_Start_IT>
  ssd1306_Init(&hi2c1);
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <main+0x7c>)
 800131c:	f000 fa50 	bl	80017c0 <ssd1306_Init>

  ssd1306_Fill(DISPLAY_COLOR_DARK);
 8001320:	2000      	movs	r0, #0
 8001322:	f000 fac1 	bl	80018a8 <ssd1306_Fill>
  HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8001326:	2120      	movs	r1, #32
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <main+0x80>)
 800132a:	f002 fc30 	bl	8003b8e <HAL_GPIO_TogglePin>
  ssd1306_SetCursor(0,30);
 800132e:	211e      	movs	r1, #30
 8001330:	2000      	movs	r0, #0
 8001332:	f000 fc15 	bl	8001b60 <ssd1306_SetCursor>
  ssd1306_WriteString("Herz: 10", Font_7x10, DISPLAY_COLOR_LIGHT);
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <main+0x84>)
 8001338:	2301      	movs	r3, #1
 800133a:	ca06      	ldmia	r2, {r1, r2}
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <main+0x88>)
 800133e:	f000 fbe9 	bl	8001b14 <ssd1306_WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001342:	e7fe      	b.n	8001342 <main+0x6e>
 8001344:	20000660 	.word	0x20000660
 8001348:	200006a8 	.word	0x200006a8
 800134c:	200005d0 	.word	0x200005d0
 8001350:	20000150 	.word	0x20000150
 8001354:	40020000 	.word	0x40020000
 8001358:	20000000 	.word	0x20000000
 800135c:	08007534 	.word	0x08007534

08001360 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< Updated upstream
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2234      	movs	r2, #52	; 0x34
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fbee 	bl	8006514 <memset>
=======
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2234      	movs	r2, #52	; 0x34
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 fc2a 	bl	8006bc8 <memset>
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <SystemClock_Config+0xe0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <SystemClock_Config+0xe0>)
 8000d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <SystemClock_Config+0xe0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d98:	23b4      	movs	r3, #180	; 0xb4
 8000d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< Updated upstream
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fbbd 	bl	800452c <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000db8:	f000 f972 	bl	80010a0 <Error_Handler>
=======
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fbf9 	bl	8004be0 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013f4:	f000 f9c6 	bl	8001784 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< Updated upstream
 8000dbc:	f003 f81c 	bl	8003df8 <HAL_PWREx_EnableOverDrive>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dc6:	f000 f96b 	bl	80010a0 <Error_Handler>
=======
 80013f8:	f003 f858 	bl	80044ac <HAL_PWREx_EnableOverDrive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001402:	f000 f9bf 	bl	8001784 <Error_Handler>
>>>>>>> Stashed changes
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< Updated upstream
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2105      	movs	r1, #5
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 f855 	bl	8003e98 <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000df4:	f000 f954 	bl	80010a0 <Error_Handler>
=======
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2105      	movs	r1, #5
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f891 	bl	800454c <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001430:	f000 f9a8 	bl	8001784 <Error_Handler>
>>>>>>> Stashed changes
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3750      	adds	r7, #80	; 0x50
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <Display_Output>:
		 HAL_UART_Transmit(&huart2,"Checksum: ",10,HAL_MAX_DELAY);
		 HAL_UART_Transmit(&huart2,&checksum_buffer,2,HAL_MAX_DELAY);
}


void Display_Output(void){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

    //Temperatur Display
	  ssd1306_SetCursor(0,0);
<<<<<<< Updated upstream
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fb34 	bl	800147c <ssd1306_SetCursor>
	  ssd1306_WriteString("Temparatur: ", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <Display_Output+0x94>)
 8000e16:	2301      	movs	r3, #1
 8000e18:	ca06      	ldmia	r2, {r1, r2}
 8000e1a:	4821      	ldr	r0, [pc, #132]	; (8000ea0 <Display_Output+0x98>)
 8000e1c:	f000 fb08 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(&integer_buffer_tem, Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e20:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <Display_Output+0x94>)
 8000e22:	2301      	movs	r3, #1
 8000e24:	ca06      	ldmia	r2, {r1, r2}
 8000e26:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <Display_Output+0x9c>)
 8000e28:	f000 fb02 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(".", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <Display_Output+0x94>)
 8000e2e:	2301      	movs	r3, #1
 8000e30:	ca06      	ldmia	r2, {r1, r2}
 8000e32:	481d      	ldr	r0, [pc, #116]	; (8000ea8 <Display_Output+0xa0>)
 8000e34:	f000 fafc 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(&decimal_buffer_tem, Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <Display_Output+0x94>)
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	ca06      	ldmia	r2, {r1, r2}
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <Display_Output+0xa4>)
 8000e40:	f000 faf6 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString("'C", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e44:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <Display_Output+0x94>)
 8000e46:	2301      	movs	r3, #1
 8000e48:	ca06      	ldmia	r2, {r1, r2}
 8000e4a:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <Display_Output+0xa8>)
 8000e4c:	f000 faf0 	bl	8001430 <ssd1306_WriteString>

	  //Humudity Display
	  ssd1306_SetCursor(0,15);
 8000e50:	210f      	movs	r1, #15
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 fb12 	bl	800147c <ssd1306_SetCursor>
	  ssd1306_WriteString("Humidity: ", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <Display_Output+0x94>)
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	ca06      	ldmia	r2, {r1, r2}
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <Display_Output+0xac>)
 8000e60:	f000 fae6 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(&integer_buffer_hum, Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <Display_Output+0x94>)
 8000e66:	2301      	movs	r3, #1
 8000e68:	ca06      	ldmia	r2, {r1, r2}
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <Display_Output+0xb0>)
 8000e6c:	f000 fae0 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(".", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <Display_Output+0x94>)
 8000e72:	2301      	movs	r3, #1
 8000e74:	ca06      	ldmia	r2, {r1, r2}
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <Display_Output+0xa0>)
 8000e78:	f000 fada 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString(&decimal_buffer_hum, Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <Display_Output+0x94>)
 8000e7e:	2301      	movs	r3, #1
 8000e80:	ca06      	ldmia	r2, {r1, r2}
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <Display_Output+0xb4>)
 8000e84:	f000 fad4 	bl	8001430 <ssd1306_WriteString>
	  ssd1306_WriteString("%", Font_7x10, DISPLAY_COLOR_LIGHT);
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <Display_Output+0x94>)
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	ca06      	ldmia	r2, {r1, r2}
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <Display_Output+0xb8>)
 8000e90:	f000 face 	bl	8001430 <ssd1306_WriteString>


	  ssd1306_UpdateScreen();
 8000e94:	f000 f9ba 	bl	800120c <ssd1306_UpdateScreen>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	08006ec8 	.word	0x08006ec8
 8000ea4:	200001b0 	.word	0x200001b0
 8000ea8:	08006ea0 	.word	0x08006ea0
 8000eac:	200001b4 	.word	0x200001b4
 8000eb0:	08006ed8 	.word	0x08006ed8
 8000eb4:	08006eac 	.word	0x08006eac
 8000eb8:	200001a8 	.word	0x200001a8
 8000ebc:	200001ac 	.word	0x200001ac
 8000ec0:	08006edc 	.word	0x08006edc

08000ec4 <Read_Data>:
=======
 8001448:	2100      	movs	r1, #0
 800144a:	2000      	movs	r0, #0
 800144c:	f000 fb88 	bl	8001b60 <ssd1306_SetCursor>
	  ssd1306_WriteString("Temparatur: ", Font_7x10, DISPLAY_COLOR_LIGHT);
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <Display_Output+0x94>)
 8001452:	2301      	movs	r3, #1
 8001454:	ca06      	ldmia	r2, {r1, r2}
 8001456:	4821      	ldr	r0, [pc, #132]	; (80014dc <Display_Output+0x98>)
 8001458:	f000 fb5c 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(&integer_buffer_tem, Font_7x10, DISPLAY_COLOR_LIGHT);
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <Display_Output+0x94>)
 800145e:	2301      	movs	r3, #1
 8001460:	ca06      	ldmia	r2, {r1, r2}
 8001462:	481f      	ldr	r0, [pc, #124]	; (80014e0 <Display_Output+0x9c>)
 8001464:	f000 fb56 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(".", Font_7x10, DISPLAY_COLOR_LIGHT);
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <Display_Output+0x94>)
 800146a:	2301      	movs	r3, #1
 800146c:	ca06      	ldmia	r2, {r1, r2}
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <Display_Output+0xa0>)
 8001470:	f000 fb50 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(&decimal_buffer_tem, Font_7x10, DISPLAY_COLOR_LIGHT);
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <Display_Output+0x94>)
 8001476:	2301      	movs	r3, #1
 8001478:	ca06      	ldmia	r2, {r1, r2}
 800147a:	481b      	ldr	r0, [pc, #108]	; (80014e8 <Display_Output+0xa4>)
 800147c:	f000 fb4a 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString("'C", Font_7x10, DISPLAY_COLOR_LIGHT);
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <Display_Output+0x94>)
 8001482:	2301      	movs	r3, #1
 8001484:	ca06      	ldmia	r2, {r1, r2}
 8001486:	4819      	ldr	r0, [pc, #100]	; (80014ec <Display_Output+0xa8>)
 8001488:	f000 fb44 	bl	8001b14 <ssd1306_WriteString>

	  //Humudity Display
	  ssd1306_SetCursor(0,15);
 800148c:	210f      	movs	r1, #15
 800148e:	2000      	movs	r0, #0
 8001490:	f000 fb66 	bl	8001b60 <ssd1306_SetCursor>
	  ssd1306_WriteString("Humidity: ", Font_7x10, DISPLAY_COLOR_LIGHT);
 8001494:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <Display_Output+0x94>)
 8001496:	2301      	movs	r3, #1
 8001498:	ca06      	ldmia	r2, {r1, r2}
 800149a:	4815      	ldr	r0, [pc, #84]	; (80014f0 <Display_Output+0xac>)
 800149c:	f000 fb3a 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(&integer_buffer_hum, Font_7x10, DISPLAY_COLOR_LIGHT);
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <Display_Output+0x94>)
 80014a2:	2301      	movs	r3, #1
 80014a4:	ca06      	ldmia	r2, {r1, r2}
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <Display_Output+0xb0>)
 80014a8:	f000 fb34 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(".", Font_7x10, DISPLAY_COLOR_LIGHT);
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <Display_Output+0x94>)
 80014ae:	2301      	movs	r3, #1
 80014b0:	ca06      	ldmia	r2, {r1, r2}
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <Display_Output+0xa0>)
 80014b4:	f000 fb2e 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString(&decimal_buffer_hum, Font_7x10, DISPLAY_COLOR_LIGHT);
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <Display_Output+0x94>)
 80014ba:	2301      	movs	r3, #1
 80014bc:	ca06      	ldmia	r2, {r1, r2}
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <Display_Output+0xb4>)
 80014c0:	f000 fb28 	bl	8001b14 <ssd1306_WriteString>
	  ssd1306_WriteString("%", Font_7x10, DISPLAY_COLOR_LIGHT);
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <Display_Output+0x94>)
 80014c6:	2301      	movs	r3, #1
 80014c8:	ca06      	ldmia	r2, {r1, r2}
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <Display_Output+0xb8>)
 80014cc:	f000 fb22 	bl	8001b14 <ssd1306_WriteString>


	  ssd1306_UpdateScreen();
 80014d0:	f000 fa0e 	bl	80018f0 <ssd1306_UpdateScreen>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	08007578 	.word	0x08007578
 80014e0:	200001b0 	.word	0x200001b0
 80014e4:	08007550 	.word	0x08007550
 80014e8:	200001b4 	.word	0x200001b4
 80014ec:	08007588 	.word	0x08007588
 80014f0:	0800755c 	.word	0x0800755c
 80014f4:	200001a8 	.word	0x200001a8
 80014f8:	200001ac 	.word	0x200001ac
 80014fc:	0800758c 	.word	0x0800758c

08001500 <Read_Data>:
>>>>>>> Stashed changes

void Read_Data(void) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	 dht11_StartSignal(DHT11_GPIO_Port, DHT11_Pin, &htim3);
 8000eca:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <Read_Data+0xb8>)
 8000ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed0:	482b      	ldr	r0, [pc, #172]	; (8000f80 <Read_Data+0xbc>)
 8000ed2:	f7ff fcfa 	bl	80008ca <dht11_StartSignal>
		 /** start timer*/
		 if (dht11_Reply(DHT11_GPIO_Port, DHT11_Pin, &htim3) == 1) {
 8000ed6:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <Read_Data+0xb8>)
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	4828      	ldr	r0, [pc, #160]	; (8000f80 <Read_Data+0xbc>)
 8000ede:	f7ff fd23 	bl	8000928 <dht11_Reply>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d145      	bne.n	8000f74 <Read_Data+0xb0>
			 uint8_t RH_Int_Byte = dht11_ReadData(DHT11_GPIO_Port, DHT11_Pin, &htim3);   // Saves first byte
 8000ee8:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <Read_Data+0xb8>)
 8000eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eee:	4824      	ldr	r0, [pc, #144]	; (8000f80 <Read_Data+0xbc>)
 8000ef0:	f7ff fd4f 	bl	8000992 <dht11_ReadData>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
			 uint8_t RH_Dec_Byte = dht11_ReadData(DHT11_GPIO_Port, DHT11_Pin, &htim3);   // Saves second byte
 8000ef8:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <Read_Data+0xb8>)
 8000efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efe:	4820      	ldr	r0, [pc, #128]	; (8000f80 <Read_Data+0xbc>)
 8000f00:	f7ff fd47 	bl	8000992 <dht11_ReadData>
 8000f04:	4603      	mov	r3, r0
 8000f06:	71bb      	strb	r3, [r7, #6]
			 uint8_t Temp_Int_Byte = dht11_ReadData(DHT11_GPIO_Port, DHT11_Pin, &htim3);   // Saves third byte
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <Read_Data+0xb8>)
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	481c      	ldr	r0, [pc, #112]	; (8000f80 <Read_Data+0xbc>)
 8000f10:	f7ff fd3f 	bl	8000992 <dht11_ReadData>
 8000f14:	4603      	mov	r3, r0
 8000f16:	717b      	strb	r3, [r7, #5]
			 uint8_t Temp_Dec_Byte = dht11_ReadData(DHT11_GPIO_Port, DHT11_Pin, &htim3);   // Saves fourth byte
 8000f18:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <Read_Data+0xb8>)
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <Read_Data+0xbc>)
 8000f20:	f7ff fd37 	bl	8000992 <dht11_ReadData>
 8000f24:	4603      	mov	r3, r0
 8000f26:	713b      	strb	r3, [r7, #4]
			 uint8_t Check_Byte = dht11_ReadData(DHT11_GPIO_Port, DHT11_Pin, &htim3);  // Saves fifth byte
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <Read_Data+0xb8>)
 8000f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f2e:	4814      	ldr	r0, [pc, #80]	; (8000f80 <Read_Data+0xbc>)
 8000f30:	f7ff fd2f 	bl	8000992 <dht11_ReadData>
 8000f34:	4603      	mov	r3, r0
 8000f36:	70fb      	strb	r3, [r7, #3]

			 itoa(RH_Int_Byte,&integer_buffer_hum,10);
<<<<<<< Updated upstream
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	220a      	movs	r2, #10
 8000f3c:	4911      	ldr	r1, [pc, #68]	; (8000f84 <Read_Data+0xc0>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fad8 	bl	80064f4 <itoa>
			 itoa(RH_Dec_Byte,&decimal_buffer_hum,10);
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	220a      	movs	r2, #10
 8000f48:	490f      	ldr	r1, [pc, #60]	; (8000f88 <Read_Data+0xc4>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 fad2 	bl	80064f4 <itoa>
			 // Temparatur buffer
			 itoa(Temp_Dec_Byte,&decimal_buffer_tem,10);
 8000f50:	793b      	ldrb	r3, [r7, #4]
 8000f52:	220a      	movs	r2, #10
 8000f54:	490d      	ldr	r1, [pc, #52]	; (8000f8c <Read_Data+0xc8>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 facc 	bl	80064f4 <itoa>
			 itoa(Temp_Int_Byte,&integer_buffer_tem,10);
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	220a      	movs	r2, #10
 8000f60:	490b      	ldr	r1, [pc, #44]	; (8000f90 <Read_Data+0xcc>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fac6 	bl	80064f4 <itoa>
			 // Checksum buffer
			 itoa(Check_Byte,&checksum_buffer,10);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <Read_Data+0xd0>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 fac0 	bl	80064f4 <itoa>
=======
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	220a      	movs	r2, #10
 8001578:	4911      	ldr	r1, [pc, #68]	; (80015c0 <Read_Data+0xc0>)
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fb14 	bl	8006ba8 <itoa>
			 itoa(RH_Dec_Byte,&decimal_buffer_hum,10);
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	220a      	movs	r2, #10
 8001584:	490f      	ldr	r1, [pc, #60]	; (80015c4 <Read_Data+0xc4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f005 fb0e 	bl	8006ba8 <itoa>
			 // Temparatur buffer
			 itoa(Temp_Dec_Byte,&decimal_buffer_tem,10);
 800158c:	793b      	ldrb	r3, [r7, #4]
 800158e:	220a      	movs	r2, #10
 8001590:	490d      	ldr	r1, [pc, #52]	; (80015c8 <Read_Data+0xc8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f005 fb08 	bl	8006ba8 <itoa>
			 itoa(Temp_Int_Byte,&integer_buffer_tem,10);
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	220a      	movs	r2, #10
 800159c:	490b      	ldr	r1, [pc, #44]	; (80015cc <Read_Data+0xcc>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fb02 	bl	8006ba8 <itoa>
			 // Checksum buffer
			 itoa(Check_Byte,&checksum_buffer,10);
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	220a      	movs	r2, #10
 80015a8:	4909      	ldr	r1, [pc, #36]	; (80015d0 <Read_Data+0xd0>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fafc 	bl	8006ba8 <itoa>
>>>>>>> Stashed changes
		 }
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000618 	.word	0x20000618
 8000f80:	40020000 	.word	0x40020000
 8000f84:	200001a8 	.word	0x200001a8
 8000f88:	200001ac 	.word	0x200001ac
 8000f8c:	200001b4 	.word	0x200001b4
 8000f90:	200001b0 	.word	0x200001b0
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]

	//Beim drücken Wert des Timers auslesen

	timercounter4 = __HAL_TIM_GET_COUNTER(&htim4);
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fac:	601a      	str	r2, [r3, #0]

	//Wenn Timer zu groß wieder runtersetzen
	if (timercounter4 > 30) {
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b1e      	cmp	r3, #30
 8000fb4:	dd06      	ble.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x2c>
		__HAL_TIM_SET_COUNTER(&htim4, 30);
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	221e      	movs	r2, #30
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
		timercounter4 = 30;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fc0:	221e      	movs	r2, #30
 8000fc2:	601a      	str	r2, [r3, #0]
	}

	//HAL_UART_Transmit(&huart2, &timercounter4, 1, HAL_MAX_DELAY);

	//HERZFREQUENZ SETZEN
	int hz = (int)1000/timercounter4;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_Base_Stop_IT(&htim12);
<<<<<<< Updated upstream
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fd4:	f003 fe98 	bl	8004d08 <HAL_TIM_Base_Stop_IT>
=======
 800160e:	481a      	ldr	r0, [pc, #104]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001610:	f003 fed4 	bl	80053bc <HAL_TIM_Base_Stop_IT>
>>>>>>> Stashed changes
	__HAL_TIM_SET_AUTORELOAD(&htim12, hz/2);
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	0fda      	lsrs	r2, r3, #31
 8000fdc:	4413      	add	r3, r2
 8000fde:	105b      	asrs	r3, r3, #1
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	0fda      	lsrs	r2, r3, #31
 8000fec:	4413      	add	r3, r2
 8000fee:	105b      	asrs	r3, r3, #1
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ff4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim12, 0);
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim12);
<<<<<<< Updated upstream
 8000ffe:	480f      	ldr	r0, [pc, #60]	; (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8001000:	f003 fe12 	bl	8004c28 <HAL_TIM_Base_Start_IT>

	//Danach Screen updaten
	ssd1306_SetCursor(0,30);
 8001004:	211e      	movs	r1, #30
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fa38 	bl	800147c <ssd1306_SetCursor>
	char hertz_buffer[20];
	int n = sprintf(hertz_buffer, "Hertz: %d " , timercounter4);
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001016:	4618      	mov	r0, r3
 8001018:	f005 fa84 	bl	8006524 <siprintf>
 800101c:	6238      	str	r0, [r7, #32]
	ssd1306_WriteString(&hertz_buffer, Font_7x10, DISPLAY_COLOR_LIGHT);
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_GPIO_EXTI_Callback+0xac>)
 8001020:	f107 000c 	add.w	r0, r7, #12
 8001024:	2301      	movs	r3, #1
 8001026:	ca06      	ldmia	r2, {r1, r2}
 8001028:	f000 fa02 	bl	8001430 <ssd1306_WriteString>
	ssd1306_UpdateScreen;
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000660 	.word	0x20000660
 8001038:	200001a4 	.word	0x200001a4
 800103c:	200006a8 	.word	0x200006a8
 8001040:	08006ee0 	.word	0x08006ee0
 8001044:	20000000 	.word	0x20000000

08001048 <HAL_DAC_ConvCpltCallbackCh1>:
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,(int)voltage);
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 3a90 	vmov	r3, s15
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 fb60 	bl	8002728 <HAL_DAC_SetValue>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001bc 	.word	0x200001bc

08001074 <test>:


=======
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <HAL_GPIO_EXTI_Callback+0xa4>)
 800163c:	f003 fe4e 	bl	80052dc <HAL_TIM_Base_Start_IT>

	//Danach Screen updaten
	ssd1306_SetCursor(0,30);
 8001640:	211e      	movs	r1, #30
 8001642:	2000      	movs	r0, #0
 8001644:	f000 fa8c 	bl	8001b60 <ssd1306_SetCursor>
	char hertz_buffer[20];
	int n = sprintf(hertz_buffer, "Hertz: %d " , timercounter4);
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_GPIO_EXTI_Callback+0xa0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	490a      	ldr	r1, [pc, #40]	; (800167c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f005 fac0 	bl	8006bd8 <siprintf>
 8001658:	6238      	str	r0, [r7, #32]
	ssd1306_WriteString(&hertz_buffer, Font_7x10, DISPLAY_COLOR_LIGHT);
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_GPIO_EXTI_Callback+0xac>)
 800165c:	f107 000c 	add.w	r0, r7, #12
 8001660:	2301      	movs	r3, #1
 8001662:	ca06      	ldmia	r2, {r1, r2}
 8001664:	f000 fa56 	bl	8001b14 <ssd1306_WriteString>
	ssd1306_UpdateScreen;
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000660 	.word	0x20000660
 8001674:	200001a4 	.word	0x200001a4
 8001678:	200006a8 	.word	0x200006a8
 800167c:	08007590 	.word	0x08007590
 8001680:	20000000 	.word	0x20000000
 8001684:	00000000 	.word	0x00000000

08001688 <ADC_DAC_Output>:

void ADC_DAC_Output(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af02      	add	r7, sp, #8
	//ADC
	HAL_ADC_Start_IT(&hadc1);
 800168e:	4836      	ldr	r0, [pc, #216]	; (8001768 <ADC_DAC_Output+0xe0>)
 8001690:	f000 fea2 	bl	80023d8 <HAL_ADC_Start_IT>
>>>>>>> Stashed changes


}
void test(){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	uint32_t adc = HAL_ADC_GetValue(&hadc1);
<<<<<<< Updated upstream
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <test+0x24>)
 800107c:	f000 ff16 	bl	8001eac <HAL_ADC_GetValue>
 8001080:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,adc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <test+0x28>)
 800108a:	f001 fb4d 	bl	8002728 <HAL_DAC_SetValue>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000094 	.word	0x20000094
 800109c:	200000dc 	.word	0x200000dc

080010a0 <Error_Handler>:
=======
 8001694:	4834      	ldr	r0, [pc, #208]	; (8001768 <ADC_DAC_Output+0xe0>)
 8001696:	f000 ff7d 	bl	8002594 <HAL_ADC_GetValue>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24
	if (adc > 4096) {
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a2:	d901      	bls.n	80016a8 <ADC_DAC_Output+0x20>
			adc = 255;
 80016a4:	23ff      	movs	r3, #255	; 0xff
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	voltage = ((3.3)/(4095)) * (int) adc;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f87c 	bl	80007a8 <__aeabi_i2d>
 80016b0:	a32b      	add	r3, pc, #172	; (adr r3, 8001760 <ADC_DAC_Output+0xd8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fdfb 	bl	80002b0 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f8db 	bl	800087c <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <ADC_DAC_Output+0xe4>)
 80016ca:	6013      	str	r3, [r2, #0]
	uint32_t  voltageArray[1];
	voltageArray[0] = 1000;
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	617b      	str	r3, [r7, #20]



	int integer_wert = (int) voltage;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <ADC_DAC_Output+0xe4>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	623b      	str	r3, [r7, #32]
	int deci_wert = (voltage - integer_wert)*100;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <ADC_DAC_Output+0xe4>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001770 <ADC_DAC_Output+0xe8>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	61fb      	str	r3, [r7, #28]
	char ausgabe[20];
	itoa(deci_wert, &ausgabe,10);
 8001708:	463b      	mov	r3, r7
 800170a:	220a      	movs	r2, #10
 800170c:	4619      	mov	r1, r3
 800170e:	69f8      	ldr	r0, [r7, #28]
 8001710:	f005 fa4a 	bl	8006ba8 <itoa>
	int z = sprintf(ausgabe, "%d,%d", integer_wert, deci_wert);
 8001714:	4638      	mov	r0, r7
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	4916      	ldr	r1, [pc, #88]	; (8001774 <ADC_DAC_Output+0xec>)
 800171c:	f005 fa5c 	bl	8006bd8 <siprintf>
 8001720:	61b8      	str	r0, [r7, #24]
	ssd1306_SetCursor(0,45);
 8001722:	212d      	movs	r1, #45	; 0x2d
 8001724:	2000      	movs	r0, #0
 8001726:	f000 fa1b 	bl	8001b60 <ssd1306_SetCursor>
	ssd1306_WriteString("Voltage: ", Font_7x10, DISPLAY_COLOR_LIGHT);
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <ADC_DAC_Output+0xf0>)
 800172c:	2301      	movs	r3, #1
 800172e:	ca06      	ldmia	r2, {r1, r2}
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <ADC_DAC_Output+0xf4>)
 8001732:	f000 f9ef 	bl	8001b14 <ssd1306_WriteString>
	ssd1306_WriteString(&ausgabe, Font_7x10, DISPLAY_COLOR_LIGHT);
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <ADC_DAC_Output+0xf0>)
 8001738:	4638      	mov	r0, r7
 800173a:	2301      	movs	r3, #1
 800173c:	ca06      	ldmia	r2, {r1, r2}
 800173e:	f000 f9e9 	bl	8001b14 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001742:	f000 f8d5 	bl	80018f0 <ssd1306_UpdateScreen>

	//DAC
	HAL_DAC_Start_DMA( &hdac, DAC_CHANNEL_1,(uint32_t*)voltageArray, 1, DAC_ALIGN_12B_R);
 8001746:	f107 0214 	add.w	r2, r7, #20
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2100      	movs	r1, #0
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <ADC_DAC_Output+0xf8>)
 8001754:	f001 fa8e 	bl	8002c74 <HAL_DAC_Start_DMA>

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	e734d9b4 	.word	0xe734d9b4
 8001764:	3f4a680c 	.word	0x3f4a680c
 8001768:	20000094 	.word	0x20000094
 800176c:	200001bc 	.word	0x200001bc
 8001770:	42c80000 	.word	0x42c80000
 8001774:	0800759c 	.word	0x0800759c
 8001778:	20000000 	.word	0x20000000
 800177c:	080075a4 	.word	0x080075a4
 8001780:	200000dc 	.word	0x200000dc

08001784 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
=======
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
=======
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(ssd1306_hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <ssd1306_WriteCommand+0x2c>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	230a      	movs	r3, #10
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2301      	movs	r3, #1
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2200      	movs	r2, #0
 80010ca:	2178      	movs	r1, #120	; 0x78
 80010cc:	f002 fb7c 	bl	80037c8 <HAL_I2C_Mem_Write>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200005c8 	.word	0x200005c8

080010dc <ssd1306_Init>:



void ssd1306_Init(I2C_HandleTypeDef* hi2c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	ssd1306_hi2c = hi2c;
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <ssd1306_Init+0xe0>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]

	// Wait for the screen to boot
	HAL_Delay(100);
 80010ea:	2064      	movs	r0, #100	; 0x64
 80010ec:	f000 fd98 	bl	8001c20 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80010f0:	20ae      	movs	r0, #174	; 0xae
 80010f2:	f7ff ffdb 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80010f6:	2020      	movs	r0, #32
 80010f8:	f7ff ffd8 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010fc:	2010      	movs	r0, #16
 80010fe:	f7ff ffd5 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001102:	20b0      	movs	r0, #176	; 0xb0
 8001104:	f7ff ffd2 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001108:	20c8      	movs	r0, #200	; 0xc8
 800110a:	f7ff ffcf 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ffcc 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001114:	2010      	movs	r0, #16
 8001116:	f7ff ffc9 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800111a:	2040      	movs	r0, #64	; 0x40
 800111c:	f7ff ffc6 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001120:	2081      	movs	r0, #129	; 0x81
 8001122:	f7ff ffc3 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001126:	20ff      	movs	r0, #255	; 0xff
 8001128:	f7ff ffc0 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800112c:	20a1      	movs	r0, #161	; 0xa1
 800112e:	f7ff ffbd 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001132:	20a6      	movs	r0, #166	; 0xa6
 8001134:	f7ff ffba 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001138:	20a8      	movs	r0, #168	; 0xa8
 800113a:	f7ff ffb7 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800113e:	203f      	movs	r0, #63	; 0x3f
 8001140:	f7ff ffb4 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001144:	20a4      	movs	r0, #164	; 0xa4
 8001146:	f7ff ffb1 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800114a:	20d3      	movs	r0, #211	; 0xd3
 800114c:	f7ff ffae 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ffab 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001156:	20d5      	movs	r0, #213	; 0xd5
 8001158:	f7ff ffa8 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800115c:	20f0      	movs	r0, #240	; 0xf0
 800115e:	f7ff ffa5 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001162:	20d9      	movs	r0, #217	; 0xd9
 8001164:	f7ff ffa2 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001168:	2022      	movs	r0, #34	; 0x22
 800116a:	f7ff ff9f 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800116e:	20da      	movs	r0, #218	; 0xda
 8001170:	f7ff ff9c 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001174:	2012      	movs	r0, #18
 8001176:	f7ff ff99 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800117a:	20db      	movs	r0, #219	; 0xdb
 800117c:	f7ff ff96 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001180:	2020      	movs	r0, #32
 8001182:	f7ff ff93 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001186:	208d      	movs	r0, #141	; 0x8d
 8001188:	f7ff ff90 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800118c:	2014      	movs	r0, #20
 800118e:	f7ff ff8d 	bl	80010ac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001192:	20af      	movs	r0, #175	; 0xaf
 8001194:	f7ff ff8a 	bl	80010ac <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(DISPLAY_COLOR_DARK);
 8001198:	2000      	movs	r0, #0
 800119a:	f000 f813 	bl	80011c4 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800119e:	f000 f835 	bl	800120c <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <ssd1306_Init+0xe4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <ssd1306_Init+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <ssd1306_Init+0xe4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	715a      	strb	r2, [r3, #5]
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200005c8 	.word	0x200005c8
 80011c0:	200005c0 	.word	0x200005c0

080011c4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	e00d      	b.n	80011f0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == DISPLAY_COLOR_DARK) ? 0x00 : 0xFF;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <ssd1306_Fill+0x1a>
 80011da:	2100      	movs	r1, #0
 80011dc:	e000      	b.n	80011e0 <ssd1306_Fill+0x1c>
 80011de:	21ff      	movs	r1, #255	; 0xff
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <ssd1306_Fill+0x44>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	460a      	mov	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d3ed      	bcc.n	80011d4 <ssd1306_Fill+0x10>
	}
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200001c0 	.word	0x200001c0

0800120c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e01e      	b.n	8001256 <ssd1306_UpdateScreen+0x4a>
		ssd1306_WriteCommand(0xB0 + i);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	3b50      	subs	r3, #80	; 0x50
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff44 	bl	80010ac <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff41 	bl	80010ac <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800122a:	2010      	movs	r0, #16
 800122c:	f7ff ff3e 	bl	80010ac <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(ssd1306_hi2c,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <ssd1306_UpdateScreen+0x5c>)
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <ssd1306_UpdateScreen+0x60>)
 800123a:	4413      	add	r3, r2
 800123c:	2264      	movs	r2, #100	; 0x64
 800123e:	9202      	str	r2, [sp, #8]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2240      	movs	r2, #64	; 0x40
 800124a:	2178      	movs	r1, #120	; 0x78
 800124c:	f002 fabc 	bl	80037c8 <HAL_I2C_Mem_Write>
	for (i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	3301      	adds	r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b07      	cmp	r3, #7
 800125a:	d9dd      	bls.n	8001218 <ssd1306_UpdateScreen+0xc>
	}
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200005c8 	.word	0x200005c8
 800126c:	200001c0 	.word	0x200001c0

08001270 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	460b      	mov	r3, r1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	4613      	mov	r3, r2
 8001280:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db48      	blt.n	800131c <ssd1306_DrawPixel+0xac>
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	2b3f      	cmp	r3, #63	; 0x3f
 800128e:	d845      	bhi.n	800131c <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <ssd1306_DrawPixel+0xb8>)
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == DISPLAY_COLOR_LIGHT)
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d11a      	bne.n	80012e2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4413      	add	r3, r2
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <ssd1306_DrawPixel+0xbc>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b259      	sxtb	r1, r3
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	4603      	mov	r3, r0
 80012d6:	01db      	lsls	r3, r3, #7
 80012d8:	4413      	add	r3, r2
 80012da:	b2c9      	uxtb	r1, r1
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <ssd1306_DrawPixel+0xbc>)
 80012de:	54d1      	strb	r1, [r2, r3]
 80012e0:	e01d      	b.n	800131e <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	b2d8      	uxtb	r0, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	4413      	add	r3, r2
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <ssd1306_DrawPixel+0xbc>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	b25b      	sxtb	r3, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4013      	ands	r3, r2
 800130a:	b259      	sxtb	r1, r3
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	4603      	mov	r3, r0
 8001310:	01db      	lsls	r3, r3, #7
 8001312:	4413      	add	r3, r2
 8001314:	b2c9      	uxtb	r1, r1
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <ssd1306_DrawPixel+0xbc>)
 8001318:	54d1      	strb	r1, [r2, r3]
 800131a:	e000      	b.n	800131e <ssd1306_DrawPixel+0xae>
		return;
 800131c:	bf00      	nop
	}
}
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	200005c0 	.word	0x200005c0
 800132c:	200001c0 	.word	0x200001c0

08001330 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4604      	mov	r4, r0
 8001338:	1d38      	adds	r0, r7, #4
 800133a:	e880 0006 	stmia.w	r0, {r1, r2}
 800133e:	461a      	mov	r2, r3
 8001340:	4623      	mov	r3, r4
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	4613      	mov	r3, r2
 8001346:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <ssd1306_WriteChar+0xfc>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	2b7f      	cmp	r3, #127	; 0x7f
 8001354:	dc06      	bgt.n	8001364 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <ssd1306_WriteChar+0xfc>)
 8001358:	885b      	ldrh	r3, [r3, #2]
 800135a:	461a      	mov	r2, r3
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001360:	2b3f      	cmp	r3, #63	; 0x3f
 8001362:	dd01      	ble.n	8001368 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e05d      	b.n	8001424 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	e04c      	b.n	8001408 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	3b20      	subs	r3, #32
 8001374:	7979      	ldrb	r1, [r7, #5]
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4619      	mov	r1, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	440b      	add	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	e034      	b.n	80013f8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <ssd1306_WriteChar+0xfc>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b2d8      	uxtb	r0, r3
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <ssd1306_WriteChar+0xfc>)
 80013ae:	885b      	ldrh	r3, [r3, #2]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	7bba      	ldrb	r2, [r7, #14]
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff ff57 	bl	8001270 <ssd1306_DrawPixel>
 80013c2:	e016      	b.n	80013f2 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <ssd1306_WriteChar+0xfc>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b2d8      	uxtb	r0, r3
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <ssd1306_WriteChar+0xfc>)
 80013d4:	885b      	ldrh	r3, [r3, #2]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b2d9      	uxtb	r1, r3
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	f7ff ff3f 	bl	8001270 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	793b      	ldrb	r3, [r7, #4]
 80013fa:	461a      	mov	r2, r3
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d3c5      	bcc.n	800138e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	461a      	mov	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	4293      	cmp	r3, r2
 8001410:	d3ad      	bcc.n	800136e <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <ssd1306_WriteChar+0xfc>)
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	793b      	ldrb	r3, [r7, #4]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <ssd1306_WriteChar+0xfc>)
 8001420:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3724      	adds	r7, #36	; 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	200005c0 	.word	0x200005c0

08001430 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	1d38      	adds	r0, r7, #4
 800143a:	e880 0006 	stmia.w	r0, {r1, r2}
 800143e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8001440:	e012      	b.n	8001468 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	7818      	ldrb	r0, [r3, #0]
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	1d3a      	adds	r2, r7, #4
 800144a:	ca06      	ldmia	r2, {r1, r2}
 800144c:	f7ff ff70 	bl	8001330 <ssd1306_WriteChar>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d002      	beq.n	8001462 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	e008      	b.n	8001474 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e8      	bne.n	8001442 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	781b      	ldrb	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <ssd1306_SetCursor+0x2c>)
 8001492:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <ssd1306_SetCursor+0x2c>)
 800149a:	805a      	strh	r2, [r3, #2]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200005c0 	.word	0x200005c0

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_MspInit+0x4c>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ea:	2007      	movs	r0, #7
 80014ec:	f000 ffea 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800

080014fc <NMI_Handler>:
=======
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <ssd1306_WriteCommand>:
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af04      	add	r7, sp, #16
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <ssd1306_WriteCommand+0x2c>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	230a      	movs	r3, #10
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	2200      	movs	r2, #0
 80017ae:	2178      	movs	r1, #120	; 0x78
 80017b0:	f002 fb64 	bl	8003e7c <HAL_I2C_Mem_Write>
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200005c8 	.word	0x200005c8

080017c0 <ssd1306_Init>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <ssd1306_Init+0xe0>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f000 fd9a 	bl	8002308 <HAL_Delay>
 80017d4:	20ae      	movs	r0, #174	; 0xae
 80017d6:	f7ff ffdb 	bl	8001790 <ssd1306_WriteCommand>
 80017da:	2020      	movs	r0, #32
 80017dc:	f7ff ffd8 	bl	8001790 <ssd1306_WriteCommand>
 80017e0:	2010      	movs	r0, #16
 80017e2:	f7ff ffd5 	bl	8001790 <ssd1306_WriteCommand>
 80017e6:	20b0      	movs	r0, #176	; 0xb0
 80017e8:	f7ff ffd2 	bl	8001790 <ssd1306_WriteCommand>
 80017ec:	20c8      	movs	r0, #200	; 0xc8
 80017ee:	f7ff ffcf 	bl	8001790 <ssd1306_WriteCommand>
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff ffcc 	bl	8001790 <ssd1306_WriteCommand>
 80017f8:	2010      	movs	r0, #16
 80017fa:	f7ff ffc9 	bl	8001790 <ssd1306_WriteCommand>
 80017fe:	2040      	movs	r0, #64	; 0x40
 8001800:	f7ff ffc6 	bl	8001790 <ssd1306_WriteCommand>
 8001804:	2081      	movs	r0, #129	; 0x81
 8001806:	f7ff ffc3 	bl	8001790 <ssd1306_WriteCommand>
 800180a:	20ff      	movs	r0, #255	; 0xff
 800180c:	f7ff ffc0 	bl	8001790 <ssd1306_WriteCommand>
 8001810:	20a1      	movs	r0, #161	; 0xa1
 8001812:	f7ff ffbd 	bl	8001790 <ssd1306_WriteCommand>
 8001816:	20a6      	movs	r0, #166	; 0xa6
 8001818:	f7ff ffba 	bl	8001790 <ssd1306_WriteCommand>
 800181c:	20a8      	movs	r0, #168	; 0xa8
 800181e:	f7ff ffb7 	bl	8001790 <ssd1306_WriteCommand>
 8001822:	203f      	movs	r0, #63	; 0x3f
 8001824:	f7ff ffb4 	bl	8001790 <ssd1306_WriteCommand>
 8001828:	20a4      	movs	r0, #164	; 0xa4
 800182a:	f7ff ffb1 	bl	8001790 <ssd1306_WriteCommand>
 800182e:	20d3      	movs	r0, #211	; 0xd3
 8001830:	f7ff ffae 	bl	8001790 <ssd1306_WriteCommand>
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff ffab 	bl	8001790 <ssd1306_WriteCommand>
 800183a:	20d5      	movs	r0, #213	; 0xd5
 800183c:	f7ff ffa8 	bl	8001790 <ssd1306_WriteCommand>
 8001840:	20f0      	movs	r0, #240	; 0xf0
 8001842:	f7ff ffa5 	bl	8001790 <ssd1306_WriteCommand>
 8001846:	20d9      	movs	r0, #217	; 0xd9
 8001848:	f7ff ffa2 	bl	8001790 <ssd1306_WriteCommand>
 800184c:	2022      	movs	r0, #34	; 0x22
 800184e:	f7ff ff9f 	bl	8001790 <ssd1306_WriteCommand>
 8001852:	20da      	movs	r0, #218	; 0xda
 8001854:	f7ff ff9c 	bl	8001790 <ssd1306_WriteCommand>
 8001858:	2012      	movs	r0, #18
 800185a:	f7ff ff99 	bl	8001790 <ssd1306_WriteCommand>
 800185e:	20db      	movs	r0, #219	; 0xdb
 8001860:	f7ff ff96 	bl	8001790 <ssd1306_WriteCommand>
 8001864:	2020      	movs	r0, #32
 8001866:	f7ff ff93 	bl	8001790 <ssd1306_WriteCommand>
 800186a:	208d      	movs	r0, #141	; 0x8d
 800186c:	f7ff ff90 	bl	8001790 <ssd1306_WriteCommand>
 8001870:	2014      	movs	r0, #20
 8001872:	f7ff ff8d 	bl	8001790 <ssd1306_WriteCommand>
 8001876:	20af      	movs	r0, #175	; 0xaf
 8001878:	f7ff ff8a 	bl	8001790 <ssd1306_WriteCommand>
 800187c:	2000      	movs	r0, #0
 800187e:	f000 f813 	bl	80018a8 <ssd1306_Fill>
 8001882:	f000 f835 	bl	80018f0 <ssd1306_UpdateScreen>
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <ssd1306_Init+0xe4>)
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <ssd1306_Init+0xe4>)
 800188e:	2200      	movs	r2, #0
 8001890:	805a      	strh	r2, [r3, #2]
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <ssd1306_Init+0xe4>)
 8001894:	2201      	movs	r2, #1
 8001896:	715a      	strb	r2, [r3, #5]
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200005c8 	.word	0x200005c8
 80018a4:	200005c0 	.word	0x200005c0

080018a8 <ssd1306_Fill>:
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e00d      	b.n	80018d4 <ssd1306_Fill+0x2c>
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <ssd1306_Fill+0x1a>
 80018be:	2100      	movs	r1, #0
 80018c0:	e000      	b.n	80018c4 <ssd1306_Fill+0x1c>
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <ssd1306_Fill+0x44>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	460a      	mov	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d3ed      	bcc.n	80018b8 <ssd1306_Fill+0x10>
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200001c0 	.word	0x200001c0

080018f0 <ssd1306_UpdateScreen>:
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	e01e      	b.n	800193a <ssd1306_UpdateScreen+0x4a>
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	3b50      	subs	r3, #80	; 0x50
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff44 	bl	8001790 <ssd1306_WriteCommand>
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff ff41 	bl	8001790 <ssd1306_WriteCommand>
 800190e:	2010      	movs	r0, #16
 8001910:	f7ff ff3e 	bl	8001790 <ssd1306_WriteCommand>
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <ssd1306_UpdateScreen+0x5c>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	01db      	lsls	r3, r3, #7
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <ssd1306_UpdateScreen+0x60>)
 800191e:	4413      	add	r3, r2
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	9202      	str	r2, [sp, #8]
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2240      	movs	r2, #64	; 0x40
 800192e:	2178      	movs	r1, #120	; 0x78
 8001930:	f002 faa4 	bl	8003e7c <HAL_I2C_Mem_Write>
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3301      	adds	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b07      	cmp	r3, #7
 800193e:	d9dd      	bls.n	80018fc <ssd1306_UpdateScreen+0xc>
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200005c8 	.word	0x200005c8
 8001950:	200001c0 	.word	0x200001c0

08001954 <ssd1306_DrawPixel>:
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	460b      	mov	r3, r1
 8001960:	71bb      	strb	r3, [r7, #6]
 8001962:	4613      	mov	r3, r2
 8001964:	717b      	strb	r3, [r7, #5]
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db48      	blt.n	8001a00 <ssd1306_DrawPixel+0xac>
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	2b3f      	cmp	r3, #63	; 0x3f
 8001972:	d845      	bhi.n	8001a00 <ssd1306_DrawPixel+0xac>
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <ssd1306_DrawPixel+0xb8>)
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <ssd1306_DrawPixel+0x36>
 800197c:	797b      	ldrb	r3, [r7, #5]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	717b      	strb	r3, [r7, #5]
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d11a      	bne.n	80019c6 <ssd1306_DrawPixel+0x72>
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2d8      	uxtb	r0, r3
 8001998:	4603      	mov	r3, r0
 800199a:	01db      	lsls	r3, r3, #7
 800199c:	4413      	add	r3, r2
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <ssd1306_DrawPixel+0xbc>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b259      	sxtb	r1, r3
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	4603      	mov	r3, r0
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	4413      	add	r3, r2
 80019be:	b2c9      	uxtb	r1, r1
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <ssd1306_DrawPixel+0xbc>)
 80019c2:	54d1      	strb	r1, [r2, r3]
 80019c4:	e01d      	b.n	8001a02 <ssd1306_DrawPixel+0xae>
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	08db      	lsrs	r3, r3, #3
 80019cc:	b2d8      	uxtb	r0, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	01db      	lsls	r3, r3, #7
 80019d2:	4413      	add	r3, r2
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <ssd1306_DrawPixel+0xbc>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	b25a      	sxtb	r2, r3
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	b259      	sxtb	r1, r3
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	4603      	mov	r3, r0
 80019f4:	01db      	lsls	r3, r3, #7
 80019f6:	4413      	add	r3, r2
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <ssd1306_DrawPixel+0xbc>)
 80019fc:	54d1      	strb	r1, [r2, r3]
 80019fe:	e000      	b.n	8001a02 <ssd1306_DrawPixel+0xae>
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	200005c0 	.word	0x200005c0
 8001a10:	200001c0 	.word	0x200001c0

08001a14 <ssd1306_WriteChar>:
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	1d38      	adds	r0, r7, #4
 8001a1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a22:	461a      	mov	r2, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	73bb      	strb	r3, [r7, #14]
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	793b      	ldrb	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	2b7f      	cmp	r3, #127	; 0x7f
 8001a38:	dc06      	bgt.n	8001a48 <ssd1306_WriteChar+0x34>
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001a3c:	885b      	ldrh	r3, [r3, #2]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	797b      	ldrb	r3, [r7, #5]
 8001a42:	4413      	add	r3, r2
 8001a44:	2b3f      	cmp	r3, #63	; 0x3f
 8001a46:	dd01      	ble.n	8001a4c <ssd1306_WriteChar+0x38>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e05d      	b.n	8001b08 <ssd1306_WriteChar+0xf4>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	e04c      	b.n	8001aec <ssd1306_WriteChar+0xd8>
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	3b20      	subs	r3, #32
 8001a58:	7979      	ldrb	r1, [r7, #5]
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	440b      	add	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	e034      	b.n	8001adc <ssd1306_WriteChar+0xc8>
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <ssd1306_WriteChar+0x94>
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2d8      	uxtb	r0, r3
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	7bba      	ldrb	r2, [r7, #14]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff ff57 	bl	8001954 <ssd1306_DrawPixel>
 8001aa6:	e016      	b.n	8001ad6 <ssd1306_WriteChar+0xc2>
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2d8      	uxtb	r0, r3
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2d9      	uxtb	r1, r3
 8001ac4:	7bbb      	ldrb	r3, [r7, #14]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f7ff ff3f 	bl	8001954 <ssd1306_DrawPixel>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	793b      	ldrb	r3, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d3c5      	bcc.n	8001a72 <ssd1306_WriteChar+0x5e>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	797b      	ldrb	r3, [r7, #5]
 8001aee:	461a      	mov	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d3ad      	bcc.n	8001a52 <ssd1306_WriteChar+0x3e>
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	793b      	ldrb	r3, [r7, #4]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <ssd1306_WriteChar+0xfc>)
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3724      	adds	r7, #36	; 0x24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	200005c0 	.word	0x200005c0

08001b14 <ssd1306_WriteString>:
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	1d38      	adds	r0, r7, #4
 8001b1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	e012      	b.n	8001b4c <ssd1306_WriteString+0x38>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	7818      	ldrb	r0, [r3, #0]
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	1d3a      	adds	r2, r7, #4
 8001b2e:	ca06      	ldmia	r2, {r1, r2}
 8001b30:	f7ff ff70 	bl	8001a14 <ssd1306_WriteChar>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d002      	beq.n	8001b46 <ssd1306_WriteString+0x32>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	e008      	b.n	8001b58 <ssd1306_WriteString+0x44>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <ssd1306_WriteString+0x12>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <ssd1306_SetCursor>:
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	460a      	mov	r2, r1
 8001b6a:	71fb      	strb	r3, [r7, #7]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	71bb      	strb	r3, [r7, #6]
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <ssd1306_SetCursor+0x2c>)
 8001b76:	801a      	strh	r2, [r3, #0]
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <ssd1306_SetCursor+0x2c>)
 8001b7e:	805a      	strh	r2, [r3, #2]
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	200005c0 	.word	0x200005c0

08001b90 <HAL_MspInit>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f000 ffec 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800

08001be0 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
=======
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:
=======
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
=======
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:
=======
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
=======
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:
=======
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
=======
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:
=======
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
=======
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:
=======
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
=======
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:
=======
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
=======
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:
=======
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
=======
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:
=======
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
=======
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8001548:	f000 fb4a 	bl	8001be0 <HAL_IncTick>
=======
 8001c2c:	f000 fb4c 	bl	80022c8 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <DMA1_Stream5_IRQHandler>:
=======
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <DMA1_Stream5_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
=======
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
<<<<<<< Updated upstream
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA1_Stream5_IRQHandler+0x10>)
 8001556:	f001 fb91 	bl	8002c7c <HAL_DMA_IRQHandler>
=======
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA1_Stream5_IRQHandler+0x10>)
 8001c3a:	f001 fb79 	bl	8003330 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
<<<<<<< Updated upstream
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000f0 	.word	0x200000f0

08001564 <TIM2_IRQHandler>:
=======
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000f0 	.word	0x200000f0

08001c48 <TIM2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	Read_Data();
 8001568:	f7ff fcac 	bl	8000ec4 <Read_Data>
	Display_Output();
 800156c:	f7ff fc4c 	bl	8000e08 <Display_Output>
	//UART_Output();


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM2_IRQHandler+0x18>)
 8001572:	f003 fc9e 	bl	8004eb2 <HAL_TIM_IRQHandler>
=======
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	Read_Data();
 8001c4c:	f7ff fc58 	bl	8001500 <Read_Data>
	Display_Output();
 8001c50:	f7ff fbf8 	bl	8001444 <Display_Output>
	//UART_Output();
	ADC_DAC_Output();
 8001c54:	f7ff fd18 	bl	8001688 <ADC_DAC_Output>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM2_IRQHandler+0x1c>)
 8001c5a:	f003 fc84 	bl	8005566 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< Updated upstream
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200005d0 	.word	0x200005d0

08001580 <USART2_IRQHandler>:
=======
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200005d0 	.word	0x200005d0

08001c68 <USART2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
=======
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< Updated upstream
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f004 f8ad 	bl	80056e4 <HAL_UART_IRQHandler>
=======
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <USART2_IRQHandler+0x10>)
 8001c6e:	f004 f893 	bl	8005d98 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< Updated upstream
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200006f0 	.word	0x200006f0

08001594 <EXTI15_10_IRQHandler>:
=======
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200006f0 	.word	0x200006f0

08001c7c <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
=======
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
<<<<<<< Updated upstream
 8001598:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800159c:	f001 ffb8 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a4:	f001 ffb4 	bl	8003510 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001c80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c84:	f001 ff9e 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c8c:	f001 ff9a 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <TIM8_BRK_TIM12_IRQHandler>:
=======
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <TIM8_BRK_TIM12_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
<<<<<<< Updated upstream
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 80015b0:	2120      	movs	r1, #32
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80015b4:	f001 ff91 	bl	80034da <HAL_GPIO_TogglePin>

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <TIM8_BRK_TIM12_IRQHandler+0x1c>)
 80015ba:	f003 fc7a 	bl	8004eb2 <HAL_TIM_IRQHandler>
=======
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8001c9c:	f001 ff77 	bl	8003b8e <HAL_GPIO_TogglePin>

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <TIM8_BRK_TIM12_IRQHandler+0x1c>)
 8001ca2:	f003 fc60 	bl	8005566 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
<<<<<<< Updated upstream
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020000 	.word	0x40020000
 80015c8:	200006a8 	.word	0x200006a8

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f004 ff38 	bl	8006470 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20020000 	.word	0x20020000
 800162c:	00000400 	.word	0x00000400
 8001630:	200005cc 	.word	0x200005cc
 8001634:	20000748 	.word	0x20000748

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM2_Init+0x98>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM2_Init+0x98>)
 8001682:	f242 3227 	movw	r2, #8999	; 0x2327
 8001686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM2_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM2_Init+0x98>)
 8001690:	f242 7210 	movw	r2, #10000	; 0x2710
 8001694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_TIM2_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM2_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016a4:	f003 f9e0 	bl	8004a68 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ae:	f7ff fcf7 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016c0:	f003 fcff 	bl	80050c2 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ca:	f7ff fce9 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM2_Init+0x98>)
 80016dc:	f003 ff24 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016e6:	f7ff fcdb 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200005d0 	.word	0x200005d0

080016f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_TIM3_Init+0x94>)
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <MX_TIM3_Init+0x98>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <MX_TIM3_Init+0x94>)
 800171c:	2259      	movs	r2, #89	; 0x59
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_TIM3_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_TIM3_Init+0x94>)
 8001728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_TIM3_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173a:	4814      	ldr	r0, [pc, #80]	; (800178c <MX_TIM3_Init+0x94>)
 800173c:	f003 f994 	bl	8004a68 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001746:	f7ff fcab 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4619      	mov	r1, r3
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <MX_TIM3_Init+0x94>)
 8001758:	f003 fcb3 	bl	80050c2 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001762:	f7ff fc9d 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_TIM3_Init+0x94>)
 8001774:	f003 fed8 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800177e:	f7ff fc8f 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000618 	.word	0x20000618
 8001790:	40000400 	.word	0x40000400

08001794 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 feb6 	bl	8006514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <MX_TIM4_Init+0xa4>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM4_Init+0xa0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ee:	2301      	movs	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM4_Init+0xa0>)
 8001802:	f003 fab0 	bl	8004d66 <HAL_TIM_Encoder_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800180c:	f7ff fc48 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM4_Init+0xa0>)
 800181e:	f003 fe83 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001828:	f7ff fc3a 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3730      	adds	r7, #48	; 0x30
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000660 	.word	0x20000660
 8001838:	40000800 	.word	0x40000800

0800183c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <MX_TIM12_Init+0x70>)
 8001852:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 65535;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_TIM12_Init+0x6c>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001864:	2264      	movs	r2, #100	; 0x64
 8001866:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_TIM12_Init+0x6c>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001876:	f003 f8f7 	bl	8004a68 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001880:	f7ff fc0e 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	4619      	mov	r1, r3
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <MX_TIM12_Init+0x6c>)
 8001890:	f003 fc17 	bl	80050c2 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800189a:	f7ff fc01 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200006a8 	.word	0x200006a8
 80018ac:	40001800 	.word	0x40001800

080018b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d116      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	201c      	movs	r0, #28
 80018e4:	f000 fdf9 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e8:	201c      	movs	r0, #28
 80018ea:	f000 fe12 	bl	8002512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80018ee:	e02e      	b.n	800194e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_TIM_Base_MspInit+0xac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10e      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
}
 8001916:	e01a      	b.n	800194e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM12)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_TIM_Base_MspInit+0xb0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d115      	bne.n	800194e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_TIM_Base_MspInit+0xa8>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	202b      	movs	r0, #43	; 0x2b
 8001944:	f000 fdc9 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001948:	202b      	movs	r0, #43	; 0x2b
 800194a:	f000 fde2 	bl	8002512 <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40000400 	.word	0x40000400
 8001960:	40001800 	.word	0x40001800

08001964 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12b      	bne.n	80019de <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_TIM_Encoder_MspInit+0x88>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019ce:	2302      	movs	r3, #2
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019da:	f001 fbb9 	bl	8003150 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400

080019f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_USART2_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USART2_UART_Init+0x4c>)
 8001a2c:	f003 fe0c 	bl	8005648 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f7ff fb33 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200006f0 	.word	0x200006f0
 8001a44:	40004400 	.word	0x40004400

08001a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <HAL_UART_MspInit+0x94>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d133      	bne.n	8001ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_UART_MspInit+0x98>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <HAL_UART_MspInit+0x9c>)
 8001abe:	f001 fb47 	bl	8003150 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2026      	movs	r0, #38	; 0x26
 8001ac8:	f000 fd07 	bl	80024da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001acc:	2026      	movs	r0, #38	; 0x26
 8001ace:	f000 fd20 	bl	8002512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aee:	490e      	ldr	r1, [pc, #56]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b04:	4c0b      	ldr	r4, [pc, #44]	; (8001b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b12:	f7ff fd91 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b16:	f004 fcb1 	bl	800647c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff f8a5 	bl	8000c68 <main>
  bx  lr    
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b2c:	080076f4 	.word	0x080076f4
  ldr r2, =_sbss
 8001b30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b34:	20000748 	.word	0x20000748

08001b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <ADC_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_Init+0x40>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_Init+0x40>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_Init+0x40>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 fcad 	bl	80024c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f808 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff fc9c 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fcc5 	bl	800252e <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 fc8d 	bl	80024da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000010 	.word	0x20000010
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000010 	.word	0x20000010
 8001c04:	20000734 	.word	0x20000734

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000734 	.word	0x20000734

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000010 	.word	0x20000010

08001c68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e033      	b.n	8001ce6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe fce6 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cae:	f023 0302 	bic.w	r3, r3, #2
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa36 	bl	800212c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd6:	e001      	b.n	8001cdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Start_IT+0x1a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e0bd      	b.n	8001e86 <HAL_ADC_Start_IT+0x196>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d018      	beq.n	8001d52 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d30:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <HAL_ADC_Start_IT+0x1a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <HAL_ADC_Start_IT+0x1a8>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9a      	lsrs	r2, r3, #18
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	f040 8085 	bne.w	8001e6c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da0:	d106      	bne.n	8001db0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f023 0206 	bic.w	r2, r3, #6
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_ADC_Start_IT+0x1ac>)
 8001dc0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dda:	f043 0320 	orr.w	r3, r3, #32
 8001dde:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12a      	bne.n	8001e42 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <HAL_ADC_Start_IT+0x1b0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d015      	beq.n	8001e22 <HAL_ADC_Start_IT+0x132>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <HAL_ADC_Start_IT+0x1b4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_Start_IT+0x11c>
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_ADC_Start_IT+0x1ac>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_ADC_Start_IT+0x1b8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d136      	bne.n	8001e84 <HAL_ADC_Start_IT+0x194>
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_ADC_Start_IT+0x1ac>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d130      	bne.n	8001e84 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d129      	bne.n	8001e84 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e020      	b.n	8001e84 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_ADC_Start_IT+0x1b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d11b      	bne.n	8001e84 <HAL_ADC_Start_IT+0x194>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d114      	bne.n	8001e84 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e00b      	b.n	8001e84 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	40012300 	.word	0x40012300
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	40012100 	.word	0x40012100
 8001ea8:	40012200 	.word	0x40012200

08001eac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e113      	b.n	800210c <HAL_ADC_ConfigChannel+0x244>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d925      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	409a      	lsls	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	e022      	b.n	8001f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	2207      	movs	r2, #7
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6919      	ldr	r1, [r3, #16]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4403      	add	r3, r0
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d824      	bhi.n	8001fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b05      	subs	r3, #5
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd6:	e04c      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d824      	bhi.n	800202a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b23      	subs	r3, #35	; 0x23
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b23      	subs	r3, #35	; 0x23
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	e023      	b.n	8002072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	; 0x41
 800203c:	221f      	movs	r2, #31
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b41      	subs	r3, #65	; 0x41
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_ADC_ConfigChannel+0x250>)
 8002074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <HAL_ADC_ConfigChannel+0x254>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10f      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b12      	cmp	r3, #18
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_ADC_ConfigChannel+0x254>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12b      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x1f4>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b11      	cmp	r3, #17
 80020ba:	d122      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_ADC_ConfigChannel+0x258>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_ADC_ConfigChannel+0x25c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_ADC_ConfigChannel+0x260>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9a      	lsrs	r2, r3, #18
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	40012000 	.word	0x40012000
 8002120:	10000012 	.word	0x10000012
 8002124:	20000008 	.word	0x20000008
 8002128:	431bde83 	.word	0x431bde83

0800212c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002134:	4b79      	ldr	r3, [pc, #484]	; (800231c <ADC_Init+0x1f0>)
 8002136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4a58      	ldr	r2, [pc, #352]	; (8002320 <ADC_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e00f      	b.n	800222a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0202 	bic.w	r2, r2, #2
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	3b01      	subs	r3, #1
 8002284:	035a      	lsls	r2, r3, #13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	e007      	b.n	80022a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	051a      	lsls	r2, r3, #20
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022e2:	025a      	lsls	r2, r3, #9
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	029a      	lsls	r2, r3, #10
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40012300 	.word	0x40012300
 8002320:	0f000001 	.word	0x0f000001

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4907      	ldr	r1, [pc, #28]	; (80023c0 <__NVIC_EnableIRQ+0x38>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002490:	d301      	bcc.n	8002496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <SysTick_Config+0x40>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249e:	210f      	movs	r1, #15
 80024a0:	f04f 30ff 	mov.w	r0, #4294967295
 80024a4:	f7ff ff8e 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x40>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff29 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ec:	f7ff ff3e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff8e 	bl	8002418 <NVIC_EncodePriority>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff5d 	bl	80023c4 <__NVIC_SetPriority>
}
 800250a:	bf00      	nop
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff31 	bl	8002388 <__NVIC_EnableIRQ>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ffa2 	bl	8002480 <SysTick_Config>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e014      	b.n	8002582 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	791b      	ldrb	r3, [r3, #4]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe f8e3 	bl	8000734 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	795b      	ldrb	r3, [r3, #5]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_DAC_Start_DMA+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0ab      	b.n	8002706 <HAL_DAC_Start_DMA+0x17a>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2202      	movs	r2, #2
 80025b8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12f      	bne.n	8002620 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_DAC_Start_DMA+0x184>)
 80025c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_DAC_Start_DMA+0x188>)
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_DAC_Start_DMA+0x18c>)
 80025d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d013      	beq.n	8002616 <HAL_DAC_Start_DMA+0x8a>
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d845      	bhi.n	8002680 <HAL_DAC_Start_DMA+0xf4>
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_DAC_Start_DMA+0x76>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d005      	beq.n	800260c <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002600:	e03e      	b.n	8002680 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3308      	adds	r3, #8
 8002608:	613b      	str	r3, [r7, #16]
        break;
 800260a:	e03c      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	613b      	str	r3, [r7, #16]
        break;
 8002614:	e037      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3310      	adds	r3, #16
 800261c:	613b      	str	r3, [r7, #16]
        break;
 800261e:	e032      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a3d      	ldr	r2, [pc, #244]	; (800271c <HAL_DAC_Start_DMA+0x190>)
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a3c      	ldr	r2, [pc, #240]	; (8002720 <HAL_DAC_Start_DMA+0x194>)
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a3b      	ldr	r2, [pc, #236]	; (8002724 <HAL_DAC_Start_DMA+0x198>)
 8002636:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b08      	cmp	r3, #8
 800264c:	d013      	beq.n	8002676 <HAL_DAC_Start_DMA+0xea>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d817      	bhi.n	8002684 <HAL_DAC_Start_DMA+0xf8>
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_DAC_Start_DMA+0xd6>
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002660:	e010      	b.n	8002684 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3314      	adds	r3, #20
 8002668:	613b      	str	r3, [r7, #16]
        break;
 800266a:	e00c      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3318      	adds	r3, #24
 8002672:	613b      	str	r3, [r7, #16]
        break;
 8002674:	e007      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	331c      	adds	r3, #28
 800267c:	613b      	str	r3, [r7, #16]
        break;
 800267e:	e002      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002680:	bf00      	nop
 8002682:	e000      	b.n	8002686 <HAL_DAC_Start_DMA+0xfa>
        break;
 8002684:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6898      	ldr	r0, [r3, #8]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	f000 f9ff 	bl	8002aa8 <HAL_DMA_Start_IT>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]
 80026ae:	e010      	b.n	80026d2 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68d8      	ldr	r0, [r3, #12]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	f000 f9ed 	bl	8002aa8 <HAL_DMA_Start_IT>
 80026ce:	4603      	mov	r3, r0
 80026d0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e005      	b.n	8002704 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	08002839 	.word	0x08002839
 8002714:	0800285b 	.word	0x0800285b
 8002718:	08002877 	.word	0x08002877
 800271c:	080028e1 	.word	0x080028e1
 8002720:	08002903 	.word	0x08002903
 8002724:	0800291f 	.word	0x0800291f

08002728 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3308      	adds	r3, #8
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e004      	b.n	800275c <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3314      	adds	r3, #20
 800275a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800279a:	b480      	push	{r7}
 800279c:	b087      	sub	sp, #28
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	795b      	ldrb	r3, [r3, #5]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_DAC_ConfigChannel+0x18>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e03c      	b.n	800282c <HAL_DAC_ConfigChannel+0x92>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2202      	movs	r2, #2
 80027bc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	22c0      	movs	r2, #192	; 0xc0
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43da      	mvns	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	400a      	ands	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7fe fbfe 	bl	8001048 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	711a      	strb	r2, [r3, #4]
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff ff82 	bl	8002772 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff ff78 	bl	8002786 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	711a      	strb	r2, [r3, #4]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff ffd8 	bl	80028a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	711a      	strb	r2, [r3, #4]
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff ffd1 	bl	80028b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff ffc7 	bl	80028cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	711a      	strb	r2, [r3, #4]
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff f956 	bl	8001c08 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e099      	b.n	8002a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002988:	e00f      	b.n	80029aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298a:	f7ff f93d 	bl	8001c08 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b05      	cmp	r3, #5
 8002996:	d908      	bls.n	80029aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2203      	movs	r2, #3
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e078      	b.n	8002a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e8      	bne.n	800298a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_DMA_Init+0x158>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d107      	bne.n	8002a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d117      	bne.n	8002a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fb01 	bl	8003058 <DMA_CheckFifoParam>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e016      	b.n	8002a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fab8 	bl	8002fec <DMA_CalcBaseAndBitshift>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	223f      	movs	r2, #63	; 0x3f
 8002a86:	409a      	lsls	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	f010803f 	.word	0xf010803f

08002aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Start_IT+0x26>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e040      	b.n	8002b50 <HAL_DMA_Start_IT+0xa8>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d12f      	bne.n	8002b42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa4a 	bl	8002f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0216 	orr.w	r2, r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e005      	b.n	8002b4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b66:	f7ff f84f 	bl	8001c08 <HAL_GetTick>
 8002b6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e052      	b.n	8002c30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0216 	bic.w	r2, r2, #22
 8002b98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_DMA_Abort+0x62>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0208 	bic.w	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bda:	e013      	b.n	8002c04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bdc:	f7ff f814 	bl	8001c08 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	d90c      	bls.n	8002c04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e015      	b.n	8002c30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e4      	bne.n	8002bdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	223f      	movs	r2, #63	; 0x3f
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d004      	beq.n	8002c56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00c      	b.n	8002c70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c88:	4b8e      	ldr	r3, [pc, #568]	; (8002ec4 <HAL_DMA_IRQHandler+0x248>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a8e      	ldr	r2, [pc, #568]	; (8002ec8 <HAL_DMA_IRQHandler+0x24c>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0202 	orr.w	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2204      	movs	r2, #4
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d012      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2204      	movs	r2, #4
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2210      	movs	r2, #16
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d043      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03c      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2210      	movs	r2, #16
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	e01f      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e016      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0208 	bic.w	r2, r2, #8
 8002dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2220      	movs	r2, #32
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 808f 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8087 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2220      	movs	r2, #32
 8002e14:	409a      	lsls	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d136      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x1da>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	223f      	movs	r2, #63	; 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07e      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
        }
        return;
 8002e92:	e079      	b.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d031      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e02c      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e01e      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10f      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0210 	bic.w	r2, r2, #16
 8002efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2205      	movs	r2, #5
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d307      	bcc.n	8002f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f2      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x2cc>
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f88:	bf00      	nop
    }
  }
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d108      	bne.n	8002fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fce:	e007      	b.n	8002fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3b10      	subs	r3, #16
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <DMA_CalcBaseAndBitshift+0x64>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <DMA_CalcBaseAndBitshift+0x68>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d909      	bls.n	800302e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58
 800302c:	e007      	b.n	800303e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	aaaaaaab 	.word	0xaaaaaaab
 8003054:	08007684 	.word	0x08007684

08003058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d856      	bhi.n	8003126 <DMA_CheckFifoParam+0xce>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <DMA_CheckFifoParam+0x28>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	080030a3 	.word	0x080030a3
 8003088:	08003091 	.word	0x08003091
 800308c:	08003127 	.word	0x08003127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d046      	beq.n	800312a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e043      	b.n	800312a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030aa:	d140      	bne.n	800312e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e03d      	b.n	800312e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d121      	bne.n	8003100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d837      	bhi.n	8003132 <DMA_CheckFifoParam+0xda>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <DMA_CheckFifoParam+0x70>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030df 	.word	0x080030df
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	080030f1 	.word	0x080030f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e030      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d025      	beq.n	8003136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e022      	b.n	8003136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f8:	d11f      	bne.n	800313a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030fe:	e01c      	b.n	800313a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d903      	bls.n	800310e <DMA_CheckFifoParam+0xb6>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d003      	beq.n	8003114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800310c:	e018      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      break;
 8003112:	e015      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e00b      	b.n	800313e <DMA_CheckFifoParam+0xe6>
      break;
 8003126:	bf00      	nop
 8003128:	e00a      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e008      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e006      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e004      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;   
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
    }
  } 
  
  return status; 
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e165      	b.n	8003438 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	f040 8154 	bne.w	8003432 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d005      	beq.n	80031a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d130      	bne.n	8003204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0201 	and.w	r2, r3, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d017      	beq.n	8003240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d123      	bne.n	8003294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	08da      	lsrs	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3208      	adds	r2, #8
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	220f      	movs	r2, #15
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	69b9      	ldr	r1, [r7, #24]
 8003290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0203 	and.w	r2, r3, #3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80ae 	beq.w	8003432 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <HAL_GPIO_Init+0x300>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a5c      	ldr	r2, [pc, #368]	; (8003450 <HAL_GPIO_Init+0x300>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_GPIO_Init+0x300>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f2:	4a58      	ldr	r2, [pc, #352]	; (8003454 <HAL_GPIO_Init+0x304>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <HAL_GPIO_Init+0x308>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x21a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4e      	ldr	r2, [pc, #312]	; (800345c <HAL_GPIO_Init+0x30c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x216>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <HAL_GPIO_Init+0x310>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x212>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <HAL_GPIO_Init+0x314>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x20e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <HAL_GPIO_Init+0x318>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x20a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4a      	ldr	r2, [pc, #296]	; (800346c <HAL_GPIO_Init+0x31c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x206>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a49      	ldr	r2, [pc, #292]	; (8003470 <HAL_GPIO_Init+0x320>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x202>
 800334e:	2306      	movs	r3, #6
 8003350:	e00c      	b.n	800336c <HAL_GPIO_Init+0x21c>
 8003352:	2307      	movs	r3, #7
 8003354:	e00a      	b.n	800336c <HAL_GPIO_Init+0x21c>
 8003356:	2305      	movs	r3, #5
 8003358:	e008      	b.n	800336c <HAL_GPIO_Init+0x21c>
 800335a:	2304      	movs	r3, #4
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x21c>
 800335e:	2303      	movs	r3, #3
 8003360:	e004      	b.n	800336c <HAL_GPIO_Init+0x21c>
 8003362:	2302      	movs	r3, #2
 8003364:	e002      	b.n	800336c <HAL_GPIO_Init+0x21c>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_GPIO_Init+0x21c>
 800336a:	2300      	movs	r3, #0
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	f002 0203 	and.w	r2, r2, #3
 8003372:	0092      	lsls	r2, r2, #2
 8003374:	4093      	lsls	r3, r2
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337c:	4935      	ldr	r1, [pc, #212]	; (8003454 <HAL_GPIO_Init+0x304>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800338a:	4b3a      	ldr	r3, [pc, #232]	; (8003474 <HAL_GPIO_Init+0x324>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ae:	4a31      	ldr	r2, [pc, #196]	; (8003474 <HAL_GPIO_Init+0x324>)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b4:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_GPIO_Init+0x324>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d8:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_GPIO_Init+0x324>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_GPIO_Init+0x324>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_GPIO_Init+0x324>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_GPIO_Init+0x324>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800342c:	4a11      	ldr	r2, [pc, #68]	; (8003474 <HAL_GPIO_Init+0x324>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	f67f ae96 	bls.w	800316c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40013800 	.word	0x40013800
 8003458:	40020000 	.word	0x40020000
 800345c:	40020400 	.word	0x40020400
 8003460:	40020800 	.word	0x40020800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40021400 	.word	0x40021400
 8003470:	40021800 	.word	0x40021800
 8003474:	40013c00 	.word	0x40013c00

08003478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e001      	b.n	800349a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	041a      	lsls	r2, r3, #16
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	400b      	ands	r3, r1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fd32 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40013c00 	.word	0x40013c00

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e12b      	b.n	80037aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd fb36 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f000 fd6a 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_I2C_Init+0x274>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_I2C_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a7d      	ldr	r2, [pc, #500]	; (80037bc <HAL_I2C_Init+0x27c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e7      	b.n	80037aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a78      	ldr	r2, [pc, #480]	; (80037c0 <HAL_I2C_Init+0x280>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a6a      	ldr	r2, [pc, #424]	; (80037b4 <HAL_I2C_Init+0x274>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a69      	ldr	r2, [pc, #420]	; (80037c4 <HAL_I2C_Init+0x284>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	495c      	ldr	r1, [pc, #368]	; (80037b4 <HAL_I2C_Init+0x274>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x13c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x138>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e051      	b.n	800371c <HAL_I2C_Init+0x1dc>
 8003678:	2304      	movs	r3, #4
 800367a:	e04f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x168>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x18e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x196>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_I2C_Init+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e58      	subs	r0, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6911      	ldr	r1, [r2, #16]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	000186a0 	.word	0x000186a0
 80037b8:	001e847f 	.word	0x001e847f
 80037bc:	003d08ff 	.word	0x003d08ff
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e2:	f7fe fa11 	bl	8001c08 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 80d9 	bne.w	80039a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2319      	movs	r3, #25
 80037fc:	2201      	movs	r2, #1
 80037fe:	496d      	ldr	r1, [pc, #436]	; (80039b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f971 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	e0cc      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_I2C_Mem_Write+0x56>
 800381a:	2302      	movs	r3, #2
 800381c:	e0c5      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d007      	beq.n	8003844 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a4d      	ldr	r2, [pc, #308]	; (80039b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	88f8      	ldrh	r0, [r7, #6]
 8003888:	893a      	ldrh	r2, [r7, #8]
 800388a:	8979      	ldrh	r1, [r7, #10]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	4603      	mov	r3, r0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f890 	bl	80039bc <I2C_RequestMemoryWrite>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d052      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e081      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f9f2 	bl	8003c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d107      	bne.n	80038ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d11b      	bne.n	8003948 <HAL_I2C_Mem_Write+0x180>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1aa      	bne.n	80038a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f9de 	bl	8003d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000

080039bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f878 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d103      	bne.n	8003a16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e05f      	b.n	8003ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a1a:	897b      	ldrh	r3, [r7, #10]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	492d      	ldr	r1, [pc, #180]	; (8003ae4 <I2C_RequestMemoryWrite+0x128>)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f8b0 	bl	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e04c      	b.n	8003ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f91a 	bl	8003c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e02b      	b.n	8003ada <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a88:	893b      	ldrh	r3, [r7, #8]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]
 8003a92:	e021      	b.n	8003ad8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a94:	893b      	ldrh	r3, [r7, #8]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa4:	6a39      	ldr	r1, [r7, #32]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f8f4 	bl	8003c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d107      	bne.n	8003aca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e005      	b.n	8003ada <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ace:	893b      	ldrh	r3, [r7, #8]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	00010002 	.word	0x00010002

08003ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af8:	e025      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d021      	beq.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe f881 	bl	8001c08 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e023      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10d      	bne.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	461a      	mov	r2, r3
 8003b6a:	e00c      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	43da      	mvns	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d0b6      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba4:	e051      	b.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d123      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e046      	b.n	8003c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d021      	beq.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd ffff 	bl	8001c08 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f043 0220 	orr.w	r2, r3, #32
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e020      	b.n	8003c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10c      	bne.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e00b      	b.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	43da      	mvns	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d18d      	bne.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca0:	e02d      	b.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f878 	bl	8003d98 <I2C_IsAcknowledgeFailed>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e02d      	b.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d021      	beq.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fd ffa5 	bl	8001c08 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d116      	bne.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e007      	b.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d1ca      	bne.n	8003ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d22:	e02d      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f837 	bl	8003d98 <I2C_IsAcknowledgeFailed>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e02d      	b.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d021      	beq.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3c:	f7fd ff64 	bl	8001c08 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e007      	b.n	8003d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d1ca      	bne.n	8003d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	d11b      	bne.n	8003de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_PWREx_EnableOverDrive+0x94>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e24:	f7fd fef0 	bl	8001c08 <HAL_GetTick>
 8003e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e2a:	e009      	b.n	8003e40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e2c:	f7fd feec 	bl	8001c08 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e3a:	d901      	bls.n	8003e40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e01f      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7fd fed8 	bl	8001c08 <HAL_GetTick>
 8003e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e5a:	e009      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e5c:	f7fd fed4 	bl	8001c08 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6a:	d901      	bls.n	8003e70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e007      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7c:	d1ee      	bne.n	8003e5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	420e0040 	.word	0x420e0040
 8003e90:	40007000 	.word	0x40007000
 8003e94:	420e0044 	.word	0x420e0044

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0cc      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b68      	ldr	r3, [pc, #416]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d90c      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a52      	ldr	r2, [pc, #328]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d044      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d119      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e067      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fd fe3e 	bl	8001c08 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fd fe3a 	bl	8001c08 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e04f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d20c      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f855 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	; (8004058 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fd9e 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00
 8004054:	40023800 	.word	0x40023800
 8004058:	0800766c 	.word	0x0800766c
 800405c:	20000008 	.word	0x20000008
 8004060:	2000000c 	.word	0x2000000c

08004064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_GetHCLKFreq+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000008 	.word	0x20000008

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004080:	f7ff fff0 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0a9b      	lsrs	r3, r3, #10
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	0800767c 	.word	0x0800767c

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040a8:	f7ff ffdc 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0b5b      	lsrs	r3, r3, #13
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	0800767c 	.word	0x0800767c

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b0ae      	sub	sp, #184	; 0xb8
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f2:	4bcb      	ldr	r3, [pc, #812]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	f200 8206 	bhi.w	800450c <HAL_RCC_GetSysClockFreq+0x440>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800450d 	.word	0x0800450d
 8004110:	0800450d 	.word	0x0800450d
 8004114:	0800450d 	.word	0x0800450d
 8004118:	08004145 	.word	0x08004145
 800411c:	0800450d 	.word	0x0800450d
 8004120:	0800450d 	.word	0x0800450d
 8004124:	0800450d 	.word	0x0800450d
 8004128:	0800414d 	.word	0x0800414d
 800412c:	0800450d 	.word	0x0800450d
 8004130:	0800450d 	.word	0x0800450d
 8004134:	0800450d 	.word	0x0800450d
 8004138:	0800433d 	.word	0x0800433d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4bb9      	ldr	r3, [pc, #740]	; (8004424 <HAL_RCC_GetSysClockFreq+0x358>)
 800413e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004142:	e1e7      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004144:	4bb8      	ldr	r3, [pc, #736]	; (8004428 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800414a:	e1e3      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800414c:	4bb4      	ldr	r3, [pc, #720]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004158:	4bb1      	ldr	r3, [pc, #708]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d071      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004164:	4bae      	ldr	r3, [pc, #696]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004170:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004186:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	1a51      	subs	r1, r2, r1
 80041a6:	6439      	str	r1, [r7, #64]	; 0x40
 80041a8:	4629      	mov	r1, r5
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80041bc:	4649      	mov	r1, r9
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c6:	4641      	mov	r1, r8
 80041c8:	018a      	lsls	r2, r1, #6
 80041ca:	4641      	mov	r1, r8
 80041cc:	1a51      	subs	r1, r2, r1
 80041ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80041d0:	4649      	mov	r1, r9
 80041d2:	eb63 0301 	sbc.w	r3, r3, r1
 80041d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041e4:	4649      	mov	r1, r9
 80041e6:	00cb      	lsls	r3, r1, #3
 80041e8:	4641      	mov	r1, r8
 80041ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ee:	4641      	mov	r1, r8
 80041f0:	00ca      	lsls	r2, r1, #3
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	4622      	mov	r2, r4
 80041fa:	189b      	adds	r3, r3, r2
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	462b      	mov	r3, r5
 8004200:	460a      	mov	r2, r1
 8004202:	eb42 0303 	adc.w	r3, r2, r3
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004214:	4629      	mov	r1, r5
 8004216:	024b      	lsls	r3, r1, #9
 8004218:	4621      	mov	r1, r4
 800421a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800421e:	4621      	mov	r1, r4
 8004220:	024a      	lsls	r2, r1, #9
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004234:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004238:	f7fc f83a 	bl	80002b0 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004246:	e067      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004248:	4b75      	ldr	r3, [pc, #468]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004254:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004260:	67bb      	str	r3, [r7, #120]	; 0x78
 8004262:	2300      	movs	r3, #0
 8004264:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004266:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	f04f 0000 	mov.w	r0, #0
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	0159      	lsls	r1, r3, #5
 8004278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427c:	0150      	lsls	r0, r2, #5
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4621      	mov	r1, r4
 8004284:	1a51      	subs	r1, r2, r1
 8004286:	62b9      	str	r1, [r7, #40]	; 0x28
 8004288:	4629      	mov	r1, r5
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800429c:	4649      	mov	r1, r9
 800429e:	018b      	lsls	r3, r1, #6
 80042a0:	4641      	mov	r1, r8
 80042a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a6:	4641      	mov	r1, r8
 80042a8:	018a      	lsls	r2, r1, #6
 80042aa:	4641      	mov	r1, r8
 80042ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80042b0:	4649      	mov	r1, r9
 80042b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ca:	4692      	mov	sl, r2
 80042cc:	469b      	mov	fp, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	eb1a 0303 	adds.w	r3, sl, r3
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	462b      	mov	r3, r5
 80042d8:	eb4b 0303 	adc.w	r3, fp, r3
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042ea:	4629      	mov	r1, r5
 80042ec:	028b      	lsls	r3, r1, #10
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f4:	4621      	mov	r1, r4
 80042f6:	028a      	lsls	r2, r1, #10
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004300:	2200      	movs	r2, #0
 8004302:	673b      	str	r3, [r7, #112]	; 0x70
 8004304:	677a      	str	r2, [r7, #116]	; 0x74
 8004306:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800430a:	f7fb ffd1 	bl	80002b0 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4613      	mov	r3, r2
 8004314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004318:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800432a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800432e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800433a:	e0eb      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004348:	4b35      	ldr	r3, [pc, #212]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d06b      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_RCC_GetSysClockFreq+0x354>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	099b      	lsrs	r3, r3, #6
 800435a:	2200      	movs	r2, #0
 800435c:	66bb      	str	r3, [r7, #104]	; 0x68
 800435e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	663b      	str	r3, [r7, #96]	; 0x60
 8004368:	2300      	movs	r3, #0
 800436a:	667b      	str	r3, [r7, #100]	; 0x64
 800436c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004370:	4622      	mov	r2, r4
 8004372:	462b      	mov	r3, r5
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004382:	0150      	lsls	r0, r2, #5
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4621      	mov	r1, r4
 800438a:	1a51      	subs	r1, r2, r1
 800438c:	61b9      	str	r1, [r7, #24]
 800438e:	4629      	mov	r1, r5
 8004390:	eb63 0301 	sbc.w	r3, r3, r1
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043a2:	4659      	mov	r1, fp
 80043a4:	018b      	lsls	r3, r1, #6
 80043a6:	4651      	mov	r1, sl
 80043a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ac:	4651      	mov	r1, sl
 80043ae:	018a      	lsls	r2, r1, #6
 80043b0:	4651      	mov	r1, sl
 80043b2:	ebb2 0801 	subs.w	r8, r2, r1
 80043b6:	4659      	mov	r1, fp
 80043b8:	eb63 0901 	sbc.w	r9, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d0:	4690      	mov	r8, r2
 80043d2:	4699      	mov	r9, r3
 80043d4:	4623      	mov	r3, r4
 80043d6:	eb18 0303 	adds.w	r3, r8, r3
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	462b      	mov	r3, r5
 80043de:	eb49 0303 	adc.w	r3, r9, r3
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043f0:	4629      	mov	r1, r5
 80043f2:	024b      	lsls	r3, r1, #9
 80043f4:	4621      	mov	r1, r4
 80043f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043fa:	4621      	mov	r1, r4
 80043fc:	024a      	lsls	r2, r1, #9
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004406:	2200      	movs	r2, #0
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
 800440a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800440c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004410:	f7fb ff4e 	bl	80002b0 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800441e:	e065      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x420>
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442c:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_GetSysClockFreq+0x458>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	2200      	movs	r2, #0
 8004434:	4618      	mov	r0, r3
 8004436:	4611      	mov	r1, r2
 8004438:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800443c:	653b      	str	r3, [r7, #80]	; 0x50
 800443e:	2300      	movs	r3, #0
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
 8004442:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004446:	4642      	mov	r2, r8
 8004448:	464b      	mov	r3, r9
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4641      	mov	r1, r8
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	4649      	mov	r1, r9
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004478:	4659      	mov	r1, fp
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4651      	mov	r1, sl
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4651      	mov	r1, sl
 8004488:	1a54      	subs	r4, r2, r1
 800448a:	4659      	mov	r1, fp
 800448c:	eb63 0501 	sbc.w	r5, r3, r1
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d4:	2200      	movs	r2, #0
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044de:	f7fb fee7 	bl	80002b0 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4613      	mov	r3, r2
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0f1b      	lsrs	r3, r3, #28
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800450a:	e003      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_GetSysClockFreq+0x45c>)
 800450e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004518:	4618      	mov	r0, r3
 800451a:	37b8      	adds	r7, #184	; 0xb8
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	00f42400 	.word	0x00f42400

0800452c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e28d      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8083 	beq.w	8004652 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800454c:	4b94      	ldr	r3, [pc, #592]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b04      	cmp	r3, #4
 8004556:	d019      	beq.n	800458c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004558:	4b91      	ldr	r3, [pc, #580]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004560:	2b08      	cmp	r3, #8
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004564:	4b8e      	ldr	r3, [pc, #568]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4b8b      	ldr	r3, [pc, #556]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x124>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e25a      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x90>
 80045ae:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7b      	ldr	r2, [pc, #492]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xcc>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0xb4>
 80045c6:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a75      	ldr	r2, [pc, #468]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a72      	ldr	r2, [pc, #456]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xcc>
 80045e0:	4b6f      	ldr	r3, [pc, #444]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6e      	ldr	r2, [pc, #440]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b6c      	ldr	r3, [pc, #432]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6b      	ldr	r2, [pc, #428]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd fb02 	bl	8001c08 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd fafe 	bl	8001c08 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e21f      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xdc>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd faee 	bl	8001c08 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd faea 	bl	8001c08 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e20b      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b57      	ldr	r3, [pc, #348]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x104>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d06f      	beq.n	800473e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d017      	beq.n	800469a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004672:	2b08      	cmp	r3, #8
 8004674:	d105      	bne.n	8004682 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d11c      	bne.n	80046c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d116      	bne.n	80046c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_RCC_OscConfig+0x186>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1d3      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4937      	ldr	r1, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	e03a      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x278>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fa97 	bl	8001c08 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fd fa93 	bl	8001c08 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1b4      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fc:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x278>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fa76 	bl	8001c08 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd fa72 	bl	8001c08 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e193      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d036      	beq.n	80047b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x27c>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fa56 	bl	8001c08 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004760:	f7fd fa52 	bl	8001c08 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e173      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x234>
 800477e:	e01b      	b.n	80047b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_RCC_OscConfig+0x27c>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fd fa3f 	bl	8001c08 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800478c:	e00e      	b.n	80047ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478e:	f7fd fa3b 	bl	8001c08 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d907      	bls.n	80047ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e15c      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
 80047a0:	40023800 	.word	0x40023800
 80047a4:	42470000 	.word	0x42470000
 80047a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b8a      	ldr	r3, [pc, #552]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ea      	bne.n	800478e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8097 	beq.w	80048f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b83      	ldr	r3, [pc, #524]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a7e      	ldr	r2, [pc, #504]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b7c      	ldr	r3, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b79      	ldr	r3, [pc, #484]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b76      	ldr	r3, [pc, #472]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a75      	ldr	r2, [pc, #468]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd f9fb 	bl	8001c08 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd f9f7 	bl	8001c08 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e118      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCC_OscConfig+0x4b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d106      	bne.n	800484a <HAL_RCC_OscConfig+0x31e>
 800483c:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a65      	ldr	r2, [pc, #404]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x358>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x340>
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a60      	ldr	r2, [pc, #384]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	4b5e      	ldr	r3, [pc, #376]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5d      	ldr	r2, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x358>
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	4a59      	ldr	r2, [pc, #356]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	; 0x70
 8004878:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a56      	ldr	r2, [pc, #344]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd f9bc 	bl	8001c08 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fd f9b8 	bl	8001c08 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0d7      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048aa:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x368>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd f9a6 	bl	8001c08 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fd f9a2 	bl	8001c08 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0c1      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80ad 	beq.w	8004a58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b08      	cmp	r3, #8
 8004908:	d060      	beq.n	80049cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d145      	bne.n	800499e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd f976 	bl	8001c08 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd f972 	bl	8001c08 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e093      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69da      	ldr	r2, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	071b      	lsls	r3, r3, #28
 800496a:	491b      	ldr	r1, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	4313      	orrs	r3, r2
 800496e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fd f947 	bl	8001c08 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497e:	f7fd f943 	bl	8001c08 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e064      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x452>
 800499c:	e05c      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <HAL_RCC_OscConfig+0x4b4>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f930 	bl	8001c08 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f92c 	bl	8001c08 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04d      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_OscConfig+0x4ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x480>
 80049ca:	e045      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e040      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40007000 	.word	0x40007000
 80049e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <HAL_RCC_OscConfig+0x538>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d030      	beq.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d129      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d122      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a14:	4013      	ands	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d119      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d10f      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e041      	b.n	8004afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc ff0e 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f000 fc04 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d001      	beq.n	8004b20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e046      	b.n	8004bae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_TIM_Base_Start+0xb4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_TIM_Base_Start+0xb8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <HAL_TIM_Base_Start+0xbc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIM_Base_Start+0xc0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_TIM_Base_Start+0xc4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <HAL_TIM_Base_Start+0xc8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_TIM_Base_Start+0x70>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_TIM_Base_Start+0xcc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d010      	beq.n	8004bac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	e007      	b.n	8004bac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <HAL_TIM_Base_Stop+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a1a      	ldr	r2, [r3, #32]
 8004bf6:	f240 4344 	movw	r3, #1092	; 0x444
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_TIM_Base_Stop+0x38>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d001      	beq.n	8004c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e04e      	b.n	8004cde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	; (8004cec <HAL_TIM_Base_Start_IT+0xc4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d022      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40010400 	.word	0x40010400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40001800 	.word	0x40001800

08004d08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a1a      	ldr	r2, [r3, #32]
 8004d26:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <HAL_TIM_Base_Stop_IT+0x48>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	f240 4344 	movw	r3, #1092	; 0x444
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_TIM_Base_Stop_IT+0x48>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e097      	b.n	8004eaa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc fde8 	bl	8001964 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fa7a 	bl	80052b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de8:	f023 0303 	bic.w	r3, r3, #3
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e06:	f023 030c 	bic.w	r3, r3, #12
 8004e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	4313      	orrs	r3, r2
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	011a      	lsls	r2, r3, #4
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	031b      	lsls	r3, r3, #12
 8004e36:	4313      	orrs	r3, r2
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004e4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d122      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d11b      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0202 	mvn.w	r2, #2
 8004ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9bf 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004efa:	e005      	b.n	8004f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9b1 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f9c2 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d122      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d11b      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 0204 	mvn.w	r2, #4
 8004f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f995 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004f4e:	e005      	b.n	8004f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f987 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f998 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d122      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d11b      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0208 	mvn.w	r2, #8
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f96b 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004fa2:	e005      	b.n	8004fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f95d 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f96e 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d122      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d11b      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0210 	mvn.w	r2, #16
 8004fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f941 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004ff6:	e005      	b.n	8005004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f933 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f944 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10e      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f06f 0201 	mvn.w	r2, #1
 800502e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f90d 	bl	8005250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d10e      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d107      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fae9 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d10e      	bne.n	800508e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d107      	bne.n	800508e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f909 	bl	80052a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b20      	cmp	r3, #32
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f06f 0220 	mvn.w	r2, #32
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fab3 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_TIM_ConfigClockSource+0x1c>
 80050da:	2302      	movs	r3, #2
 80050dc:	e0b4      	b.n	8005248 <HAL_TIM_ConfigClockSource+0x186>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005104:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005116:	d03e      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xd4>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	f200 8087 	bhi.w	800522e <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	f000 8086 	beq.w	8005234 <HAL_TIM_ConfigClockSource+0x172>
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d87f      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 800512e:	2b70      	cmp	r3, #112	; 0x70
 8005130:	d01a      	beq.n	8005168 <HAL_TIM_ConfigClockSource+0xa6>
 8005132:	2b70      	cmp	r3, #112	; 0x70
 8005134:	d87b      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 8005136:	2b60      	cmp	r3, #96	; 0x60
 8005138:	d050      	beq.n	80051dc <HAL_TIM_ConfigClockSource+0x11a>
 800513a:	2b60      	cmp	r3, #96	; 0x60
 800513c:	d877      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 800513e:	2b50      	cmp	r3, #80	; 0x50
 8005140:	d03c      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0xfa>
 8005142:	2b50      	cmp	r3, #80	; 0x50
 8005144:	d873      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d058      	beq.n	80051fc <HAL_TIM_ConfigClockSource+0x13a>
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d86f      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d064      	beq.n	800521c <HAL_TIM_ConfigClockSource+0x15a>
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d86b      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 8005156:	2b20      	cmp	r3, #32
 8005158:	d060      	beq.n	800521c <HAL_TIM_ConfigClockSource+0x15a>
 800515a:	2b20      	cmp	r3, #32
 800515c:	d867      	bhi.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d05c      	beq.n	800521c <HAL_TIM_ConfigClockSource+0x15a>
 8005162:	2b10      	cmp	r3, #16
 8005164:	d05a      	beq.n	800521c <HAL_TIM_ConfigClockSource+0x15a>
 8005166:	e062      	b.n	800522e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6899      	ldr	r1, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f000 f9b6 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800518a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]
      break;
 8005194:	e04f      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f000 f99f 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b8:	609a      	str	r2, [r3, #8]
      break;
 80051ba:	e03c      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	461a      	mov	r2, r3
 80051ca:	f000 f913 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2150      	movs	r1, #80	; 0x50
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f96c 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80051da:	e02c      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f000 f932 	bl	8005452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2160      	movs	r1, #96	; 0x60
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f95c 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e01c      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	461a      	mov	r2, r3
 800520a:	f000 f8f3 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2140      	movs	r1, #64	; 0x40
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f94c 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 800521a:	e00c      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 f943 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 800522c:	e003      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      break;
 8005232:	e000      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005246:	7bfb      	ldrb	r3, [r7, #15]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a40      	ldr	r2, [pc, #256]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3d      	ldr	r2, [pc, #244]	; (80053cc <TIM_Base_SetConfig+0x118>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d027      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <TIM_Base_SetConfig+0x118>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d023      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a29      	ldr	r2, [pc, #164]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d017      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a28      	ldr	r2, [pc, #160]	; (80053dc <TIM_Base_SetConfig+0x128>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <TIM_Base_SetConfig+0x12c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <TIM_Base_SetConfig+0x130>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <TIM_Base_SetConfig+0x134>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <TIM_Base_SetConfig+0x138>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_Base_SetConfig+0x13c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d108      	bne.n	8005378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0xf8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40001800 	.word	0x40001800
 80053ec:	40001c00 	.word	0x40001c00
 80053f0:	40002000 	.word	0x40002000

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0210 	bic.w	r2, r3, #16
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e05a      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d01d      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e03f      	b.n	80056da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc f9ea 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800568a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fc7b 	bl	8005f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0ba      	sub	sp, #232	; 0xe8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_UART_IRQHandler+0x66>
 8005736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb65 	bl	8005e12 <UART_Receive_IT>
      return;
 8005748:	e256      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800574a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80de 	beq.w	8005910 <HAL_UART_IRQHandler+0x22c>
 8005754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d106      	bne.n	800576e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80d1 	beq.w	8005910 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_UART_IRQHandler+0xae>
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_UART_IRQHandler+0xd2>
 800579e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f043 0202 	orr.w	r2, r3, #2
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_UART_IRQHandler+0xf6>
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0204 	orr.w	r2, r3, #4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d011      	beq.n	800580a <HAL_UART_IRQHandler+0x126>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0208 	orr.w	r2, r3, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 81ed 	beq.w	8005bee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_UART_IRQHandler+0x14e>
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 faf0 	bl	8005e12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <HAL_UART_IRQHandler+0x17a>
 8005856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d04f      	beq.n	80058fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9f8 	bl	8005c54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d141      	bne.n	80058f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800588c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800589e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1d9      	bne.n	8005872 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d013      	beq.n	80058ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	4a7d      	ldr	r2, [pc, #500]	; (8005ac0 <HAL_UART_IRQHandler+0x3dc>)
 80058cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fd f9b0 	bl	8002c38 <HAL_DMA_Abort_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	e00e      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f99a 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	e00a      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f996 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	e006      	b.n	800590c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f992 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800590a:	e170      	b.n	8005bee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	bf00      	nop
    return;
 800590e:	e16e      	b.n	8005bee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 814a 	bne.w	8005bae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8143 	beq.w	8005bae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 813c 	beq.w	8005bae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005936:	2300      	movs	r3, #0
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	f040 80b4 	bne.w	8005ac4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8140 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800597a:	429a      	cmp	r2, r3
 800597c:	f080 8139 	bcs.w	8005bf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005986:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	f000 8088 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1d9      	bne.n	8005996 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e1      	bne.n	80059e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e3      	bne.n	8005a1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a76:	f023 0310 	bic.w	r3, r3, #16
 8005a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e3      	bne.n	8005a64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fd f859 	bl	8002b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8c0 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005abc:	e099      	b.n	8005bf2 <HAL_UART_IRQHandler+0x50e>
 8005abe:	bf00      	nop
 8005ac0:	08005d1b 	.word	0x08005d1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 808b 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8086 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e3      	bne.n	8005aea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	623b      	str	r3, [r7, #32]
   return(result);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b46:	633a      	str	r2, [r7, #48]	; 0x30
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e3      	bne.n	8005b22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b8c:	61fa      	str	r2, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	617b      	str	r3, [r7, #20]
   return(result);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f848 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bac:	e023      	b.n	8005bf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_UART_IRQHandler+0x4ea>
 8005bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8bb 	bl	8005d42 <UART_Transmit_IT>
    return;
 8005bcc:	e014      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x514>
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8fb 	bl	8005de2 <UART_EndTransmit_IT>
    return;
 8005bec:	e004      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
    return;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_IRQHandler+0x514>
      return;
 8005bf6:	bf00      	nop
  }
}
 8005bf8:	37e8      	adds	r7, #232	; 0xe8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b095      	sub	sp, #84	; 0x54
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3314      	adds	r3, #20
 8005c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3314      	adds	r3, #20
 8005cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d119      	bne.n	8005d00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cec:	61ba      	str	r2, [r7, #24]
 8005cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6979      	ldr	r1, [r7, #20]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e5      	bne.n	8005ccc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d0e:	bf00      	nop
 8005d10:	3754      	adds	r7, #84	; 0x54
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ff77 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b21      	cmp	r3, #33	; 0x21
 8005d54:	d13e      	bne.n	8005dd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d114      	bne.n	8005d8a <UART_Transmit_IT+0x48>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d110      	bne.n	8005d8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]
 8005d88:	e008      	b.n	8005d9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6211      	str	r1, [r2, #32]
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4619      	mov	r1, r3
 8005daa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fefc 	bl	8005c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b08c      	sub	sp, #48	; 0x30
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b22      	cmp	r3, #34	; 0x22
 8005e24:	f040 80ab 	bne.w	8005f7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e30:	d117      	bne.n	8005e62 <UART_Receive_IT+0x50>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d113      	bne.n	8005e62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e60:	e026      	b.n	8005eb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e74:	d007      	beq.n	8005e86 <UART_Receive_IT+0x74>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <UART_Receive_IT+0x82>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	e008      	b.n	8005ea6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d15a      	bne.n	8005f7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0220 	bic.w	r2, r2, #32
 8005ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d135      	bne.n	8005f70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f023 0310 	bic.w	r3, r3, #16
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	623a      	str	r2, [r7, #32]
 8005f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e5      	bne.n	8005f0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b10      	cmp	r3, #16
 8005f4a:	d10a      	bne.n	8005f62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe67 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8005f6e:	e002      	b.n	8005f76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe4f 	bl	8005c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e002      	b.n	8005f80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e000      	b.n	8005f80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f7e:	2302      	movs	r3, #2
  }
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3730      	adds	r7, #48	; 0x30
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f8c:	b0c0      	sub	sp, #256	; 0x100
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	ea40 0301 	orr.w	r3, r0, r1
 8005fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fe0:	f021 010c 	bic.w	r1, r1, #12
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006002:	6999      	ldr	r1, [r3, #24]
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	ea40 0301 	orr.w	r3, r0, r1
 800600e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b8f      	ldr	r3, [pc, #572]	; (8006254 <UART_SetConfig+0x2cc>)
 8006018:	429a      	cmp	r2, r3
 800601a:	d005      	beq.n	8006028 <UART_SetConfig+0xa0>
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b8d      	ldr	r3, [pc, #564]	; (8006258 <UART_SetConfig+0x2d0>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d104      	bne.n	8006032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7fe f83c 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 800602c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006030:	e003      	b.n	800603a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006032:	f7fe f823 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8006036:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006044:	f040 810c 	bne.w	8006260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604c:	2200      	movs	r2, #0
 800604e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006052:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	1891      	adds	r1, r2, r2
 8006060:	65b9      	str	r1, [r7, #88]	; 0x58
 8006062:	415b      	adcs	r3, r3
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800606a:	4621      	mov	r1, r4
 800606c:	eb12 0801 	adds.w	r8, r2, r1
 8006070:	4629      	mov	r1, r5
 8006072:	eb43 0901 	adc.w	r9, r3, r1
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608a:	4690      	mov	r8, r2
 800608c:	4699      	mov	r9, r3
 800608e:	4623      	mov	r3, r4
 8006090:	eb18 0303 	adds.w	r3, r8, r3
 8006094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006098:	462b      	mov	r3, r5
 800609a:	eb49 0303 	adc.w	r3, r9, r3
 800609e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060b6:	460b      	mov	r3, r1
 80060b8:	18db      	adds	r3, r3, r3
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
 80060bc:	4613      	mov	r3, r2
 80060be:	eb42 0303 	adc.w	r3, r2, r3
 80060c2:	657b      	str	r3, [r7, #84]	; 0x54
 80060c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060cc:	f7fa f8f0 	bl	80002b0 <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4b61      	ldr	r3, [pc, #388]	; (800625c <UART_SetConfig+0x2d4>)
 80060d6:	fba3 2302 	umull	r2, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	011c      	lsls	r4, r3, #4
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	1891      	adds	r1, r2, r2
 80060f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060f8:	415b      	adcs	r3, r3
 80060fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006100:	4641      	mov	r1, r8
 8006102:	eb12 0a01 	adds.w	sl, r2, r1
 8006106:	4649      	mov	r1, r9
 8006108:	eb43 0b01 	adc.w	fp, r3, r1
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800611c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006120:	4692      	mov	sl, r2
 8006122:	469b      	mov	fp, r3
 8006124:	4643      	mov	r3, r8
 8006126:	eb1a 0303 	adds.w	r3, sl, r3
 800612a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800612e:	464b      	mov	r3, r9
 8006130:	eb4b 0303 	adc.w	r3, fp, r3
 8006134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006144:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	643b      	str	r3, [r7, #64]	; 0x40
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006162:	f7fa f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4611      	mov	r1, r2
 800616c:	4b3b      	ldr	r3, [pc, #236]	; (800625c <UART_SetConfig+0x2d4>)
 800616e:	fba3 2301 	umull	r2, r3, r3, r1
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	2264      	movs	r2, #100	; 0x64
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	1acb      	subs	r3, r1, r3
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006182:	4b36      	ldr	r3, [pc, #216]	; (800625c <UART_SetConfig+0x2d4>)
 8006184:	fba3 2302 	umull	r2, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006190:	441c      	add	r4, r3
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800619c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80061ac:	415b      	adcs	r3, r3
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b4:	4641      	mov	r1, r8
 80061b6:	1851      	adds	r1, r2, r1
 80061b8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ba:	4649      	mov	r1, r9
 80061bc:	414b      	adcs	r3, r1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061cc:	4659      	mov	r1, fp
 80061ce:	00cb      	lsls	r3, r1, #3
 80061d0:	4651      	mov	r1, sl
 80061d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061d6:	4651      	mov	r1, sl
 80061d8:	00ca      	lsls	r2, r1, #3
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	4642      	mov	r2, r8
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061e8:	464b      	mov	r3, r9
 80061ea:	460a      	mov	r2, r1
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006200:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006208:	460b      	mov	r3, r1
 800620a:	18db      	adds	r3, r3, r3
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	4613      	mov	r3, r2
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800621e:	f7fa f847 	bl	80002b0 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <UART_SetConfig+0x2d4>)
 8006228:	fba3 1302 	umull	r1, r3, r3, r2
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	2164      	movs	r1, #100	; 0x64
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	3332      	adds	r3, #50	; 0x32
 800623a:	4a08      	ldr	r2, [pc, #32]	; (800625c <UART_SetConfig+0x2d4>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	f003 0207 	and.w	r2, r3, #7
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4422      	add	r2, r4
 800624e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006250:	e105      	b.n	800645e <UART_SetConfig+0x4d6>
 8006252:	bf00      	nop
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800626e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006272:	4642      	mov	r2, r8
 8006274:	464b      	mov	r3, r9
 8006276:	1891      	adds	r1, r2, r2
 8006278:	6239      	str	r1, [r7, #32]
 800627a:	415b      	adcs	r3, r3
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006282:	4641      	mov	r1, r8
 8006284:	1854      	adds	r4, r2, r1
 8006286:	4649      	mov	r1, r9
 8006288:	eb43 0501 	adc.w	r5, r3, r1
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	00eb      	lsls	r3, r5, #3
 8006296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629a:	00e2      	lsls	r2, r4, #3
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	4643      	mov	r3, r8
 80062a2:	18e3      	adds	r3, r4, r3
 80062a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a8:	464b      	mov	r3, r9
 80062aa:	eb45 0303 	adc.w	r3, r5, r3
 80062ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ce:	4629      	mov	r1, r5
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	4621      	mov	r1, r4
 80062d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d8:	4621      	mov	r1, r4
 80062da:	008a      	lsls	r2, r1, #2
 80062dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062e0:	f7f9 ffe6 	bl	80002b0 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b60      	ldr	r3, [pc, #384]	; (800646c <UART_SetConfig+0x4e4>)
 80062ea:	fba3 2302 	umull	r2, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	011c      	lsls	r4, r3, #4
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	61b9      	str	r1, [r7, #24]
 800630c:	415b      	adcs	r3, r3
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006314:	4641      	mov	r1, r8
 8006316:	1851      	adds	r1, r2, r1
 8006318:	6139      	str	r1, [r7, #16]
 800631a:	4649      	mov	r1, r9
 800631c:	414b      	adcs	r3, r1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800632c:	4659      	mov	r1, fp
 800632e:	00cb      	lsls	r3, r1, #3
 8006330:	4651      	mov	r1, sl
 8006332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006336:	4651      	mov	r1, sl
 8006338:	00ca      	lsls	r2, r1, #3
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	4603      	mov	r3, r0
 8006340:	4642      	mov	r2, r8
 8006342:	189b      	adds	r3, r3, r2
 8006344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006348:	464b      	mov	r3, r9
 800634a:	460a      	mov	r2, r1
 800634c:	eb42 0303 	adc.w	r3, r2, r3
 8006350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	67bb      	str	r3, [r7, #120]	; 0x78
 800635e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800636c:	4649      	mov	r1, r9
 800636e:	008b      	lsls	r3, r1, #2
 8006370:	4641      	mov	r1, r8
 8006372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006376:	4641      	mov	r1, r8
 8006378:	008a      	lsls	r2, r1, #2
 800637a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800637e:	f7f9 ff97 	bl	80002b0 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <UART_SetConfig+0x4e4>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a34      	ldr	r2, [pc, #208]	; (800646c <UART_SetConfig+0x4e4>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a6:	441c      	add	r4, r3
 80063a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ac:	2200      	movs	r2, #0
 80063ae:	673b      	str	r3, [r7, #112]	; 0x70
 80063b0:	677a      	str	r2, [r7, #116]	; 0x74
 80063b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	415b      	adcs	r3, r3
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c6:	4641      	mov	r1, r8
 80063c8:	1851      	adds	r1, r2, r1
 80063ca:	6039      	str	r1, [r7, #0]
 80063cc:	4649      	mov	r1, r9
 80063ce:	414b      	adcs	r3, r1
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063de:	4659      	mov	r1, fp
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	4651      	mov	r1, sl
 80063e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e8:	4651      	mov	r1, sl
 80063ea:	00ca      	lsls	r2, r1, #3
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	4642      	mov	r2, r8
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	464b      	mov	r3, r9
 80063fa:	460a      	mov	r2, r1
 80063fc:	eb42 0303 	adc.w	r3, r2, r3
 8006400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	663b      	str	r3, [r7, #96]	; 0x60
 800640c:	667a      	str	r2, [r7, #100]	; 0x64
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800641a:	4649      	mov	r1, r9
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	4641      	mov	r1, r8
 8006420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006424:	4641      	mov	r1, r8
 8006426:	008a      	lsls	r2, r1, #2
 8006428:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800642c:	f7f9 ff40 	bl	80002b0 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <UART_SetConfig+0x4e4>)
 8006436:	fba3 1302 	umull	r1, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	2164      	movs	r1, #100	; 0x64
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	3332      	adds	r3, #50	; 0x32
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <UART_SetConfig+0x4e4>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4422      	add	r2, r4
 800645c:	609a      	str	r2, [r3, #8]
}
 800645e:	bf00      	nop
 8006460:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006464:	46bd      	mov	sp, r7
 8006466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646a:	bf00      	nop
 800646c:	51eb851f 	.word	0x51eb851f

08006470 <__errno>:
 8006470:	4b01      	ldr	r3, [pc, #4]	; (8006478 <__errno+0x8>)
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000014 	.word	0x20000014

0800647c <__libc_init_array>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4d0d      	ldr	r5, [pc, #52]	; (80064b4 <__libc_init_array+0x38>)
 8006480:	4c0d      	ldr	r4, [pc, #52]	; (80064b8 <__libc_init_array+0x3c>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	2600      	movs	r6, #0
 8006488:	42a6      	cmp	r6, r4
 800648a:	d109      	bne.n	80064a0 <__libc_init_array+0x24>
 800648c:	4d0b      	ldr	r5, [pc, #44]	; (80064bc <__libc_init_array+0x40>)
 800648e:	4c0c      	ldr	r4, [pc, #48]	; (80064c0 <__libc_init_array+0x44>)
 8006490:	f000 fcea 	bl	8006e68 <_init>
 8006494:	1b64      	subs	r4, r4, r5
 8006496:	10a4      	asrs	r4, r4, #2
 8006498:	2600      	movs	r6, #0
 800649a:	42a6      	cmp	r6, r4
 800649c:	d105      	bne.n	80064aa <__libc_init_array+0x2e>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a4:	4798      	blx	r3
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7ee      	b.n	8006488 <__libc_init_array+0xc>
 80064aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ae:	4798      	blx	r3
 80064b0:	3601      	adds	r6, #1
 80064b2:	e7f2      	b.n	800649a <__libc_init_array+0x1e>
 80064b4:	080076ec 	.word	0x080076ec
 80064b8:	080076ec 	.word	0x080076ec
 80064bc:	080076ec 	.word	0x080076ec
 80064c0:	080076f0 	.word	0x080076f0

080064c4 <__itoa>:
 80064c4:	1e93      	subs	r3, r2, #2
 80064c6:	2b22      	cmp	r3, #34	; 0x22
 80064c8:	b510      	push	{r4, lr}
 80064ca:	460c      	mov	r4, r1
 80064cc:	d904      	bls.n	80064d8 <__itoa+0x14>
 80064ce:	2300      	movs	r3, #0
 80064d0:	700b      	strb	r3, [r1, #0]
 80064d2:	461c      	mov	r4, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	2a0a      	cmp	r2, #10
 80064da:	d109      	bne.n	80064f0 <__itoa+0x2c>
 80064dc:	2800      	cmp	r0, #0
 80064de:	da07      	bge.n	80064f0 <__itoa+0x2c>
 80064e0:	232d      	movs	r3, #45	; 0x2d
 80064e2:	700b      	strb	r3, [r1, #0]
 80064e4:	4240      	negs	r0, r0
 80064e6:	2101      	movs	r1, #1
 80064e8:	4421      	add	r1, r4
 80064ea:	f000 f83b 	bl	8006564 <__utoa>
 80064ee:	e7f1      	b.n	80064d4 <__itoa+0x10>
 80064f0:	2100      	movs	r1, #0
 80064f2:	e7f9      	b.n	80064e8 <__itoa+0x24>

080064f4 <itoa>:
 80064f4:	f7ff bfe6 	b.w	80064c4 <__itoa>

080064f8 <memcpy>:
 80064f8:	440a      	add	r2, r1
 80064fa:	4291      	cmp	r1, r2
 80064fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006500:	d100      	bne.n	8006504 <memcpy+0xc>
 8006502:	4770      	bx	lr
 8006504:	b510      	push	{r4, lr}
 8006506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800650e:	4291      	cmp	r1, r2
 8006510:	d1f9      	bne.n	8006506 <memcpy+0xe>
 8006512:	bd10      	pop	{r4, pc}

08006514 <memset>:
 8006514:	4402      	add	r2, r0
 8006516:	4603      	mov	r3, r0
 8006518:	4293      	cmp	r3, r2
 800651a:	d100      	bne.n	800651e <memset+0xa>
 800651c:	4770      	bx	lr
 800651e:	f803 1b01 	strb.w	r1, [r3], #1
 8006522:	e7f9      	b.n	8006518 <memset+0x4>

08006524 <siprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b500      	push	{lr}
 8006528:	b09c      	sub	sp, #112	; 0x70
 800652a:	ab1d      	add	r3, sp, #116	; 0x74
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	9006      	str	r0, [sp, #24]
 8006530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <siprintf+0x38>)
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4909      	ldr	r1, [pc, #36]	; (8006560 <siprintf+0x3c>)
 800653c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	a902      	add	r1, sp, #8
 8006548:	f000 f8aa 	bl	80066a0 <_svfiprintf_r>
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	f85d eb04 	ldr.w	lr, [sp], #4
 8006558:	b003      	add	sp, #12
 800655a:	4770      	bx	lr
 800655c:	20000014 	.word	0x20000014
 8006560:	ffff0208 	.word	0xffff0208

08006564 <__utoa>:
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006566:	4c1f      	ldr	r4, [pc, #124]	; (80065e4 <__utoa+0x80>)
 8006568:	b08b      	sub	sp, #44	; 0x2c
 800656a:	4605      	mov	r5, r0
 800656c:	460b      	mov	r3, r1
 800656e:	466e      	mov	r6, sp
 8006570:	f104 0c20 	add.w	ip, r4, #32
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	6861      	ldr	r1, [r4, #4]
 8006578:	4637      	mov	r7, r6
 800657a:	c703      	stmia	r7!, {r0, r1}
 800657c:	3408      	adds	r4, #8
 800657e:	4564      	cmp	r4, ip
 8006580:	463e      	mov	r6, r7
 8006582:	d1f7      	bne.n	8006574 <__utoa+0x10>
 8006584:	7921      	ldrb	r1, [r4, #4]
 8006586:	7139      	strb	r1, [r7, #4]
 8006588:	1e91      	subs	r1, r2, #2
 800658a:	6820      	ldr	r0, [r4, #0]
 800658c:	6038      	str	r0, [r7, #0]
 800658e:	2922      	cmp	r1, #34	; 0x22
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	d904      	bls.n	80065a0 <__utoa+0x3c>
 8006596:	7019      	strb	r1, [r3, #0]
 8006598:	460b      	mov	r3, r1
 800659a:	4618      	mov	r0, r3
 800659c:	b00b      	add	sp, #44	; 0x2c
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a0:	1e58      	subs	r0, r3, #1
 80065a2:	4684      	mov	ip, r0
 80065a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80065a8:	fb02 5617 	mls	r6, r2, r7, r5
 80065ac:	3628      	adds	r6, #40	; 0x28
 80065ae:	446e      	add	r6, sp
 80065b0:	460c      	mov	r4, r1
 80065b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80065b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80065ba:	462e      	mov	r6, r5
 80065bc:	42b2      	cmp	r2, r6
 80065be:	f101 0101 	add.w	r1, r1, #1
 80065c2:	463d      	mov	r5, r7
 80065c4:	d9ee      	bls.n	80065a4 <__utoa+0x40>
 80065c6:	2200      	movs	r2, #0
 80065c8:	545a      	strb	r2, [r3, r1]
 80065ca:	1919      	adds	r1, r3, r4
 80065cc:	1aa5      	subs	r5, r4, r2
 80065ce:	42aa      	cmp	r2, r5
 80065d0:	dae3      	bge.n	800659a <__utoa+0x36>
 80065d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80065d6:	780e      	ldrb	r6, [r1, #0]
 80065d8:	7006      	strb	r6, [r0, #0]
 80065da:	3201      	adds	r2, #1
 80065dc:	f801 5901 	strb.w	r5, [r1], #-1
 80065e0:	e7f4      	b.n	80065cc <__utoa+0x68>
 80065e2:	bf00      	nop
 80065e4:	0800768c 	.word	0x0800768c

080065e8 <__ssputs_r>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	688e      	ldr	r6, [r1, #8]
 80065ee:	429e      	cmp	r6, r3
 80065f0:	4682      	mov	sl, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4690      	mov	r8, r2
 80065f6:	461f      	mov	r7, r3
 80065f8:	d838      	bhi.n	800666c <__ssputs_r+0x84>
 80065fa:	898a      	ldrh	r2, [r1, #12]
 80065fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006600:	d032      	beq.n	8006668 <__ssputs_r+0x80>
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	6909      	ldr	r1, [r1, #16]
 8006606:	eba5 0901 	sub.w	r9, r5, r1
 800660a:	6965      	ldr	r5, [r4, #20]
 800660c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006614:	3301      	adds	r3, #1
 8006616:	444b      	add	r3, r9
 8006618:	106d      	asrs	r5, r5, #1
 800661a:	429d      	cmp	r5, r3
 800661c:	bf38      	it	cc
 800661e:	461d      	movcc	r5, r3
 8006620:	0553      	lsls	r3, r2, #21
 8006622:	d531      	bpl.n	8006688 <__ssputs_r+0xa0>
 8006624:	4629      	mov	r1, r5
 8006626:	f000 fb55 	bl	8006cd4 <_malloc_r>
 800662a:	4606      	mov	r6, r0
 800662c:	b950      	cbnz	r0, 8006644 <__ssputs_r+0x5c>
 800662e:	230c      	movs	r3, #12
 8006630:	f8ca 3000 	str.w	r3, [sl]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	6921      	ldr	r1, [r4, #16]
 8006646:	464a      	mov	r2, r9
 8006648:	f7ff ff56 	bl	80064f8 <memcpy>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6126      	str	r6, [r4, #16]
 800665a:	6165      	str	r5, [r4, #20]
 800665c:	444e      	add	r6, r9
 800665e:	eba5 0509 	sub.w	r5, r5, r9
 8006662:	6026      	str	r6, [r4, #0]
 8006664:	60a5      	str	r5, [r4, #8]
 8006666:	463e      	mov	r6, r7
 8006668:	42be      	cmp	r6, r7
 800666a:	d900      	bls.n	800666e <__ssputs_r+0x86>
 800666c:	463e      	mov	r6, r7
 800666e:	6820      	ldr	r0, [r4, #0]
 8006670:	4632      	mov	r2, r6
 8006672:	4641      	mov	r1, r8
 8006674:	f000 faa8 	bl	8006bc8 <memmove>
 8006678:	68a3      	ldr	r3, [r4, #8]
 800667a:	1b9b      	subs	r3, r3, r6
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	4433      	add	r3, r6
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	2000      	movs	r0, #0
 8006686:	e7db      	b.n	8006640 <__ssputs_r+0x58>
 8006688:	462a      	mov	r2, r5
 800668a:	f000 fb97 	bl	8006dbc <_realloc_r>
 800668e:	4606      	mov	r6, r0
 8006690:	2800      	cmp	r0, #0
 8006692:	d1e1      	bne.n	8006658 <__ssputs_r+0x70>
 8006694:	6921      	ldr	r1, [r4, #16]
 8006696:	4650      	mov	r0, sl
 8006698:	f000 fab0 	bl	8006bfc <_free_r>
 800669c:	e7c7      	b.n	800662e <__ssputs_r+0x46>
	...

080066a0 <_svfiprintf_r>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	4698      	mov	r8, r3
 80066a6:	898b      	ldrh	r3, [r1, #12]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	b09d      	sub	sp, #116	; 0x74
 80066ac:	4607      	mov	r7, r0
 80066ae:	460d      	mov	r5, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	d50e      	bpl.n	80066d2 <_svfiprintf_r+0x32>
 80066b4:	690b      	ldr	r3, [r1, #16]
 80066b6:	b963      	cbnz	r3, 80066d2 <_svfiprintf_r+0x32>
 80066b8:	2140      	movs	r1, #64	; 0x40
 80066ba:	f000 fb0b 	bl	8006cd4 <_malloc_r>
 80066be:	6028      	str	r0, [r5, #0]
 80066c0:	6128      	str	r0, [r5, #16]
 80066c2:	b920      	cbnz	r0, 80066ce <_svfiprintf_r+0x2e>
 80066c4:	230c      	movs	r3, #12
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	e0d1      	b.n	8006872 <_svfiprintf_r+0x1d2>
 80066ce:	2340      	movs	r3, #64	; 0x40
 80066d0:	616b      	str	r3, [r5, #20]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	2320      	movs	r3, #32
 80066d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e0:	2330      	movs	r3, #48	; 0x30
 80066e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800688c <_svfiprintf_r+0x1ec>
 80066e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ea:	f04f 0901 	mov.w	r9, #1
 80066ee:	4623      	mov	r3, r4
 80066f0:	469a      	mov	sl, r3
 80066f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f6:	b10a      	cbz	r2, 80066fc <_svfiprintf_r+0x5c>
 80066f8:	2a25      	cmp	r2, #37	; 0x25
 80066fa:	d1f9      	bne.n	80066f0 <_svfiprintf_r+0x50>
 80066fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006700:	d00b      	beq.n	800671a <_svfiprintf_r+0x7a>
 8006702:	465b      	mov	r3, fp
 8006704:	4622      	mov	r2, r4
 8006706:	4629      	mov	r1, r5
 8006708:	4638      	mov	r0, r7
 800670a:	f7ff ff6d 	bl	80065e8 <__ssputs_r>
 800670e:	3001      	adds	r0, #1
 8006710:	f000 80aa 	beq.w	8006868 <_svfiprintf_r+0x1c8>
 8006714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006716:	445a      	add	r2, fp
 8006718:	9209      	str	r2, [sp, #36]	; 0x24
 800671a:	f89a 3000 	ldrb.w	r3, [sl]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80a2 	beq.w	8006868 <_svfiprintf_r+0x1c8>
 8006724:	2300      	movs	r3, #0
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672e:	f10a 0a01 	add.w	sl, sl, #1
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673a:	931a      	str	r3, [sp, #104]	; 0x68
 800673c:	4654      	mov	r4, sl
 800673e:	2205      	movs	r2, #5
 8006740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006744:	4851      	ldr	r0, [pc, #324]	; (800688c <_svfiprintf_r+0x1ec>)
 8006746:	f7f9 fd63 	bl	8000210 <memchr>
 800674a:	9a04      	ldr	r2, [sp, #16]
 800674c:	b9d8      	cbnz	r0, 8006786 <_svfiprintf_r+0xe6>
 800674e:	06d0      	lsls	r0, r2, #27
 8006750:	bf44      	itt	mi
 8006752:	2320      	movmi	r3, #32
 8006754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006758:	0711      	lsls	r1, r2, #28
 800675a:	bf44      	itt	mi
 800675c:	232b      	movmi	r3, #43	; 0x2b
 800675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006762:	f89a 3000 	ldrb.w	r3, [sl]
 8006766:	2b2a      	cmp	r3, #42	; 0x2a
 8006768:	d015      	beq.n	8006796 <_svfiprintf_r+0xf6>
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4654      	mov	r4, sl
 800676e:	2000      	movs	r0, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4621      	mov	r1, r4
 8006776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677a:	3b30      	subs	r3, #48	; 0x30
 800677c:	2b09      	cmp	r3, #9
 800677e:	d94e      	bls.n	800681e <_svfiprintf_r+0x17e>
 8006780:	b1b0      	cbz	r0, 80067b0 <_svfiprintf_r+0x110>
 8006782:	9207      	str	r2, [sp, #28]
 8006784:	e014      	b.n	80067b0 <_svfiprintf_r+0x110>
 8006786:	eba0 0308 	sub.w	r3, r0, r8
 800678a:	fa09 f303 	lsl.w	r3, r9, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	46a2      	mov	sl, r4
 8006794:	e7d2      	b.n	800673c <_svfiprintf_r+0x9c>
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	9103      	str	r1, [sp, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbb      	ittet	lt
 80067a2:	425b      	neglt	r3, r3
 80067a4:	f042 0202 	orrlt.w	r2, r2, #2
 80067a8:	9307      	strge	r3, [sp, #28]
 80067aa:	9307      	strlt	r3, [sp, #28]
 80067ac:	bfb8      	it	lt
 80067ae:	9204      	strlt	r2, [sp, #16]
 80067b0:	7823      	ldrb	r3, [r4, #0]
 80067b2:	2b2e      	cmp	r3, #46	; 0x2e
 80067b4:	d10c      	bne.n	80067d0 <_svfiprintf_r+0x130>
 80067b6:	7863      	ldrb	r3, [r4, #1]
 80067b8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ba:	d135      	bne.n	8006828 <_svfiprintf_r+0x188>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067cc:	3402      	adds	r4, #2
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800689c <_svfiprintf_r+0x1fc>
 80067d4:	7821      	ldrb	r1, [r4, #0]
 80067d6:	2203      	movs	r2, #3
 80067d8:	4650      	mov	r0, sl
 80067da:	f7f9 fd19 	bl	8000210 <memchr>
 80067de:	b140      	cbz	r0, 80067f2 <_svfiprintf_r+0x152>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	eba0 000a 	sub.w	r0, r0, sl
 80067e6:	fa03 f000 	lsl.w	r0, r3, r0
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	4303      	orrs	r3, r0
 80067ee:	3401      	adds	r4, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	4826      	ldr	r0, [pc, #152]	; (8006890 <_svfiprintf_r+0x1f0>)
 80067f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fc:	2206      	movs	r2, #6
 80067fe:	f7f9 fd07 	bl	8000210 <memchr>
 8006802:	2800      	cmp	r0, #0
 8006804:	d038      	beq.n	8006878 <_svfiprintf_r+0x1d8>
 8006806:	4b23      	ldr	r3, [pc, #140]	; (8006894 <_svfiprintf_r+0x1f4>)
 8006808:	bb1b      	cbnz	r3, 8006852 <_svfiprintf_r+0x1b2>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	3307      	adds	r3, #7
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	3308      	adds	r3, #8
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006818:	4433      	add	r3, r6
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	e767      	b.n	80066ee <_svfiprintf_r+0x4e>
 800681e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006822:	460c      	mov	r4, r1
 8006824:	2001      	movs	r0, #1
 8006826:	e7a5      	b.n	8006774 <_svfiprintf_r+0xd4>
 8006828:	2300      	movs	r3, #0
 800682a:	3401      	adds	r4, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4619      	mov	r1, r3
 8006830:	f04f 0c0a 	mov.w	ip, #10
 8006834:	4620      	mov	r0, r4
 8006836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683a:	3a30      	subs	r2, #48	; 0x30
 800683c:	2a09      	cmp	r2, #9
 800683e:	d903      	bls.n	8006848 <_svfiprintf_r+0x1a8>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0c5      	beq.n	80067d0 <_svfiprintf_r+0x130>
 8006844:	9105      	str	r1, [sp, #20]
 8006846:	e7c3      	b.n	80067d0 <_svfiprintf_r+0x130>
 8006848:	fb0c 2101 	mla	r1, ip, r1, r2
 800684c:	4604      	mov	r4, r0
 800684e:	2301      	movs	r3, #1
 8006850:	e7f0      	b.n	8006834 <_svfiprintf_r+0x194>
 8006852:	ab03      	add	r3, sp, #12
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	462a      	mov	r2, r5
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <_svfiprintf_r+0x1f8>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	4638      	mov	r0, r7
 800685e:	f3af 8000 	nop.w
 8006862:	1c42      	adds	r2, r0, #1
 8006864:	4606      	mov	r6, r0
 8006866:	d1d6      	bne.n	8006816 <_svfiprintf_r+0x176>
 8006868:	89ab      	ldrh	r3, [r5, #12]
 800686a:	065b      	lsls	r3, r3, #25
 800686c:	f53f af2c 	bmi.w	80066c8 <_svfiprintf_r+0x28>
 8006870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006872:	b01d      	add	sp, #116	; 0x74
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	ab03      	add	r3, sp, #12
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	462a      	mov	r2, r5
 800687e:	4b06      	ldr	r3, [pc, #24]	; (8006898 <_svfiprintf_r+0x1f8>)
 8006880:	a904      	add	r1, sp, #16
 8006882:	4638      	mov	r0, r7
 8006884:	f000 f87a 	bl	800697c <_printf_i>
 8006888:	e7eb      	b.n	8006862 <_svfiprintf_r+0x1c2>
 800688a:	bf00      	nop
 800688c:	080076b1 	.word	0x080076b1
 8006890:	080076bb 	.word	0x080076bb
 8006894:	00000000 	.word	0x00000000
 8006898:	080065e9 	.word	0x080065e9
 800689c:	080076b7 	.word	0x080076b7

080068a0 <_printf_common>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	4616      	mov	r6, r2
 80068a6:	4699      	mov	r9, r3
 80068a8:	688a      	ldr	r2, [r1, #8]
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bfb8      	it	lt
 80068b4:	4613      	movlt	r3, r2
 80068b6:	6033      	str	r3, [r6, #0]
 80068b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068bc:	4607      	mov	r7, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b10a      	cbz	r2, 80068c6 <_printf_common+0x26>
 80068c2:	3301      	adds	r3, #1
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	0699      	lsls	r1, r3, #26
 80068ca:	bf42      	ittt	mi
 80068cc:	6833      	ldrmi	r3, [r6, #0]
 80068ce:	3302      	addmi	r3, #2
 80068d0:	6033      	strmi	r3, [r6, #0]
 80068d2:	6825      	ldr	r5, [r4, #0]
 80068d4:	f015 0506 	ands.w	r5, r5, #6
 80068d8:	d106      	bne.n	80068e8 <_printf_common+0x48>
 80068da:	f104 0a19 	add.w	sl, r4, #25
 80068de:	68e3      	ldr	r3, [r4, #12]
 80068e0:	6832      	ldr	r2, [r6, #0]
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	dc26      	bgt.n	8006936 <_printf_common+0x96>
 80068e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068ec:	1e13      	subs	r3, r2, #0
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	bf18      	it	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	0692      	lsls	r2, r2, #26
 80068f6:	d42b      	bmi.n	8006950 <_printf_common+0xb0>
 80068f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068fc:	4649      	mov	r1, r9
 80068fe:	4638      	mov	r0, r7
 8006900:	47c0      	blx	r8
 8006902:	3001      	adds	r0, #1
 8006904:	d01e      	beq.n	8006944 <_printf_common+0xa4>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	68e5      	ldr	r5, [r4, #12]
 800690a:	6832      	ldr	r2, [r6, #0]
 800690c:	f003 0306 	and.w	r3, r3, #6
 8006910:	2b04      	cmp	r3, #4
 8006912:	bf08      	it	eq
 8006914:	1aad      	subeq	r5, r5, r2
 8006916:	68a3      	ldr	r3, [r4, #8]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	bf0c      	ite	eq
 800691c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006920:	2500      	movne	r5, #0
 8006922:	4293      	cmp	r3, r2
 8006924:	bfc4      	itt	gt
 8006926:	1a9b      	subgt	r3, r3, r2
 8006928:	18ed      	addgt	r5, r5, r3
 800692a:	2600      	movs	r6, #0
 800692c:	341a      	adds	r4, #26
 800692e:	42b5      	cmp	r5, r6
 8006930:	d11a      	bne.n	8006968 <_printf_common+0xc8>
 8006932:	2000      	movs	r0, #0
 8006934:	e008      	b.n	8006948 <_printf_common+0xa8>
 8006936:	2301      	movs	r3, #1
 8006938:	4652      	mov	r2, sl
 800693a:	4649      	mov	r1, r9
 800693c:	4638      	mov	r0, r7
 800693e:	47c0      	blx	r8
 8006940:	3001      	adds	r0, #1
 8006942:	d103      	bne.n	800694c <_printf_common+0xac>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694c:	3501      	adds	r5, #1
 800694e:	e7c6      	b.n	80068de <_printf_common+0x3e>
 8006950:	18e1      	adds	r1, r4, r3
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	2030      	movs	r0, #48	; 0x30
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800695a:	4422      	add	r2, r4
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006964:	3302      	adds	r3, #2
 8006966:	e7c7      	b.n	80068f8 <_printf_common+0x58>
 8006968:	2301      	movs	r3, #1
 800696a:	4622      	mov	r2, r4
 800696c:	4649      	mov	r1, r9
 800696e:	4638      	mov	r0, r7
 8006970:	47c0      	blx	r8
 8006972:	3001      	adds	r0, #1
 8006974:	d0e6      	beq.n	8006944 <_printf_common+0xa4>
 8006976:	3601      	adds	r6, #1
 8006978:	e7d9      	b.n	800692e <_printf_common+0x8e>
	...

0800697c <_printf_i>:
 800697c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	7e0f      	ldrb	r7, [r1, #24]
 8006982:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006984:	2f78      	cmp	r7, #120	; 0x78
 8006986:	4691      	mov	r9, r2
 8006988:	4680      	mov	r8, r0
 800698a:	460c      	mov	r4, r1
 800698c:	469a      	mov	sl, r3
 800698e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006992:	d807      	bhi.n	80069a4 <_printf_i+0x28>
 8006994:	2f62      	cmp	r7, #98	; 0x62
 8006996:	d80a      	bhi.n	80069ae <_printf_i+0x32>
 8006998:	2f00      	cmp	r7, #0
 800699a:	f000 80d8 	beq.w	8006b4e <_printf_i+0x1d2>
 800699e:	2f58      	cmp	r7, #88	; 0x58
 80069a0:	f000 80a3 	beq.w	8006aea <_printf_i+0x16e>
 80069a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069ac:	e03a      	b.n	8006a24 <_printf_i+0xa8>
 80069ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069b2:	2b15      	cmp	r3, #21
 80069b4:	d8f6      	bhi.n	80069a4 <_printf_i+0x28>
 80069b6:	a101      	add	r1, pc, #4	; (adr r1, 80069bc <_printf_i+0x40>)
 80069b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	080069a5 	.word	0x080069a5
 80069c8:	080069a5 	.word	0x080069a5
 80069cc:	080069a5 	.word	0x080069a5
 80069d0:	080069a5 	.word	0x080069a5
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	080069a5 	.word	0x080069a5
 80069dc:	080069a5 	.word	0x080069a5
 80069e0:	080069a5 	.word	0x080069a5
 80069e4:	080069a5 	.word	0x080069a5
 80069e8:	08006b35 	.word	0x08006b35
 80069ec:	08006a59 	.word	0x08006a59
 80069f0:	08006b17 	.word	0x08006b17
 80069f4:	080069a5 	.word	0x080069a5
 80069f8:	080069a5 	.word	0x080069a5
 80069fc:	08006b57 	.word	0x08006b57
 8006a00:	080069a5 	.word	0x080069a5
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	080069a5 	.word	0x080069a5
 8006a0c:	080069a5 	.word	0x080069a5
 8006a10:	08006b1f 	.word	0x08006b1f
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0a3      	b.n	8006b70 <_printf_i+0x1f4>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	6829      	ldr	r1, [r5, #0]
 8006a2c:	0606      	lsls	r6, r0, #24
 8006a2e:	f101 0304 	add.w	r3, r1, #4
 8006a32:	d50a      	bpl.n	8006a4a <_printf_i+0xce>
 8006a34:	680e      	ldr	r6, [r1, #0]
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	2e00      	cmp	r6, #0
 8006a3a:	da03      	bge.n	8006a44 <_printf_i+0xc8>
 8006a3c:	232d      	movs	r3, #45	; 0x2d
 8006a3e:	4276      	negs	r6, r6
 8006a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a44:	485e      	ldr	r0, [pc, #376]	; (8006bc0 <_printf_i+0x244>)
 8006a46:	230a      	movs	r3, #10
 8006a48:	e019      	b.n	8006a7e <_printf_i+0x102>
 8006a4a:	680e      	ldr	r6, [r1, #0]
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a52:	bf18      	it	ne
 8006a54:	b236      	sxthne	r6, r6
 8006a56:	e7ef      	b.n	8006a38 <_printf_i+0xbc>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	6820      	ldr	r0, [r4, #0]
 8006a5c:	1d19      	adds	r1, r3, #4
 8006a5e:	6029      	str	r1, [r5, #0]
 8006a60:	0601      	lsls	r1, r0, #24
 8006a62:	d501      	bpl.n	8006a68 <_printf_i+0xec>
 8006a64:	681e      	ldr	r6, [r3, #0]
 8006a66:	e002      	b.n	8006a6e <_printf_i+0xf2>
 8006a68:	0646      	lsls	r6, r0, #25
 8006a6a:	d5fb      	bpl.n	8006a64 <_printf_i+0xe8>
 8006a6c:	881e      	ldrh	r6, [r3, #0]
 8006a6e:	4854      	ldr	r0, [pc, #336]	; (8006bc0 <_printf_i+0x244>)
 8006a70:	2f6f      	cmp	r7, #111	; 0x6f
 8006a72:	bf0c      	ite	eq
 8006a74:	2308      	moveq	r3, #8
 8006a76:	230a      	movne	r3, #10
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a7e:	6865      	ldr	r5, [r4, #4]
 8006a80:	60a5      	str	r5, [r4, #8]
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	bfa2      	ittt	ge
 8006a86:	6821      	ldrge	r1, [r4, #0]
 8006a88:	f021 0104 	bicge.w	r1, r1, #4
 8006a8c:	6021      	strge	r1, [r4, #0]
 8006a8e:	b90e      	cbnz	r6, 8006a94 <_printf_i+0x118>
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	d04d      	beq.n	8006b30 <_printf_i+0x1b4>
 8006a94:	4615      	mov	r5, r2
 8006a96:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a9a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a9e:	5dc7      	ldrb	r7, [r0, r7]
 8006aa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aa4:	4637      	mov	r7, r6
 8006aa6:	42bb      	cmp	r3, r7
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	d9f4      	bls.n	8006a96 <_printf_i+0x11a>
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d10b      	bne.n	8006ac8 <_printf_i+0x14c>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	07de      	lsls	r6, r3, #31
 8006ab4:	d508      	bpl.n	8006ac8 <_printf_i+0x14c>
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	6861      	ldr	r1, [r4, #4]
 8006aba:	4299      	cmp	r1, r3
 8006abc:	bfde      	ittt	le
 8006abe:	2330      	movle	r3, #48	; 0x30
 8006ac0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac8:	1b52      	subs	r2, r2, r5
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	f8cd a000 	str.w	sl, [sp]
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	aa03      	add	r2, sp, #12
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7ff fee2 	bl	80068a0 <_printf_common>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d14c      	bne.n	8006b7a <_printf_i+0x1fe>
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	b004      	add	sp, #16
 8006ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aea:	4835      	ldr	r0, [pc, #212]	; (8006bc0 <_printf_i+0x244>)
 8006aec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006af0:	6829      	ldr	r1, [r5, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006af8:	6029      	str	r1, [r5, #0]
 8006afa:	061d      	lsls	r5, r3, #24
 8006afc:	d514      	bpl.n	8006b28 <_printf_i+0x1ac>
 8006afe:	07df      	lsls	r7, r3, #31
 8006b00:	bf44      	itt	mi
 8006b02:	f043 0320 	orrmi.w	r3, r3, #32
 8006b06:	6023      	strmi	r3, [r4, #0]
 8006b08:	b91e      	cbnz	r6, 8006b12 <_printf_i+0x196>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	f023 0320 	bic.w	r3, r3, #32
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	2310      	movs	r3, #16
 8006b14:	e7b0      	b.n	8006a78 <_printf_i+0xfc>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f043 0320 	orr.w	r3, r3, #32
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	2378      	movs	r3, #120	; 0x78
 8006b20:	4828      	ldr	r0, [pc, #160]	; (8006bc4 <_printf_i+0x248>)
 8006b22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b26:	e7e3      	b.n	8006af0 <_printf_i+0x174>
 8006b28:	0659      	lsls	r1, r3, #25
 8006b2a:	bf48      	it	mi
 8006b2c:	b2b6      	uxthmi	r6, r6
 8006b2e:	e7e6      	b.n	8006afe <_printf_i+0x182>
 8006b30:	4615      	mov	r5, r2
 8006b32:	e7bb      	b.n	8006aac <_printf_i+0x130>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	6826      	ldr	r6, [r4, #0]
 8006b38:	6961      	ldr	r1, [r4, #20]
 8006b3a:	1d18      	adds	r0, r3, #4
 8006b3c:	6028      	str	r0, [r5, #0]
 8006b3e:	0635      	lsls	r5, r6, #24
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	d501      	bpl.n	8006b48 <_printf_i+0x1cc>
 8006b44:	6019      	str	r1, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <_printf_i+0x1d2>
 8006b48:	0670      	lsls	r0, r6, #25
 8006b4a:	d5fb      	bpl.n	8006b44 <_printf_i+0x1c8>
 8006b4c:	8019      	strh	r1, [r3, #0]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	4615      	mov	r5, r2
 8006b54:	e7ba      	b.n	8006acc <_printf_i+0x150>
 8006b56:	682b      	ldr	r3, [r5, #0]
 8006b58:	1d1a      	adds	r2, r3, #4
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	2100      	movs	r1, #0
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fb54 	bl	8000210 <memchr>
 8006b68:	b108      	cbz	r0, 8006b6e <_printf_i+0x1f2>
 8006b6a:	1b40      	subs	r0, r0, r5
 8006b6c:	6060      	str	r0, [r4, #4]
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	2300      	movs	r3, #0
 8006b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b78:	e7a8      	b.n	8006acc <_printf_i+0x150>
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	4649      	mov	r1, r9
 8006b80:	4640      	mov	r0, r8
 8006b82:	47d0      	blx	sl
 8006b84:	3001      	adds	r0, #1
 8006b86:	d0ab      	beq.n	8006ae0 <_printf_i+0x164>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	079b      	lsls	r3, r3, #30
 8006b8c:	d413      	bmi.n	8006bb6 <_printf_i+0x23a>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	4298      	cmp	r0, r3
 8006b94:	bfb8      	it	lt
 8006b96:	4618      	movlt	r0, r3
 8006b98:	e7a4      	b.n	8006ae4 <_printf_i+0x168>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	47d0      	blx	sl
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d09b      	beq.n	8006ae0 <_printf_i+0x164>
 8006ba8:	3501      	adds	r5, #1
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	9903      	ldr	r1, [sp, #12]
 8006bae:	1a5b      	subs	r3, r3, r1
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dcf2      	bgt.n	8006b9a <_printf_i+0x21e>
 8006bb4:	e7eb      	b.n	8006b8e <_printf_i+0x212>
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	f104 0619 	add.w	r6, r4, #25
 8006bbc:	e7f5      	b.n	8006baa <_printf_i+0x22e>
 8006bbe:	bf00      	nop
 8006bc0:	080076c2 	.word	0x080076c2
 8006bc4:	080076d3 	.word	0x080076d3

08006bc8 <memmove>:
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	eb01 0402 	add.w	r4, r1, r2
 8006bd0:	d902      	bls.n	8006bd8 <memmove+0x10>
 8006bd2:	4284      	cmp	r4, r0
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	d807      	bhi.n	8006be8 <memmove+0x20>
 8006bd8:	1e43      	subs	r3, r0, #1
 8006bda:	42a1      	cmp	r1, r4
 8006bdc:	d008      	beq.n	8006bf0 <memmove+0x28>
 8006bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be6:	e7f8      	b.n	8006bda <memmove+0x12>
 8006be8:	4402      	add	r2, r0
 8006bea:	4601      	mov	r1, r0
 8006bec:	428a      	cmp	r2, r1
 8006bee:	d100      	bne.n	8006bf2 <memmove+0x2a>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfa:	e7f7      	b.n	8006bec <memmove+0x24>

08006bfc <_free_r>:
 8006bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bfe:	2900      	cmp	r1, #0
 8006c00:	d044      	beq.n	8006c8c <_free_r+0x90>
 8006c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c06:	9001      	str	r0, [sp, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c0e:	bfb8      	it	lt
 8006c10:	18e4      	addlt	r4, r4, r3
 8006c12:	f000 f913 	bl	8006e3c <__malloc_lock>
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <_free_r+0x94>)
 8006c18:	9801      	ldr	r0, [sp, #4]
 8006c1a:	6813      	ldr	r3, [r2, #0]
 8006c1c:	b933      	cbnz	r3, 8006c2c <_free_r+0x30>
 8006c1e:	6063      	str	r3, [r4, #4]
 8006c20:	6014      	str	r4, [r2, #0]
 8006c22:	b003      	add	sp, #12
 8006c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c28:	f000 b90e 	b.w	8006e48 <__malloc_unlock>
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d908      	bls.n	8006c42 <_free_r+0x46>
 8006c30:	6825      	ldr	r5, [r4, #0]
 8006c32:	1961      	adds	r1, r4, r5
 8006c34:	428b      	cmp	r3, r1
 8006c36:	bf01      	itttt	eq
 8006c38:	6819      	ldreq	r1, [r3, #0]
 8006c3a:	685b      	ldreq	r3, [r3, #4]
 8006c3c:	1949      	addeq	r1, r1, r5
 8006c3e:	6021      	streq	r1, [r4, #0]
 8006c40:	e7ed      	b.n	8006c1e <_free_r+0x22>
 8006c42:	461a      	mov	r2, r3
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	b10b      	cbz	r3, 8006c4c <_free_r+0x50>
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	d9fa      	bls.n	8006c42 <_free_r+0x46>
 8006c4c:	6811      	ldr	r1, [r2, #0]
 8006c4e:	1855      	adds	r5, r2, r1
 8006c50:	42a5      	cmp	r5, r4
 8006c52:	d10b      	bne.n	8006c6c <_free_r+0x70>
 8006c54:	6824      	ldr	r4, [r4, #0]
 8006c56:	4421      	add	r1, r4
 8006c58:	1854      	adds	r4, r2, r1
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	6011      	str	r1, [r2, #0]
 8006c5e:	d1e0      	bne.n	8006c22 <_free_r+0x26>
 8006c60:	681c      	ldr	r4, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	6053      	str	r3, [r2, #4]
 8006c66:	4421      	add	r1, r4
 8006c68:	6011      	str	r1, [r2, #0]
 8006c6a:	e7da      	b.n	8006c22 <_free_r+0x26>
 8006c6c:	d902      	bls.n	8006c74 <_free_r+0x78>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	e7d6      	b.n	8006c22 <_free_r+0x26>
 8006c74:	6825      	ldr	r5, [r4, #0]
 8006c76:	1961      	adds	r1, r4, r5
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	bf04      	itt	eq
 8006c7c:	6819      	ldreq	r1, [r3, #0]
 8006c7e:	685b      	ldreq	r3, [r3, #4]
 8006c80:	6063      	str	r3, [r4, #4]
 8006c82:	bf04      	itt	eq
 8006c84:	1949      	addeq	r1, r1, r5
 8006c86:	6021      	streq	r1, [r4, #0]
 8006c88:	6054      	str	r4, [r2, #4]
 8006c8a:	e7ca      	b.n	8006c22 <_free_r+0x26>
 8006c8c:	b003      	add	sp, #12
 8006c8e:	bd30      	pop	{r4, r5, pc}
 8006c90:	20000738 	.word	0x20000738

08006c94 <sbrk_aligned>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	4e0e      	ldr	r6, [pc, #56]	; (8006cd0 <sbrk_aligned+0x3c>)
 8006c98:	460c      	mov	r4, r1
 8006c9a:	6831      	ldr	r1, [r6, #0]
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	b911      	cbnz	r1, 8006ca6 <sbrk_aligned+0x12>
 8006ca0:	f000 f8bc 	bl	8006e1c <_sbrk_r>
 8006ca4:	6030      	str	r0, [r6, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 f8b7 	bl	8006e1c <_sbrk_r>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	d00a      	beq.n	8006cc8 <sbrk_aligned+0x34>
 8006cb2:	1cc4      	adds	r4, r0, #3
 8006cb4:	f024 0403 	bic.w	r4, r4, #3
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d007      	beq.n	8006ccc <sbrk_aligned+0x38>
 8006cbc:	1a21      	subs	r1, r4, r0
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f8ac 	bl	8006e1c <_sbrk_r>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d101      	bne.n	8006ccc <sbrk_aligned+0x38>
 8006cc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ccc:	4620      	mov	r0, r4
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	2000073c 	.word	0x2000073c

08006cd4 <_malloc_r>:
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	1ccd      	adds	r5, r1, #3
 8006cda:	f025 0503 	bic.w	r5, r5, #3
 8006cde:	3508      	adds	r5, #8
 8006ce0:	2d0c      	cmp	r5, #12
 8006ce2:	bf38      	it	cc
 8006ce4:	250c      	movcc	r5, #12
 8006ce6:	2d00      	cmp	r5, #0
 8006ce8:	4607      	mov	r7, r0
 8006cea:	db01      	blt.n	8006cf0 <_malloc_r+0x1c>
 8006cec:	42a9      	cmp	r1, r5
 8006cee:	d905      	bls.n	8006cfc <_malloc_r+0x28>
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	4e2e      	ldr	r6, [pc, #184]	; (8006db8 <_malloc_r+0xe4>)
 8006cfe:	f000 f89d 	bl	8006e3c <__malloc_lock>
 8006d02:	6833      	ldr	r3, [r6, #0]
 8006d04:	461c      	mov	r4, r3
 8006d06:	bb34      	cbnz	r4, 8006d56 <_malloc_r+0x82>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	f7ff ffc2 	bl	8006c94 <sbrk_aligned>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	4604      	mov	r4, r0
 8006d14:	d14d      	bne.n	8006db2 <_malloc_r+0xde>
 8006d16:	6834      	ldr	r4, [r6, #0]
 8006d18:	4626      	mov	r6, r4
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	d140      	bne.n	8006da0 <_malloc_r+0xcc>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	4631      	mov	r1, r6
 8006d22:	4638      	mov	r0, r7
 8006d24:	eb04 0803 	add.w	r8, r4, r3
 8006d28:	f000 f878 	bl	8006e1c <_sbrk_r>
 8006d2c:	4580      	cmp	r8, r0
 8006d2e:	d13a      	bne.n	8006da6 <_malloc_r+0xd2>
 8006d30:	6821      	ldr	r1, [r4, #0]
 8006d32:	3503      	adds	r5, #3
 8006d34:	1a6d      	subs	r5, r5, r1
 8006d36:	f025 0503 	bic.w	r5, r5, #3
 8006d3a:	3508      	adds	r5, #8
 8006d3c:	2d0c      	cmp	r5, #12
 8006d3e:	bf38      	it	cc
 8006d40:	250c      	movcc	r5, #12
 8006d42:	4629      	mov	r1, r5
 8006d44:	4638      	mov	r0, r7
 8006d46:	f7ff ffa5 	bl	8006c94 <sbrk_aligned>
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d02b      	beq.n	8006da6 <_malloc_r+0xd2>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	442b      	add	r3, r5
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	e00e      	b.n	8006d74 <_malloc_r+0xa0>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	1b52      	subs	r2, r2, r5
 8006d5a:	d41e      	bmi.n	8006d9a <_malloc_r+0xc6>
 8006d5c:	2a0b      	cmp	r2, #11
 8006d5e:	d916      	bls.n	8006d8e <_malloc_r+0xba>
 8006d60:	1961      	adds	r1, r4, r5
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	6025      	str	r5, [r4, #0]
 8006d66:	bf18      	it	ne
 8006d68:	6059      	strne	r1, [r3, #4]
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	bf08      	it	eq
 8006d6e:	6031      	streq	r1, [r6, #0]
 8006d70:	5162      	str	r2, [r4, r5]
 8006d72:	604b      	str	r3, [r1, #4]
 8006d74:	4638      	mov	r0, r7
 8006d76:	f104 060b 	add.w	r6, r4, #11
 8006d7a:	f000 f865 	bl	8006e48 <__malloc_unlock>
 8006d7e:	f026 0607 	bic.w	r6, r6, #7
 8006d82:	1d23      	adds	r3, r4, #4
 8006d84:	1af2      	subs	r2, r6, r3
 8006d86:	d0b6      	beq.n	8006cf6 <_malloc_r+0x22>
 8006d88:	1b9b      	subs	r3, r3, r6
 8006d8a:	50a3      	str	r3, [r4, r2]
 8006d8c:	e7b3      	b.n	8006cf6 <_malloc_r+0x22>
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	bf0c      	ite	eq
 8006d94:	6032      	streq	r2, [r6, #0]
 8006d96:	605a      	strne	r2, [r3, #4]
 8006d98:	e7ec      	b.n	8006d74 <_malloc_r+0xa0>
 8006d9a:	4623      	mov	r3, r4
 8006d9c:	6864      	ldr	r4, [r4, #4]
 8006d9e:	e7b2      	b.n	8006d06 <_malloc_r+0x32>
 8006da0:	4634      	mov	r4, r6
 8006da2:	6876      	ldr	r6, [r6, #4]
 8006da4:	e7b9      	b.n	8006d1a <_malloc_r+0x46>
 8006da6:	230c      	movs	r3, #12
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	4638      	mov	r0, r7
 8006dac:	f000 f84c 	bl	8006e48 <__malloc_unlock>
 8006db0:	e7a1      	b.n	8006cf6 <_malloc_r+0x22>
 8006db2:	6025      	str	r5, [r4, #0]
 8006db4:	e7de      	b.n	8006d74 <_malloc_r+0xa0>
 8006db6:	bf00      	nop
 8006db8:	20000738 	.word	0x20000738

08006dbc <_realloc_r>:
 8006dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	460e      	mov	r6, r1
 8006dc6:	b921      	cbnz	r1, 8006dd2 <_realloc_r+0x16>
 8006dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	4611      	mov	r1, r2
 8006dce:	f7ff bf81 	b.w	8006cd4 <_malloc_r>
 8006dd2:	b92a      	cbnz	r2, 8006de0 <_realloc_r+0x24>
 8006dd4:	f7ff ff12 	bl	8006bfc <_free_r>
 8006dd8:	4625      	mov	r5, r4
 8006dda:	4628      	mov	r0, r5
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	f000 f838 	bl	8006e54 <_malloc_usable_size_r>
 8006de4:	4284      	cmp	r4, r0
 8006de6:	4607      	mov	r7, r0
 8006de8:	d802      	bhi.n	8006df0 <_realloc_r+0x34>
 8006dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dee:	d812      	bhi.n	8006e16 <_realloc_r+0x5a>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff ff6e 	bl	8006cd4 <_malloc_r>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d0ed      	beq.n	8006dda <_realloc_r+0x1e>
 8006dfe:	42bc      	cmp	r4, r7
 8006e00:	4622      	mov	r2, r4
 8006e02:	4631      	mov	r1, r6
 8006e04:	bf28      	it	cs
 8006e06:	463a      	movcs	r2, r7
 8006e08:	f7ff fb76 	bl	80064f8 <memcpy>
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f7ff fef4 	bl	8006bfc <_free_r>
 8006e14:	e7e1      	b.n	8006dda <_realloc_r+0x1e>
 8006e16:	4635      	mov	r5, r6
 8006e18:	e7df      	b.n	8006dda <_realloc_r+0x1e>
	...

08006e1c <_sbrk_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_sbrk_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa fbd0 	bl	80015cc <_sbrk>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_sbrk_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_sbrk_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20000740 	.word	0x20000740

08006e3c <__malloc_lock>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	; (8006e44 <__malloc_lock+0x8>)
 8006e3e:	f000 b811 	b.w	8006e64 <__retarget_lock_acquire_recursive>
 8006e42:	bf00      	nop
 8006e44:	20000744 	.word	0x20000744

08006e48 <__malloc_unlock>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__malloc_unlock+0x8>)
 8006e4a:	f000 b80c 	b.w	8006e66 <__retarget_lock_release_recursive>
 8006e4e:	bf00      	nop
 8006e50:	20000744 	.word	0x20000744

08006e54 <_malloc_usable_size_r>:
 8006e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e58:	1f18      	subs	r0, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfbc      	itt	lt
 8006e5e:	580b      	ldrlt	r3, [r1, r0]
 8006e60:	18c0      	addlt	r0, r0, r3
 8006e62:	4770      	bx	lr

08006e64 <__retarget_lock_acquire_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_release_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <_init>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	bf00      	nop
 8006e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6e:	bc08      	pop	{r3}
 8006e70:	469e      	mov	lr, r3
 8006e72:	4770      	bx	lr

08006e74 <_fini>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr
=======
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	200006a8 	.word	0x200006a8

08001cb4 <_sbrk>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
 8001ce4:	f004 ff1e 	bl	8006b24 <__errno>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20020000 	.word	0x20020000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	200005cc 	.word	0x200005cc
 8001d1c:	20000748 	.word	0x20000748

08001d20 <SystemInit>:
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <MX_TIM2_Init>:
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d6a:	f242 3227 	movw	r2, #8999	; 0x2327
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d78:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	4814      	ldr	r0, [pc, #80]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001d8c:	f003 f9c6 	bl	800511c <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0x56>
 8001d96:	f7ff fcf5 	bl	8001784 <Error_Handler>
 8001d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001da8:	f003 fce5 	bl	8005776 <HAL_TIM_ConfigClockSource>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM2_Init+0x72>
 8001db2:	f7ff fce7 	bl	8001784 <Error_Handler>
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_TIM2_Init+0x98>)
 8001dc4:	f003 ff0a 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x8e>
 8001dce:	f7ff fcd9 	bl	8001784 <Error_Handler>
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200005d0 	.word	0x200005d0

08001de0 <MX_TIM3_Init>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	463b      	mov	r3, r7
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <MX_TIM3_Init+0x98>)
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e04:	2259      	movs	r2, #89	; 0x59
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e24:	f003 f97a 	bl	800511c <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x52>
 8001e2e:	f7ff fca9 	bl	8001784 <Error_Handler>
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e40:	f003 fc99 	bl	8005776 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x6e>
 8001e4a:	f7ff fc9b 	bl	8001784 <Error_Handler>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_TIM3_Init+0x94>)
 8001e5c:	f003 febe 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM3_Init+0x8a>
 8001e66:	f7ff fc8d 	bl	8001784 <Error_Handler>
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000618 	.word	0x20000618
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM4_Init>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fe9c 	bl	8006bc8 <memset>
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <MX_TIM4_Init+0xa4>)
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001eea:	f003 fa96 	bl	800541a <HAL_TIM_Encoder_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0x7c>
 8001ef4:	f7ff fc46 	bl	8001784 <Error_Handler>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM4_Init+0xa0>)
 8001f06:	f003 fe69 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM4_Init+0x98>
 8001f10:	f7ff fc38 	bl	8001784 <Error_Handler>
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000660 	.word	0x20000660
 8001f20:	40000800 	.word	0x40000800

08001f24 <MX_TIM12_Init>:
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <MX_TIM12_Init+0x70>)
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f4c:	2264      	movs	r2, #100	; 0x64
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f5e:	f003 f8dd 	bl	800511c <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM12_Init+0x48>
 8001f68:	f7ff fc0c 	bl	8001784 <Error_Handler>
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	463b      	mov	r3, r7
 8001f74:	4619      	mov	r1, r3
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <MX_TIM12_Init+0x6c>)
 8001f78:	f003 fbfd 	bl	8005776 <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM12_Init+0x62>
 8001f82:	f7ff fbff 	bl	8001784 <Error_Handler>
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200006a8 	.word	0x200006a8
 8001f94:	40001800 	.word	0x40001800

08001f98 <HAL_TIM_Base_MspInit>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d116      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x40>
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	201c      	movs	r0, #28
 8001fcc:	f000 fdf9 	bl	8002bc2 <HAL_NVIC_SetPriority>
 8001fd0:	201c      	movs	r0, #28
 8001fd2:	f000 fe12 	bl	8002bfa <HAL_NVIC_EnableIRQ>
 8001fd6:	e02e      	b.n	8002036 <HAL_TIM_Base_MspInit+0x9e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_TIM_Base_MspInit+0xac>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_Base_MspInit+0x68>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	e01a      	b.n	8002036 <HAL_TIM_Base_MspInit+0x9e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d115      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x9e>
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 8002014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_TIM_Base_MspInit+0xa8>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	202b      	movs	r0, #43	; 0x2b
 800202c:	f000 fdc9 	bl	8002bc2 <HAL_NVIC_SetPriority>
 8002030:	202b      	movs	r0, #43	; 0x2b
 8002032:	f000 fde2 	bl	8002bfa <HAL_NVIC_EnableIRQ>
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40000400 	.word	0x40000400
 8002048:	40001800 	.word	0x40001800

0800204c <HAL_TIM_Encoder_MspInit>:
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12b      	bne.n	80020c6 <HAL_TIM_Encoder_MspInit+0x7a>
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	2302      	movs	r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80020c2:	f001 fb9f 	bl	8003804 <HAL_GPIO_Init>
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020400 	.word	0x40020400

080020dc <MX_USART2_UART_Init>:
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <MX_USART2_UART_Init+0x50>)
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002102:	220c      	movs	r2, #12
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART2_UART_Init+0x4c>)
 8002114:	f003 fdf2 	bl	8005cfc <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART2_UART_Init+0x46>
 800211e:	f7ff fb31 	bl	8001784 <Error_Handler>
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200006f0 	.word	0x200006f0
 800212c:	40004400 	.word	0x40004400

08002130 <HAL_UART_MspInit>:
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_UART_MspInit+0x94>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d133      	bne.n	80021ba <HAL_UART_MspInit+0x8a>
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_UART_MspInit+0x98>)
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_UART_MspInit+0x98>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	230c      	movs	r3, #12
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	2302      	movs	r3, #2
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2303      	movs	r3, #3
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	2307      	movs	r3, #7
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4809      	ldr	r0, [pc, #36]	; (80021cc <HAL_UART_MspInit+0x9c>)
 80021a6:	f001 fb2d 	bl	8003804 <HAL_GPIO_Init>
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2026      	movs	r0, #38	; 0x26
 80021b0:	f000 fd07 	bl	8002bc2 <HAL_NVIC_SetPriority>
 80021b4:	2026      	movs	r0, #38	; 0x26
 80021b6:	f000 fd20 	bl	8002bfa <HAL_NVIC_EnableIRQ>
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40004400 	.word	0x40004400
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000

080021d0 <Reset_Handler>:
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002208 <LoopFillZerobss+0x12>
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <LoopFillZerobss+0x16>)
 80021d6:	490e      	ldr	r1, [pc, #56]	; (8002210 <LoopFillZerobss+0x1a>)
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <LoopFillZerobss+0x1e>)
 80021da:	2300      	movs	r3, #0
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:
 80021de:	58d4      	ldr	r4, [r2, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:
 80021e4:	18c4      	adds	r4, r0, r3
 80021e6:	428c      	cmp	r4, r1
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <LoopFillZerobss+0x22>)
 80021ec:	4c0b      	ldr	r4, [pc, #44]	; (800221c <LoopFillZerobss+0x26>)
 80021ee:	2300      	movs	r3, #0
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:
 80021f6:	42a2      	cmp	r2, r4
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>
 80021fa:	f7ff fd91 	bl	8001d20 <SystemInit>
 80021fe:	f004 fc97 	bl	8006b30 <__libc_init_array>
 8002202:	f7ff f867 	bl	80012d4 <main>
 8002206:	4770      	bx	lr
 8002208:	20020000 	.word	0x20020000
 800220c:	20000000 	.word	0x20000000
 8002210:	20000078 	.word	0x20000078
 8002214:	08007da4 	.word	0x08007da4
 8002218:	20000078 	.word	0x20000078
 800221c:	20000748 	.word	0x20000748

08002220 <ADC_IRQHandler>:
 8002220:	e7fe      	b.n	8002220 <ADC_IRQHandler>
	...

08002224 <HAL_Init>:
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_Init+0x40>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_Init+0x40>)
 800223a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_Init+0x40>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	2003      	movs	r0, #3
 800224e:	f000 fcad 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>
 8002252:	2000      	movs	r0, #0
 8002254:	f000 f808 	bl	8002268 <HAL_InitTick>
 8002258:	f7ff fc9a 	bl	8001b90 <HAL_MspInit>
 800225c:	2300      	movs	r3, #0
 800225e:	4618      	mov	r0, r3
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023c00 	.word	0x40023c00

08002268 <HAL_InitTick>:
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x54>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x58>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fcc5 	bl	8002c16 <HAL_SYSTICK_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_InitTick+0x2e>
 8002292:	2301      	movs	r3, #1
 8002294:	e00e      	b.n	80022b4 <HAL_InitTick+0x4c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0f      	cmp	r3, #15
 800229a:	d80a      	bhi.n	80022b2 <HAL_InitTick+0x4a>
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f000 fc8d 	bl	8002bc2 <HAL_NVIC_SetPriority>
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_InitTick+0x5c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x4c>
 80022b2:	2301      	movs	r3, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000010 	.word	0x20000010
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <HAL_IncTick>:
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x20>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_IncTick+0x24>)
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000010 	.word	0x20000010
 80022ec:	20000734 	.word	0x20000734

080022f0 <HAL_GetTick>:
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000734 	.word	0x20000734

08002308 <HAL_Delay>:
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	f7ff ffee 	bl	80022f0 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d005      	beq.n	800232e <HAL_Delay+0x26>
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_Delay+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	bf00      	nop
 8002330:	f7ff ffde 	bl	80022f0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d8f7      	bhi.n	8002330 <HAL_Delay+0x28>
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000010 	.word	0x20000010

08002350 <HAL_ADC_Init>:
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Init+0x16>
 8002362:	2301      	movs	r3, #1
 8002364:	e033      	b.n	80023ce <HAL_ADC_Init+0x7e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_ADC_Init+0x32>
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fca8 	bl	8000cc4 <HAL_ADC_MspInit>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_ADC_Init+0x70>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa36 	bl	8002814 <ADC_Init>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	e001      	b.n	80023c4 <HAL_ADC_Init+0x74>
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_ADC_Start_IT>:
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_Start_IT+0x1a>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0bd      	b.n	800256e <HAL_ADC_Start_IT+0x196>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d018      	beq.n	800243a <HAL_ADC_Start_IT+0x62>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_ADC_Start_IT+0x1a4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_ADC_Start_IT+0x1a8>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0c9a      	lsrs	r2, r3, #18
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e002      	b.n	8002434 <HAL_ADC_Start_IT+0x5c>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_Start_IT+0x56>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 8085 	bne.w	8002554 <HAL_ADC_Start_IT+0x17c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_Start_IT+0xa4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002474:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002488:	d106      	bne.n	8002498 <HAL_ADC_Start_IT+0xc0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f023 0206 	bic.w	r2, r3, #6
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
 8002496:	e002      	b.n	800249e <HAL_ADC_Start_IT+0xc6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	; 0x44
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_ADC_Start_IT+0x1ac>)
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6053      	str	r3, [r2, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12a      	bne.n	800252a <HAL_ADC_Start_IT+0x152>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <HAL_ADC_Start_IT+0x1b0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d015      	beq.n	800250a <HAL_ADC_Start_IT+0x132>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2a      	ldr	r2, [pc, #168]	; (800258c <HAL_ADC_Start_IT+0x1b4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Start_IT+0x11c>
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_ADC_Start_IT+0x1ac>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_ADC_Start_IT+0x132>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_ADC_Start_IT+0x1b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d136      	bne.n	800256c <HAL_ADC_Start_IT+0x194>
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_ADC_Start_IT+0x1ac>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d130      	bne.n	800256c <HAL_ADC_Start_IT+0x194>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d129      	bne.n	800256c <HAL_ADC_Start_IT+0x194>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e020      	b.n	800256c <HAL_ADC_Start_IT+0x194>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_ADC_Start_IT+0x1b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d11b      	bne.n	800256c <HAL_ADC_Start_IT+0x194>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_ADC_Start_IT+0x194>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e00b      	b.n	800256c <HAL_ADC_Start_IT+0x194>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
 800256c:	2300      	movs	r3, #0
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008
 8002580:	431bde83 	.word	0x431bde83
 8002584:	40012300 	.word	0x40012300
 8002588:	40012000 	.word	0x40012000
 800258c:	40012100 	.word	0x40012100
 8002590:	40012200 	.word	0x40012200

08002594 <HAL_ADC_GetValue>:
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_ADC_ConfigChannel>:
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x1c>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e113      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x244>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d925      	bls.n	8002628 <HAL_ADC_ConfigChannel+0x78>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	3b1e      	subs	r3, #30
 80025f2:	2207      	movs	r2, #7
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43da      	mvns	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	400a      	ands	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	4603      	mov	r3, r0
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4403      	add	r3, r0
 800261a:	3b1e      	subs	r3, #30
 800261c:	409a      	lsls	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	e022      	b.n	800266e <HAL_ADC_ConfigChannel+0xbe>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6919      	ldr	r1, [r3, #16]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	2207      	movs	r2, #7
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	400a      	ands	r2, r1
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	4603      	mov	r3, r0
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4403      	add	r3, r0
 8002664:	409a      	lsls	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d824      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x110>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b05      	subs	r3, #5
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b05      	subs	r3, #5
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
 80026be:	e04c      	b.n	800275a <HAL_ADC_ConfigChannel+0x1aa>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d824      	bhi.n	8002712 <HAL_ADC_ConfigChannel+0x162>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b23      	subs	r3, #35	; 0x23
 80026da:	221f      	movs	r2, #31
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b23      	subs	r3, #35	; 0x23
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
 8002710:	e023      	b.n	800275a <HAL_ADC_ConfigChannel+0x1aa>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3b41      	subs	r3, #65	; 0x41
 8002724:	221f      	movs	r2, #31
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b41      	subs	r3, #65	; 0x41
 800274e:	fa00 f203 	lsl.w	r2, r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_ADC_ConfigChannel+0x250>)
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a28      	ldr	r2, [pc, #160]	; (8002804 <HAL_ADC_ConfigChannel+0x254>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10f      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x1d8>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b12      	cmp	r3, #18
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x1d8>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_ADC_ConfigChannel+0x254>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12b      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_ADC_ConfigChannel+0x258>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x1f4>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d122      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_ConfigChannel+0x258>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x23a>
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_ADC_ConfigChannel+0x25c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_ADC_ConfigChannel+0x260>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	0c9a      	lsrs	r2, r3, #18
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x234>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_ConfigChannel+0x22e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027f2:	2300      	movs	r3, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012300 	.word	0x40012300
 8002804:	40012000 	.word	0x40012000
 8002808:	10000012 	.word	0x10000012
 800280c:	20000008 	.word	0x20000008
 8002810:	431bde83 	.word	0x431bde83

08002814 <ADC_Init>:
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <ADC_Init+0x1f0>)
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <ADC_Init+0x1f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <ADC_Init+0xde>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	e00f      	b.n	8002912 <ADC_Init+0xfe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0202 	bic.w	r2, r2, #2
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6899      	ldr	r1, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7e1b      	ldrb	r3, [r3, #24]
 800292c:	005a      	lsls	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <ADC_Init+0x164>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	3b01      	subs	r3, #1
 800296c:	035a      	lsls	r2, r3, #13
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e007      	b.n	8002988 <ADC_Init+0x174>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	051a      	lsls	r2, r3, #20
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ca:	025a      	lsls	r2, r3, #9
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	029a      	lsls	r2, r3, #10
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012300 	.word	0x40012300
 8002a08:	0f000001 	.word	0x0f000001

08002a0c <__NVIC_SetPriorityGrouping>:
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff29 	bl	8002a0c <__NVIC_SetPriorityGrouping>
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f7ff ff3e 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <__NVIC_EnableIRQ>
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_DAC_Init>:
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_DAC_Init+0x12>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e014      	b.n	8002c6a <HAL_DAC_Init+0x3c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	791b      	ldrb	r3, [r3, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_DAC_Init+0x28>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	715a      	strb	r2, [r3, #5]
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe f8a5 	bl	8000da0 <HAL_DAC_MspInit>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	711a      	strb	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	711a      	strb	r2, [r3, #4]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_DAC_Start_DMA>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	795b      	ldrb	r3, [r3, #5]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_DAC_Start_DMA+0x22>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0ab      	b.n	8002dee <HAL_DAC_Start_DMA+0x17a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	715a      	strb	r2, [r3, #5]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	711a      	strb	r2, [r3, #4]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12f      	bne.n	8002d08 <HAL_DAC_Start_DMA+0x94>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_DAC_Start_DMA+0x184>)
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_DAC_Start_DMA+0x188>)
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a50      	ldr	r2, [pc, #320]	; (8002e00 <HAL_DAC_Start_DMA+0x18c>)
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d013      	beq.n	8002cfe <HAL_DAC_Start_DMA+0x8a>
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d845      	bhi.n	8002d68 <HAL_DAC_Start_DMA+0xf4>
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_DAC_Start_DMA+0x76>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d005      	beq.n	8002cf4 <HAL_DAC_Start_DMA+0x80>
 8002ce8:	e03e      	b.n	8002d68 <HAL_DAC_Start_DMA+0xf4>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e03c      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e037      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3310      	adds	r3, #16
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e032      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a3d      	ldr	r2, [pc, #244]	; (8002e04 <HAL_DAC_Start_DMA+0x190>)
 8002d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a3c      	ldr	r2, [pc, #240]	; (8002e08 <HAL_DAC_Start_DMA+0x194>)
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_DAC_Start_DMA+0x198>)
 8002d1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d013      	beq.n	8002d5e <HAL_DAC_Start_DMA+0xea>
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d817      	bhi.n	8002d6c <HAL_DAC_Start_DMA+0xf8>
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_DAC_Start_DMA+0xd6>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d005      	beq.n	8002d54 <HAL_DAC_Start_DMA+0xe0>
 8002d48:	e010      	b.n	8002d6c <HAL_DAC_Start_DMA+0xf8>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e00c      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3318      	adds	r3, #24
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e007      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	331c      	adds	r3, #28
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e002      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_DAC_Start_DMA+0xfa>
 8002d6c:	bf00      	nop
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_DAC_Start_DMA+0x124>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6898      	ldr	r0, [r3, #8]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	f000 f9e5 	bl	800315c <HAL_DMA_Start_IT>
 8002d92:	4603      	mov	r3, r0
 8002d94:	75fb      	strb	r3, [r7, #23]
 8002d96:	e010      	b.n	8002dba <HAL_DAC_Start_DMA+0x146>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68d8      	ldr	r0, [r3, #12]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	f000 f9d3 	bl	800315c <HAL_DMA_Start_IT>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	715a      	strb	r2, [r3, #5]
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_DAC_Start_DMA+0x16c>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e005      	b.n	8002dec <HAL_DAC_Start_DMA+0x178>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	08002eeb 	.word	0x08002eeb
 8002dfc:	08002f0d 	.word	0x08002f0d
 8002e00:	08002f29 	.word	0x08002f29
 8002e04:	08002f93 	.word	0x08002f93
 8002e08:	08002fb5 	.word	0x08002fb5
 8002e0c:	08002fd1 	.word	0x08002fd1

08002e10 <HAL_DAC_ConvCpltCallbackCh1>:
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_DAC_ErrorCallbackCh1>:
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_DAC_ConfigChannel>:
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	795b      	ldrb	r3, [r3, #5]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_DAC_ConfigChannel+0x18>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e03c      	b.n	8002ede <HAL_DAC_ConfigChannel+0x92>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	715a      	strb	r2, [r3, #5]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	711a      	strb	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	22c0      	movs	r2, #192	; 0xc0
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	711a      	strb	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
 8002edc:	2300      	movs	r3, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <DAC_DMAConvCpltCh1>:
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ff89 	bl	8002e10 <HAL_DAC_ConvCpltCallbackCh1>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	711a      	strb	r2, [r3, #4]
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DAC_DMAHalfConvCpltCh1>:
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ff82 	bl	8002e24 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <DAC_DMAErrorCh1>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	611a      	str	r2, [r3, #16]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff ff78 	bl	8002e38 <HAL_DAC_ErrorCallbackCh1>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	711a      	strb	r2, [r3, #4]
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_DACEx_ConvCpltCallbackCh2>:
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_DACEx_ErrorCallbackCh2>:
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <DAC_DMAConvCpltCh2>:
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff ffd8 	bl	8002f56 <HAL_DACEx_ConvCpltCallbackCh2>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	711a      	strb	r2, [r3, #4]
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <DAC_DMAHalfConvCpltCh2>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ffd1 	bl	8002f6a <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <DAC_DMAErrorCh2>:
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ffc7 	bl	8002f7e <HAL_DACEx_ErrorCallbackCh2>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	711a      	strb	r2, [r3, #4]
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_DMA_Init>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	f7ff f970 	bl	80022f0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_DMA_Init+0x1c>
 8003018:	2301      	movs	r3, #1
 800301a:	e099      	b.n	8003150 <HAL_DMA_Init+0x150>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e00f      	b.n	800305e <HAL_DMA_Init+0x5e>
 800303e:	f7ff f957 	bl	80022f0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d908      	bls.n	800305e <HAL_DMA_Init+0x5e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800305a:	2303      	movs	r3, #3
 800305c:	e078      	b.n	8003150 <HAL_DMA_Init+0x150>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e8      	bne.n	800303e <HAL_DMA_Init+0x3e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_DMA_Init+0x158>)
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d107      	bne.n	80030c8 <HAL_DMA_Init+0xc8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4313      	orrs	r3, r2
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d117      	bne.n	8003122 <HAL_DMA_Init+0x122>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <HAL_DMA_Init+0x122>
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fb01 	bl	800370c <DMA_CheckFifoParam>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Init+0x122>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800311e:	2301      	movs	r3, #1
 8003120:	e016      	b.n	8003150 <HAL_DMA_Init+0x150>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	615a      	str	r2, [r3, #20]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fab8 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 8003130:	4603      	mov	r3, r0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	223f      	movs	r2, #63	; 0x3f
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800314e:	2300      	movs	r3, #0
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	f010803f 	.word	0xf010803f

0800315c <HAL_DMA_Start_IT>:
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Start_IT+0x26>
 800317e:	2302      	movs	r3, #2
 8003180:	e040      	b.n	8003204 <HAL_DMA_Start_IT+0xa8>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d12f      	bne.n	80031f6 <HAL_DMA_Start_IT+0x9a>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa4a 	bl	8003644 <DMA_SetConfig>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0216 	orr.w	r2, r2, #22
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x88>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xa6>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Abort>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	f7ff f869 	bl	80022f0 <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x32>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800323a:	2301      	movs	r3, #1
 800323c:	e052      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0216 	bic.w	r2, r2, #22
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325c:	615a      	str	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_DMA_Abort+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Abort+0x72>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e013      	b.n	80032b8 <HAL_DMA_Abort+0xac>
 8003290:	f7ff f82e 	bl	80022f0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d90c      	bls.n	80032b8 <HAL_DMA_Abort+0xac>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80032b4:	2303      	movs	r3, #3
 80032b6:	e015      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e4      	bne.n	8003290 <HAL_DMA_Abort+0x84>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	223f      	movs	r2, #63	; 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80032e2:	2300      	movs	r3, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort_IT>:
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d004      	beq.n	800330a <HAL_DMA_Abort_IT+0x1e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
 8003306:	2301      	movs	r3, #1
 8003308:	e00c      	b.n	8003324 <HAL_DMA_Abort_IT+0x38>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	2300      	movs	r3, #0
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_DMA_IRQHandler>:
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	4b8e      	ldr	r3, [pc, #568]	; (8003578 <HAL_DMA_IRQHandler+0x248>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8e      	ldr	r2, [pc, #568]	; (800357c <HAL_DMA_IRQHandler+0x24c>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2208      	movs	r2, #8
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2204      	movs	r2, #4
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03c      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2210      	movs	r2, #16
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x142>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0x130>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e01f      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e016      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_DMA_IRQHandler+0x160>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0208 	bic.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2220      	movs	r2, #32
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808f 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8087 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2220      	movs	r2, #32
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d136      	bne.n	8003548 <HAL_DMA_IRQHandler+0x218>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0216 	bic.w	r2, r2, #22
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_DMA_IRQHandler+0x1da>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_DMA_IRQHandler+0x1ea>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	223f      	movs	r2, #63	; 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07e      	beq.n	800363c <HAL_DMA_IRQHandler+0x30c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e079      	b.n	800363c <HAL_DMA_IRQHandler+0x30c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_IRQHandler+0x262>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_DMA_IRQHandler+0x250>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	2b00      	cmp	r3, #0
 800356a:	d031      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e02c      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 8003576:	bf00      	nop
 8003578:	20000008 	.word	0x20000008
 800357c:	1b4e81b5 	.word	0x1b4e81b5
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e01e      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x290>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0210 	bic.w	r2, r2, #16
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d032      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d022      	beq.n	800362a <HAL_DMA_IRQHandler+0x2fa>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2205      	movs	r2, #5
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d307      	bcc.n	8003618 <HAL_DMA_IRQHandler+0x2e8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f2      	bne.n	80035fc <HAL_DMA_IRQHandler+0x2cc>
 8003616:	e000      	b.n	800361a <HAL_DMA_IRQHandler+0x2ea>
 8003618:	bf00      	nop
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e000      	b.n	800363e <HAL_DMA_IRQHandler+0x30e>
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <DMA_SetConfig>:
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d108      	bne.n	8003684 <DMA_SetConfig+0x40>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e007      	b.n	8003694 <DMA_SetConfig+0x50>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_CalcBaseAndBitshift>:
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d909      	bls.n	80036e2 <DMA_CalcBaseAndBitshift+0x42>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	659a      	str	r2, [r3, #88]	; 0x58
 80036e0:	e007      	b.n	80036f2 <DMA_CalcBaseAndBitshift+0x52>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	aaaaaaab 	.word	0xaaaaaaab
 8003708:	08007d34 	.word	0x08007d34

0800370c <DMA_CheckFifoParam>:
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d856      	bhi.n	80037da <DMA_CheckFifoParam+0xce>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037db 	.word	0x080037db
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d046      	beq.n	80037de <DMA_CheckFifoParam+0xd2>
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
 8003754:	e043      	b.n	80037de <DMA_CheckFifoParam+0xd2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375e:	d140      	bne.n	80037e2 <DMA_CheckFifoParam+0xd6>
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e03d      	b.n	80037e2 <DMA_CheckFifoParam+0xd6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d837      	bhi.n	80037e6 <DMA_CheckFifoParam+0xda>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e030      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <DMA_CheckFifoParam+0xde>
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e022      	b.n	80037ea <DMA_CheckFifoParam+0xde>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0xe2>
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e01c      	b.n	80037ee <DMA_CheckFifoParam+0xe2>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d903      	bls.n	80037c2 <DMA_CheckFifoParam+0xb6>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d003      	beq.n	80037c8 <DMA_CheckFifoParam+0xbc>
 80037c0:	e018      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e015      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <DMA_CheckFifoParam+0xe6>
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e00b      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
 80037da:	bf00      	nop
 80037dc:	e00a      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037de:	bf00      	nop
 80037e0:	e008      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037e2:	bf00      	nop
 80037e4:	e006      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
 80037f2:	bf00      	nop
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_GPIO_Init>:
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e165      	b.n	8003aec <HAL_GPIO_Init+0x2e8>
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	f040 8154 	bne.w	8003ae6 <HAL_GPIO_Init+0x2e2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d005      	beq.n	8003856 <HAL_GPIO_Init+0x52>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d130      	bne.n	80038b8 <HAL_GPIO_Init+0xb4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0201 	and.w	r2, r3, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d017      	beq.n	80038f4 <HAL_GPIO_Init+0xf0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d123      	bne.n	8003948 <HAL_GPIO_Init+0x144>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	08da      	lsrs	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3208      	adds	r2, #8
 8003908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	220f      	movs	r2, #15
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0203 	and.w	r2, r3, #3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80ae 	beq.w	8003ae6 <HAL_GPIO_Init+0x2e2>
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b5d      	ldr	r3, [pc, #372]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <HAL_GPIO_Init+0x300>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_GPIO_Init+0x300>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_GPIO_Init+0x304>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4f      	ldr	r2, [pc, #316]	; (8003b0c <HAL_GPIO_Init+0x308>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d025      	beq.n	8003a1e <HAL_GPIO_Init+0x21a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4e      	ldr	r2, [pc, #312]	; (8003b10 <HAL_GPIO_Init+0x30c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <HAL_GPIO_Init+0x216>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4d      	ldr	r2, [pc, #308]	; (8003b14 <HAL_GPIO_Init+0x310>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_Init+0x212>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4c      	ldr	r2, [pc, #304]	; (8003b18 <HAL_GPIO_Init+0x314>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4b      	ldr	r2, [pc, #300]	; (8003b1c <HAL_GPIO_Init+0x318>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x20a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <HAL_GPIO_Init+0x31c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x206>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a49      	ldr	r2, [pc, #292]	; (8003b24 <HAL_GPIO_Init+0x320>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x202>
 8003a02:	2306      	movs	r3, #6
 8003a04:	e00c      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a06:	2307      	movs	r3, #7
 8003a08:	e00a      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a0a:	2305      	movs	r3, #5
 8003a0c:	e008      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_GPIO_Init+0x21c>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f002 0203 	and.w	r2, r2, #3
 8003a26:	0092      	lsls	r2, r2, #2
 8003a28:	4093      	lsls	r3, r2
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	4935      	ldr	r1, [pc, #212]	; (8003b08 <HAL_GPIO_Init+0x304>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	3302      	adds	r3, #2
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x25e>
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6093      	str	r3, [r2, #8]
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x288>
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	60d3      	str	r3, [r2, #12]
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2b2>
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	6053      	str	r3, [r2, #4]
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x2dc>
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	f67f ae96 	bls.w	8003820 <HAL_GPIO_Init+0x1c>
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40021400 	.word	0x40021400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	40013c00 	.word	0x40013c00

08003b2c <HAL_GPIO_ReadPin>:
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	887b      	ldrh	r3, [r7, #2]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_GPIO_ReadPin+0x1e>
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e001      	b.n	8003b4e <HAL_GPIO_ReadPin+0x22>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_GPIO_WritePin>:
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	707b      	strb	r3, [r7, #1]
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_WritePin+0x1e>
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x26>
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	041a      	lsls	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	619a      	str	r2, [r3, #24]
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_GPIO_TogglePin>:
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	807b      	strh	r3, [r7, #2]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	041a      	lsls	r2, r3, #16
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	400b      	ands	r3, r1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_GPIO_EXTI_IRQHandler>:
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	6153      	str	r3, [r2, #20]
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fd fcf6 	bl	80015d4 <HAL_GPIO_EXTI_Callback>
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40013c00 	.word	0x40013c00

08003bf4 <HAL_I2C_Init>:
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Init+0x12>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e12b      	b.n	8003e5e <HAL_I2C_Init+0x26a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_I2C_Init+0x2c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fb12 	bl	8001244 <HAL_I2C_MspInit>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f000 fd6a 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a81      	ldr	r2, [pc, #516]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d807      	bhi.n	8003c78 <HAL_I2C_Init+0x84>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a80      	ldr	r2, [pc, #512]	; (8003e6c <HAL_I2C_Init+0x278>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e006      	b.n	8003c86 <HAL_I2C_Init+0x92>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a7d      	ldr	r2, [pc, #500]	; (8003e70 <HAL_I2C_Init+0x27c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Init+0x9a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0e7      	b.n	8003e5e <HAL_I2C_Init+0x26a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <HAL_I2C_Init+0x280>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0c9b      	lsrs	r3, r3, #18
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a6a      	ldr	r2, [pc, #424]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d802      	bhi.n	8003cc8 <HAL_I2C_Init+0xd4>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e009      	b.n	8003cdc <HAL_I2C_Init+0xe8>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_I2C_Init+0x284>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	3301      	adds	r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6213      	str	r3, [r2, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	495c      	ldr	r1, [pc, #368]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d819      	bhi.n	8003d30 <HAL_I2C_Init+0x13c>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e59      	subs	r1, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d10:	400b      	ands	r3, r1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_I2C_Init+0x138>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e59      	subs	r1, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2a:	e051      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e04f      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <HAL_I2C_Init+0x168>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e58      	subs	r0, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e012      	b.n	8003d82 <HAL_I2C_Init+0x18e>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Init+0x196>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e022      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10e      	bne.n	8003db0 <HAL_I2C_Init+0x1bc>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1e58      	subs	r0, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	440b      	add	r3, r1
 8003da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da4:	3301      	adds	r3, #1
 8003da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	e00f      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	0099      	lsls	r1, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	6809      	ldr	r1, [r1, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61cb      	str	r3, [r1, #28]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6911      	ldr	r1, [r2, #16]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6093      	str	r3, [r2, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	000186a0 	.word	0x000186a0
 8003e6c:	001e847f 	.word	0x001e847f
 8003e70:	003d08ff 	.word	0x003d08ff
 8003e74:	431bde83 	.word	0x431bde83
 8003e78:	10624dd3 	.word	0x10624dd3

08003e7c <HAL_I2C_Mem_Write>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	817b      	strh	r3, [r7, #10]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	813b      	strh	r3, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
 8003e96:	f7fe fa2b 	bl	80022f0 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	f040 80d9 	bne.w	800405c <HAL_I2C_Mem_Write+0x1e0>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2319      	movs	r3, #25
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	496d      	ldr	r1, [pc, #436]	; (8004068 <HAL_I2C_Mem_Write+0x1ec>)
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f971 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Mem_Write+0x48>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0cc      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_Mem_Write+0x56>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0c5      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d007      	beq.n	8003ef8 <HAL_I2C_Mem_Write+0x7c>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2221      	movs	r2, #33	; 0x21
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	; 0x28
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_I2C_Mem_Write+0x1f0>)
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f3a:	88f8      	ldrh	r0, [r7, #6]
 8003f3c:	893a      	ldrh	r2, [r7, #8]
 8003f3e:	8979      	ldrh	r1, [r7, #10]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4603      	mov	r3, r0
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f890 	bl	8004070 <I2C_RequestMemoryWrite>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d052      	beq.n	8003ffc <HAL_I2C_Mem_Write+0x180>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e081      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9f2 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00d      	beq.n	8003f86 <HAL_I2C_Mem_Write+0x10a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d107      	bne.n	8003f82 <HAL_I2C_Mem_Write+0x106>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d11b      	bne.n	8003ffc <HAL_I2C_Mem_Write+0x180>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_I2C_Mem_Write+0x180>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1aa      	bne.n	8003f5a <HAL_I2C_Mem_Write+0xde>
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f9de 	bl	80043ca <I2C_WaitOnBTFFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <HAL_I2C_Mem_Write+0x1b4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b04      	cmp	r3, #4
 800401a:	d107      	bne.n	800402c <HAL_I2C_Mem_Write+0x1b0>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	2301      	movs	r3, #1
 800402e:	e016      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_I2C_Mem_Write+0x1e2>
 800405c:	2302      	movs	r3, #2
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	00100002 	.word	0x00100002
 800406c:	ffff0000 	.word	0xffff0000

08004070 <I2C_RequestMemoryWrite>:
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f878 	bl	800419c <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <I2C_RequestMemoryWrite+0x5e>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d103      	bne.n	80040ca <I2C_RequestMemoryWrite+0x5a>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
 80040ca:	2303      	movs	r3, #3
 80040cc:	e05f      	b.n	800418e <I2C_RequestMemoryWrite+0x11e>
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040dc:	611a      	str	r2, [r3, #16]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	492d      	ldr	r1, [pc, #180]	; (8004198 <I2C_RequestMemoryWrite+0x128>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f8b0 	bl	800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_RequestMemoryWrite+0x84>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e04c      	b.n	800418e <I2C_RequestMemoryWrite+0x11e>
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410c:	6a39      	ldr	r1, [r7, #32]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f91a 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <I2C_RequestMemoryWrite+0xc6>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	2b04      	cmp	r3, #4
 8004120:	d107      	bne.n	8004132 <I2C_RequestMemoryWrite+0xc2>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	2301      	movs	r3, #1
 8004134:	e02b      	b.n	800418e <I2C_RequestMemoryWrite+0x11e>
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <I2C_RequestMemoryWrite+0xd8>
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	e021      	b.n	800418c <I2C_RequestMemoryWrite+0x11c>
 8004148:	893b      	ldrh	r3, [r7, #8]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	b29b      	uxth	r3, r3
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	6a39      	ldr	r1, [r7, #32]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f8f4 	bl	8004348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <I2C_RequestMemoryWrite+0x112>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b04      	cmp	r3, #4
 800416c:	d107      	bne.n	800417e <I2C_RequestMemoryWrite+0x10e>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	2301      	movs	r3, #1
 8004180:	e005      	b.n	800418e <I2C_RequestMemoryWrite+0x11e>
 8004182:	893b      	ldrh	r3, [r7, #8]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]
 800418c:	2300      	movs	r3, #0
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	00010002 	.word	0x00010002

0800419c <I2C_WaitOnFlagUntilTimeout>:
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
 80041ac:	e025      	b.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d021      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
 80041b6:	f7fe f89b 	bl	80022f0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d116      	bne.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x5e>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041f6:	2301      	movs	r3, #1
 80041f8:	e023      	b.n	8004242 <I2C_WaitOnFlagUntilTimeout+0xa6>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10d      	bne.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	e00c      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d0b6      	beq.n	80041ae <I2C_WaitOnFlagUntilTimeout+0x12>
 8004240:	2300      	movs	r3, #0
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	e051      	b.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d123      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004282:	615a      	str	r2, [r3, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042ae:	2301      	movs	r3, #1
 80042b0:	e046      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d021      	beq.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80042ba:	f7fe f819 	bl	80022f0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042fa:	2301      	movs	r3, #1
 80042fc:	e020      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10c      	bne.n	8004322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e00b      	b.n	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d18d      	bne.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800433e:	2300      	movs	r3, #0
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	e02d      	b.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f878 	bl	800444c <I2C_IsAcknowledgeFailed>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8004362:	2301      	movs	r3, #1
 8004364:	e02d      	b.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d021      	beq.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800436e:	f7fd ffbf 	bl	80022f0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043ae:	2301      	movs	r3, #1
 80043b0:	e007      	b.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d1ca      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80043c0:	2300      	movs	r3, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnBTFFlagUntilTimeout>:
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	e02d      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f837 	bl	800444c <I2C_IsAcknowledgeFailed>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e02d      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d021      	beq.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80043f0:	f7fd ff7e 	bl	80022f0 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d302      	bcc.n	8004406 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d1ca      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8004442:	2300      	movs	r3, #0
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_IsAcknowledgeFailed>:
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004462:	d11b      	bne.n	800449c <I2C_IsAcknowledgeFailed+0x50>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800446c:	615a      	str	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <I2C_IsAcknowledgeFailed+0x52>
 800449c:	2300      	movs	r3, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_PWREx_EnableOverDrive>:
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_PWREx_EnableOverDrive+0x90>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_PWREx_EnableOverDrive+0x90>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_PWREx_EnableOverDrive+0x90>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <HAL_PWREx_EnableOverDrive+0x94>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f7fd ff0a 	bl	80022f0 <HAL_GetTick>
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	e009      	b.n	80044f4 <HAL_PWREx_EnableOverDrive+0x48>
 80044e0:	f7fd ff06 	bl	80022f0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ee:	d901      	bls.n	80044f4 <HAL_PWREx_EnableOverDrive+0x48>
 80044f0:	2303      	movs	r3, #3
 80044f2:	e01f      	b.n	8004534 <HAL_PWREx_EnableOverDrive+0x88>
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_PWREx_EnableOverDrive+0x98>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004500:	d1ee      	bne.n	80044e0 <HAL_PWREx_EnableOverDrive+0x34>
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f7fd fef2 	bl	80022f0 <HAL_GetTick>
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	e009      	b.n	8004524 <HAL_PWREx_EnableOverDrive+0x78>
 8004510:	f7fd feee 	bl	80022f0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800451e:	d901      	bls.n	8004524 <HAL_PWREx_EnableOverDrive+0x78>
 8004520:	2303      	movs	r3, #3
 8004522:	e007      	b.n	8004534 <HAL_PWREx_EnableOverDrive+0x88>
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_PWREx_EnableOverDrive+0x98>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004530:	d1ee      	bne.n	8004510 <HAL_PWREx_EnableOverDrive+0x64>
 8004532:	2300      	movs	r3, #0
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40023800 	.word	0x40023800
 8004540:	420e0040 	.word	0x420e0040
 8004544:	40007000 	.word	0x40007000
 8004548:	420e0044 	.word	0x420e0044

0800454c <HAL_RCC_ClockConfig>:
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
 800455c:	2301      	movs	r3, #1
 800455e:	e0cc      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90c      	bls.n	8004588 <HAL_RCC_ClockConfig+0x3c>
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x3c>
 8004584:	2301      	movs	r3, #1
 8004586:	e0b8      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x8a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x60>
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045aa:	6093      	str	r3, [r2, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x78>
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d044      	beq.n	800466c <HAL_RCC_ClockConfig+0x120>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xae>
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d119      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d003      	beq.n	800460a <HAL_RCC_ClockConfig+0xbe>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xce>
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
 8004616:	2301      	movs	r3, #1
 8004618:	e06f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
 8004626:	2301      	movs	r3, #1
 8004628:	e067      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]
 800463c:	f7fd fe58 	bl	80022f0 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x10e>
 8004644:	f7fd fe54 	bl	80022f0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x10e>
 8004656:	2303      	movs	r3, #3
 8004658:	e04f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf8>
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d20c      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x148>
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x148>
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x166>
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x186>
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
 80046d2:	f000 f855 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	5ccb      	ldrb	r3, [r1, r3]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd fdb8 	bl	8002268 <HAL_InitTick>
 80046f8:	2300      	movs	r3, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00
 8004708:	40023800 	.word	0x40023800
 800470c:	08007d1c 	.word	0x08007d1c
 8004710:	20000008 	.word	0x20000008
 8004714:	2000000c 	.word	0x2000000c

08004718 <HAL_RCC_GetHCLKFreq>:
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000008 	.word	0x20000008

08004730 <HAL_RCC_GetPCLK1Freq>:
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	08007d2c 	.word	0x08007d2c

08004758 <HAL_RCC_GetPCLK2Freq>:
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
 800475c:	f7ff ffdc 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0b5b      	lsrs	r3, r3, #13
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK2Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	08007d2c 	.word	0x08007d2c

08004780 <HAL_RCC_GetSysClockFreq>:
 8004780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004784:	b0ae      	sub	sp, #184	; 0xb8
 8004786:	af00      	add	r7, sp, #0
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a6:	4bcb      	ldr	r3, [pc, #812]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	f200 8206 	bhi.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x440>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	08004bc1 	.word	0x08004bc1
 80047c4:	08004bc1 	.word	0x08004bc1
 80047c8:	08004bc1 	.word	0x08004bc1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	08004bc1 	.word	0x08004bc1
 80047d4:	08004bc1 	.word	0x08004bc1
 80047d8:	08004bc1 	.word	0x08004bc1
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004bc1 	.word	0x08004bc1
 80047e4:	08004bc1 	.word	0x08004bc1
 80047e8:	08004bc1 	.word	0x08004bc1
 80047ec:	080049f1 	.word	0x080049f1
 80047f0:	4bb9      	ldr	r3, [pc, #740]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x358>)
 80047f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f6:	e1e7      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x448>
 80047f8:	4bb8      	ldr	r3, [pc, #736]	; (8004adc <HAL_RCC_GetSysClockFreq+0x35c>)
 80047fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047fe:	e1e3      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x448>
 8004800:	4bb4      	ldr	r3, [pc, #720]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800480c:	4bb1      	ldr	r3, [pc, #708]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d071      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x17c>
 8004818:	4bae      	ldr	r3, [pc, #696]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	2200      	movs	r2, #0
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004824:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800482c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004830:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004834:	2300      	movs	r3, #0
 8004836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800483a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800483e:	4622      	mov	r2, r4
 8004840:	462b      	mov	r3, r5
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	0159      	lsls	r1, r3, #5
 800484c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004850:	0150      	lsls	r0, r2, #5
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4621      	mov	r1, r4
 8004858:	1a51      	subs	r1, r2, r1
 800485a:	6439      	str	r1, [r7, #64]	; 0x40
 800485c:	4629      	mov	r1, r5
 800485e:	eb63 0301 	sbc.w	r3, r3, r1
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004870:	4649      	mov	r1, r9
 8004872:	018b      	lsls	r3, r1, #6
 8004874:	4641      	mov	r1, r8
 8004876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800487a:	4641      	mov	r1, r8
 800487c:	018a      	lsls	r2, r1, #6
 800487e:	4641      	mov	r1, r8
 8004880:	1a51      	subs	r1, r2, r1
 8004882:	63b9      	str	r1, [r7, #56]	; 0x38
 8004884:	4649      	mov	r1, r9
 8004886:	eb63 0301 	sbc.w	r3, r3, r1
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004898:	4649      	mov	r1, r9
 800489a:	00cb      	lsls	r3, r1, #3
 800489c:	4641      	mov	r1, r8
 800489e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a2:	4641      	mov	r1, r8
 80048a4:	00ca      	lsls	r2, r1, #3
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4622      	mov	r2, r4
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 80048b2:	462b      	mov	r3, r5
 80048b4:	460a      	mov	r2, r1
 80048b6:	eb42 0303 	adc.w	r3, r2, r3
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048c8:	4629      	mov	r1, r5
 80048ca:	024b      	lsls	r3, r1, #9
 80048cc:	4621      	mov	r1, r4
 80048ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d2:	4621      	mov	r1, r4
 80048d4:	024a      	lsls	r2, r1, #9
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048ec:	f7fc f816 	bl	800091c <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048fa:	e067      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x24c>
 80048fc:	4b75      	ldr	r3, [pc, #468]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004908:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800490c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004914:	67bb      	str	r3, [r7, #120]	; 0x78
 8004916:	2300      	movs	r3, #0
 8004918:	67fb      	str	r3, [r7, #124]	; 0x7c
 800491a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800491e:	4622      	mov	r2, r4
 8004920:	462b      	mov	r3, r5
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	0159      	lsls	r1, r3, #5
 800492c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004930:	0150      	lsls	r0, r2, #5
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4621      	mov	r1, r4
 8004938:	1a51      	subs	r1, r2, r1
 800493a:	62b9      	str	r1, [r7, #40]	; 0x28
 800493c:	4629      	mov	r1, r5
 800493e:	eb63 0301 	sbc.w	r3, r3, r1
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004950:	4649      	mov	r1, r9
 8004952:	018b      	lsls	r3, r1, #6
 8004954:	4641      	mov	r1, r8
 8004956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800495a:	4641      	mov	r1, r8
 800495c:	018a      	lsls	r2, r1, #6
 800495e:	4641      	mov	r1, r8
 8004960:	ebb2 0a01 	subs.w	sl, r2, r1
 8004964:	4649      	mov	r1, r9
 8004966:	eb63 0b01 	sbc.w	fp, r3, r1
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004976:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800497a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800497e:	4692      	mov	sl, r2
 8004980:	469b      	mov	fp, r3
 8004982:	4623      	mov	r3, r4
 8004984:	eb1a 0303 	adds.w	r3, sl, r3
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	462b      	mov	r3, r5
 800498c:	eb4b 0303 	adc.w	r3, fp, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800499e:	4629      	mov	r1, r5
 80049a0:	028b      	lsls	r3, r1, #10
 80049a2:	4621      	mov	r1, r4
 80049a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a8:	4621      	mov	r1, r4
 80049aa:	028a      	lsls	r2, r1, #10
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049b4:	2200      	movs	r2, #0
 80049b6:	673b      	str	r3, [r7, #112]	; 0x70
 80049b8:	677a      	str	r2, [r7, #116]	; 0x74
 80049ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049be:	f7fb ffad 	bl	800091c <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4613      	mov	r3, r2
 80049c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049cc:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049ee:	e0eb      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x448>
 80049f0:	4b38      	ldr	r3, [pc, #224]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049fc:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d06b      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x360>
 8004a08:	4b32      	ldr	r3, [pc, #200]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	2200      	movs	r2, #0
 8004a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a24:	4622      	mov	r2, r4
 8004a26:	462b      	mov	r3, r5
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	0159      	lsls	r1, r3, #5
 8004a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a36:	0150      	lsls	r0, r2, #5
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	1a51      	subs	r1, r2, r1
 8004a40:	61b9      	str	r1, [r7, #24]
 8004a42:	4629      	mov	r1, r5
 8004a44:	eb63 0301 	sbc.w	r3, r3, r1
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a56:	4659      	mov	r1, fp
 8004a58:	018b      	lsls	r3, r1, #6
 8004a5a:	4651      	mov	r1, sl
 8004a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a60:	4651      	mov	r1, sl
 8004a62:	018a      	lsls	r2, r1, #6
 8004a64:	4651      	mov	r1, sl
 8004a66:	ebb2 0801 	subs.w	r8, r2, r1
 8004a6a:	4659      	mov	r1, fp
 8004a6c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a84:	4690      	mov	r8, r2
 8004a86:	4699      	mov	r9, r3
 8004a88:	4623      	mov	r3, r4
 8004a8a:	eb18 0303 	adds.w	r3, r8, r3
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	462b      	mov	r3, r5
 8004a92:	eb49 0303 	adc.w	r3, r9, r3
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	024b      	lsls	r3, r1, #9
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aae:	4621      	mov	r1, r4
 8004ab0:	024a      	lsls	r2, r1, #9
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aba:	2200      	movs	r2, #0
 8004abc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004abe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ac4:	f7fb ff2a 	bl	800091c <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad2:	e065      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x420>
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	007a1200 	.word	0x007a1200
 8004ae0:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4611      	mov	r1, r2
 8004aec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004af0:	653b      	str	r3, [r7, #80]	; 0x50
 8004af2:	2300      	movs	r3, #0
 8004af4:	657b      	str	r3, [r7, #84]	; 0x54
 8004af6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	0159      	lsls	r1, r3, #5
 8004b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0c:	0150      	lsls	r0, r2, #5
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4641      	mov	r1, r8
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	4649      	mov	r1, r9
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	018b      	lsls	r3, r1, #6
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b36:	4651      	mov	r1, sl
 8004b38:	018a      	lsls	r2, r1, #6
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	1a54      	subs	r4, r2, r1
 8004b3e:	4659      	mov	r1, fp
 8004b40:	eb63 0501 	sbc.w	r5, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	18e3      	adds	r3, r4, r3
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	464b      	mov	r3, r9
 8004b60:	eb45 0303 	adc.w	r3, r5, r3
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b88:	2200      	movs	r2, #0
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b92:	f7fb fec3 	bl	800091c <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0f1b      	lsrs	r3, r3, #28
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x448>
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc6:	bf00      	nop
 8004bc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	37b8      	adds	r7, #184	; 0xb8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	00f42400 	.word	0x00f42400

08004be0 <HAL_RCC_OscConfig>:
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x12>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e28d      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8083 	beq.w	8004d06 <HAL_RCC_OscConfig+0x126>
 8004c00:	4b94      	ldr	r3, [pc, #592]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d019      	beq.n	8004c40 <HAL_RCC_OscConfig+0x60>
 8004c0c:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d106      	bne.n	8004c26 <HAL_RCC_OscConfig+0x46>
 8004c18:	4b8e      	ldr	r3, [pc, #568]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x60>
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d112      	bne.n	8004c58 <HAL_RCC_OscConfig+0x78>
 8004c32:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x78>
 8004c40:	4b84      	ldr	r3, [pc, #528]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x124>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x124>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e25a      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x90>
 8004c62:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7b      	ldr	r2, [pc, #492]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xcc>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0xb4>
 8004c7a:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a75      	ldr	r2, [pc, #468]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a72      	ldr	r2, [pc, #456]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xcc>
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6b      	ldr	r2, [pc, #428]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xfc>
 8004cb4:	f7fd fb1c 	bl	80022f0 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xee>
 8004cbc:	f7fd fb18 	bl	80022f0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xee>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e21f      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004cce:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xdc>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x126>
 8004cdc:	f7fd fb08 	bl	80022f0 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x116>
 8004ce4:	f7fd fb04 	bl	80022f0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x116>
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e20b      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004cf6:	4b57      	ldr	r3, [pc, #348]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x104>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x126>
 8004d04:	bf00      	nop
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d06f      	beq.n	8004df2 <HAL_RCC_OscConfig+0x212>
 8004d12:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d017      	beq.n	8004d4e <HAL_RCC_OscConfig+0x16e>
 8004d1e:	4b4d      	ldr	r3, [pc, #308]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_OscConfig+0x156>
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RCC_OscConfig+0x16e>
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d11c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x19c>
 8004d42:	4b44      	ldr	r3, [pc, #272]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d116      	bne.n	8004d7c <HAL_RCC_OscConfig+0x19c>
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCC_OscConfig+0x186>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x186>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e1d3      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4937      	ldr	r1, [pc, #220]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
 8004d7a:	e03a      	b.n	8004df2 <HAL_RCC_OscConfig+0x212>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1e6>
 8004d84:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_OscConfig+0x278>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f7fd fab1 	bl	80022f0 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x1c4>
 8004d92:	f7fd faad 	bl	80022f0 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x1c4>
 8004da0:	2303      	movs	r3, #3
 8004da2:	e1b4      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1b2>
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4925      	ldr	r1, [pc, #148]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]
 8004dc4:	e015      	b.n	8004df2 <HAL_RCC_OscConfig+0x212>
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f7fd fa90 	bl	80022f0 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x206>
 8004dd4:	f7fd fa8c 	bl	80022f0 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x206>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e193      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004de6:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x1f4>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d036      	beq.n	8004e6c <HAL_RCC_OscConfig+0x28c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_RCC_OscConfig+0x254>
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <HAL_RCC_OscConfig+0x27c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f7fd fa70 	bl	80022f0 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x246>
 8004e14:	f7fd fa6c 	bl	80022f0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x246>
 8004e22:	2303      	movs	r3, #3
 8004e24:	e173      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x234>
 8004e32:	e01b      	b.n	8004e6c <HAL_RCC_OscConfig+0x28c>
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCC_OscConfig+0x27c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f7fd fa59 	bl	80022f0 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]
 8004e40:	e00e      	b.n	8004e60 <HAL_RCC_OscConfig+0x280>
 8004e42:	f7fd fa55 	bl	80022f0 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d907      	bls.n	8004e60 <HAL_RCC_OscConfig+0x280>
 8004e50:	2303      	movs	r3, #3
 8004e52:	e15c      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	42470000 	.word	0x42470000
 8004e5c:	42470e80 	.word	0x42470e80
 8004e60:	4b8a      	ldr	r3, [pc, #552]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ea      	bne.n	8004e42 <HAL_RCC_OscConfig+0x262>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8097 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x3c8>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
 8004e7e:	4b83      	ldr	r3, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10f      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2ca>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	4a7e      	ldr	r2, [pc, #504]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9a:	4b7c      	ldr	r3, [pc, #496]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
 8004eaa:	4b79      	ldr	r3, [pc, #484]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d118      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x308>
 8004eb6:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a75      	ldr	r2, [pc, #468]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	f7fd fa15 	bl	80022f0 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x2fc>
 8004eca:	f7fd fa11 	bl	80022f0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x2fc>
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e118      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004edc:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x2ea>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x31e>
 8004ef0:	4b66      	ldr	r3, [pc, #408]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
 8004efc:	e01c      	b.n	8004f38 <HAL_RCC_OscConfig+0x358>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x340>
 8004f06:	4b61      	ldr	r3, [pc, #388]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a60      	ldr	r2, [pc, #384]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	4b5e      	ldr	r3, [pc, #376]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a5d      	ldr	r2, [pc, #372]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0x358>
 8004f20:	4b5a      	ldr	r3, [pc, #360]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	4b57      	ldr	r3, [pc, #348]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a56      	ldr	r2, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	f023 0304 	bic.w	r3, r3, #4
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCC_OscConfig+0x38c>
 8004f40:	f7fd f9d6 	bl	80022f0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x37e>
 8004f48:	f7fd f9d2 	bl	80022f0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x37e>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0d7      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004f5e:	4b4b      	ldr	r3, [pc, #300]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ee      	beq.n	8004f48 <HAL_RCC_OscConfig+0x368>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x3b6>
 8004f6c:	f7fd f9c0 	bl	80022f0 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_OscConfig+0x3aa>
 8004f74:	f7fd f9bc 	bl	80022f0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x3aa>
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0c1      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ee      	bne.n	8004f74 <HAL_RCC_OscConfig+0x394>
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x3c8>
 8004f9c:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80ad 	beq.w	800510c <HAL_RCC_OscConfig+0x52c>
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d060      	beq.n	8005080 <HAL_RCC_OscConfig+0x4a0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d145      	bne.n	8005052 <HAL_RCC_OscConfig+0x472>
 8004fc6:	4b33      	ldr	r3, [pc, #204]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f7fd f990 	bl	80022f0 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x406>
 8004fd4:	f7fd f98c 	bl	80022f0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x406>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e093      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x3f4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	3b01      	subs	r3, #1
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	071b      	lsls	r3, r3, #28
 800501e:	491b      	ldr	r1, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f7fd f961 	bl	80022f0 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x464>
 8005032:	f7fd f95d 	bl	80022f0 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x464>
 8005040:	2303      	movs	r3, #3
 8005042:	e064      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x452>
 8005050:	e05c      	b.n	800510c <HAL_RCC_OscConfig+0x52c>
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f7fd f94a 	bl	80022f0 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x492>
 8005060:	f7fd f946 	bl	80022f0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x492>
 800506e:	2303      	movs	r3, #3
 8005070:	e04d      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x480>
 800507e:	e045      	b.n	800510c <HAL_RCC_OscConfig+0x52c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4b8>
 8005088:	2301      	movs	r3, #1
 800508a:	e040      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 800508c:	40023800 	.word	0x40023800
 8005090:	40007000 	.word	0x40007000
 8005094:	42470060 	.word	0x42470060
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_RCC_OscConfig+0x538>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d030      	beq.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d129      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d122      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ce:	0192      	lsls	r2, r2, #6
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d119      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	3b01      	subs	r3, #1
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d10f      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	061b      	lsls	r3, r3, #24
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	071b      	lsls	r3, r3, #28
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x52c>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 800510c:	2300      	movs	r3, #0
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_TIM_Base_Init>:
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
 800512a:	2301      	movs	r3, #1
 800512c:	e041      	b.n	80051b2 <HAL_TIM_Base_Init+0x96>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc ff28 	bl	8001f98 <HAL_TIM_Base_MspInit>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 fc04 	bl	8005968 <TIM_Base_SetConfig>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051b0:	2300      	movs	r3, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_TIM_Base_Start>:
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d001      	beq.n	80051d4 <HAL_TIM_Base_Start+0x18>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e046      	b.n	8005262 <HAL_TIM_Base_Start+0xa6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <HAL_TIM_Base_Start+0xb4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d022      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d01d      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_TIM_Base_Start+0xb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d018      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <HAL_TIM_Base_Start+0xbc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_TIM_Base_Start+0xc0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <HAL_TIM_Base_Start+0xc4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a19      	ldr	r2, [pc, #100]	; (8005284 <HAL_TIM_Base_Start+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_Base_Start+0x70>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_TIM_Base_Start+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <HAL_TIM_Base_Start+0x94>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d010      	beq.n	8005260 <HAL_TIM_Base_Start+0xa4>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e007      	b.n	8005260 <HAL_TIM_Base_Start+0xa4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40010000 	.word	0x40010000
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40010400 	.word	0x40010400
 8005284:	40014000 	.word	0x40014000
 8005288:	40001800 	.word	0x40001800

0800528c <HAL_TIM_Base_Stop>:
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	f241 1311 	movw	r3, #4369	; 0x1111
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <HAL_TIM_Base_Stop+0x38>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	f240 4344 	movw	r3, #1092	; 0x444
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_Base_Stop+0x38>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052cc:	2300      	movs	r3, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_TIM_Base_Start_IT>:
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d001      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x18>
 80052f0:	2301      	movs	r3, #1
 80052f2:	e04e      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xb6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	60da      	str	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d01d      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIM_Base_Start_IT+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_Base_Start_IT+0x80>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_TIM_Base_Start_IT+0xa4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d010      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xb4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800

080053bc <HAL_TIM_Base_Stop_IT>:
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	60da      	str	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	f241 1311 	movw	r3, #4369	; 0x1111
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10f      	bne.n	8005404 <HAL_TIM_Base_Stop_IT+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	f240 4344 	movw	r3, #1092	; 0x444
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_Base_Stop_IT+0x48>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800540c:	2300      	movs	r3, #0
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_Encoder_Init>:
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_Encoder_Init+0x14>
 800542a:	2301      	movs	r3, #1
 800542c:	e097      	b.n	800555e <HAL_TIM_Encoder_Init+0x144>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_Encoder_Init+0x2e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fc fe02 	bl	800204c <HAL_TIM_Encoder_MspInit>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800545e:	f023 0307 	bic.w	r3, r3, #7
 8005462:	6093      	str	r3, [r2, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fa7a 	bl	8005968 <TIM_Base_SetConfig>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	f023 0303 	bic.w	r3, r3, #3
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	4313      	orrs	r3, r2
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054ba:	f023 030c 	bic.w	r3, r3, #12
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	4313      	orrs	r3, r2
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	011a      	lsls	r2, r3, #4
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	4313      	orrs	r3, r2
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4313      	orrs	r3, r2
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	619a      	str	r2, [r3, #24]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800555c:	2300      	movs	r3, #0
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_IRQHandler>:
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d122      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x5c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d11b      	bne.n	80055c2 <HAL_TIM_IRQHandler+0x5c>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f06f 0202 	mvn.w	r2, #2
 8005592:	611a      	str	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	771a      	strb	r2, [r3, #28]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_TIM_IRQHandler+0x4a>
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9bf 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80055ae:	e005      	b.n	80055bc <HAL_TIM_IRQHandler+0x56>
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9b1 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9c2 	bl	8005940 <HAL_TIM_PWM_PulseFinishedCallback>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	771a      	strb	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d122      	bne.n	8005616 <HAL_TIM_IRQHandler+0xb0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d11b      	bne.n	8005616 <HAL_TIM_IRQHandler+0xb0>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f06f 0204 	mvn.w	r2, #4
 80055e6:	611a      	str	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	771a      	strb	r2, [r3, #28]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_TIM_IRQHandler+0x9e>
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f995 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005602:	e005      	b.n	8005610 <HAL_TIM_IRQHandler+0xaa>
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f987 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f998 	bl	8005940 <HAL_TIM_PWM_PulseFinishedCallback>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	771a      	strb	r2, [r3, #28]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	2b08      	cmp	r3, #8
 8005622:	d122      	bne.n	800566a <HAL_TIM_IRQHandler+0x104>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b08      	cmp	r3, #8
 8005630:	d11b      	bne.n	800566a <HAL_TIM_IRQHandler+0x104>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f06f 0208 	mvn.w	r2, #8
 800563a:	611a      	str	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2204      	movs	r2, #4
 8005640:	771a      	strb	r2, [r3, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_TIM_IRQHandler+0xf2>
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f96b 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005656:	e005      	b.n	8005664 <HAL_TIM_IRQHandler+0xfe>
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f95d 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f96e 	bl	8005940 <HAL_TIM_PWM_PulseFinishedCallback>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	771a      	strb	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b10      	cmp	r3, #16
 8005676:	d122      	bne.n	80056be <HAL_TIM_IRQHandler+0x158>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d11b      	bne.n	80056be <HAL_TIM_IRQHandler+0x158>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0210 	mvn.w	r2, #16
 800568e:	611a      	str	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2208      	movs	r2, #8
 8005694:	771a      	strb	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_TIM_IRQHandler+0x146>
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f941 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80056aa:	e005      	b.n	80056b8 <HAL_TIM_IRQHandler+0x152>
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f933 	bl	8005918 <HAL_TIM_OC_DelayElapsedCallback>
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f944 	bl	8005940 <HAL_TIM_PWM_PulseFinishedCallback>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	771a      	strb	r2, [r3, #28]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x184>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x184>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 0201 	mvn.w	r2, #1
 80056e2:	611a      	str	r2, [r3, #16]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f90d 	bl	8005904 <HAL_TIM_PeriodElapsedCallback>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x1b0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x1b0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fae9 	bl	8005ce8 <HAL_TIMEx_BreakCallback>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x1dc>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x1dc>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800573a:	611a      	str	r2, [r3, #16]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f909 	bl	8005954 <HAL_TIM_TriggerCallback>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b20      	cmp	r3, #32
 800574e:	d10e      	bne.n	800576e <HAL_TIM_IRQHandler+0x208>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b20      	cmp	r3, #32
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x208>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0220 	mvn.w	r2, #32
 8005766:	611a      	str	r2, [r3, #16]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fab3 	bl	8005cd4 <HAL_TIMEx_CommutCallback>
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_TIM_ConfigClockSource>:
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_TIM_ConfigClockSource+0x1c>
 800578e:	2302      	movs	r3, #2
 8005790:	e0b4      	b.n	80058fc <HAL_TIM_ConfigClockSource+0x186>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	d03e      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xd4>
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	f200 8087 	bhi.w	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d8:	f000 8086 	beq.w	80058e8 <HAL_TIM_ConfigClockSource+0x172>
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e0:	d87f      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	2b70      	cmp	r3, #112	; 0x70
 80057e4:	d01a      	beq.n	800581c <HAL_TIM_ConfigClockSource+0xa6>
 80057e6:	2b70      	cmp	r3, #112	; 0x70
 80057e8:	d87b      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 80057ea:	2b60      	cmp	r3, #96	; 0x60
 80057ec:	d050      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0x11a>
 80057ee:	2b60      	cmp	r3, #96	; 0x60
 80057f0:	d877      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 80057f2:	2b50      	cmp	r3, #80	; 0x50
 80057f4:	d03c      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0xfa>
 80057f6:	2b50      	cmp	r3, #80	; 0x50
 80057f8:	d873      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d058      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x13a>
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d86f      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 8005802:	2b30      	cmp	r3, #48	; 0x30
 8005804:	d064      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x15a>
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	d86b      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 800580a:	2b20      	cmp	r3, #32
 800580c:	d060      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x15a>
 800580e:	2b20      	cmp	r3, #32
 8005810:	d867      	bhi.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d05c      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x15a>
 8005816:	2b10      	cmp	r3, #16
 8005818:	d05a      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x15a>
 800581a:	e062      	b.n	80058e2 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6899      	ldr	r1, [r3, #8]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f000 f9b6 	bl	8005b9c <TIM_ETR_SetConfig>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	e04f      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f000 f99f 	bl	8005b9c <TIM_ETR_SetConfig>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	e03c      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	461a      	mov	r2, r3
 800587e:	f000 f913 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2150      	movs	r1, #80	; 0x50
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f96c 	bl	8005b66 <TIM_ITRx_SetConfig>
 800588e:	e02c      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	461a      	mov	r2, r3
 800589e:	f000 f932 	bl	8005b06 <TIM_TI2_ConfigInputStage>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2160      	movs	r1, #96	; 0x60
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f95c 	bl	8005b66 <TIM_ITRx_SetConfig>
 80058ae:	e01c      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	461a      	mov	r2, r3
 80058be:	f000 f8f3 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2140      	movs	r1, #64	; 0x40
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f94c 	bl	8005b66 <TIM_ITRx_SetConfig>
 80058ce:	e00c      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f000 f943 	bl	8005b66 <TIM_ITRx_SetConfig>
 80058e0:	e003      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e000      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x174>
 80058e8:	bf00      	nop
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_PeriodElapsedCallback>:
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_OC_DelayElapsedCallback>:
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_IC_CaptureCallback>:
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_TriggerCallback>:
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <TIM_Base_SetConfig>:
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3d      	ldr	r2, [pc, #244]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c8:	d027      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <TIM_Base_SetConfig+0x118>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d023      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2b      	ldr	r2, [pc, #172]	; (8005a84 <TIM_Base_SetConfig+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <TIM_Base_SetConfig+0x120>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a29      	ldr	r2, [pc, #164]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d017      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a28      	ldr	r2, [pc, #160]	; (8005a90 <TIM_Base_SetConfig+0x128>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00f      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00b      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_Base_SetConfig+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d007      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <TIM_Base_SetConfig+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <TIM_Base_SetConfig+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <TIM_Base_SetConfig+0xc4>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <TIM_Base_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_Base_SetConfig+0xf8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <TIM_Base_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <TIM_Base_SetConfig+0x100>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	615a      	str	r2, [r3, #20]
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800
 8005a9c:	40001800 	.word	0x40001800
 8005aa0:	40001c00 	.word	0x40001c00
 8005aa4:	40002000 	.word	0x40002000

08005aa8 <TIM_TI1_ConfigInputStage>:
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_TI2_ConfigInputStage>:
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f023 0210 	bic.w	r2, r3, #16
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	619a      	str	r2, [r3, #24]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <TIM_ITRx_SetConfig>:
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f043 0307 	orr.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_ETR_SetConfig>:
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_MasterConfigSynchronization>:
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e05a      	b.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c40:	d01d      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1a      	ldr	r2, [pc, #104]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d10c      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40010400 	.word	0x40010400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40001800 	.word	0x40001800

08005cd4 <HAL_TIMEx_CommutCallback>:
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_Init>:
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e03f      	b.n	8005d8e <HAL_UART_Init+0x92>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_UART_Init+0x2c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fc fa04 	bl	8002130 <HAL_UART_MspInit>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	; 0x24
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fc7b 	bl	800663c <UART_SetConfig>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d54:	611a      	str	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d64:	615a      	str	r2, [r3, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d74:	60da      	str	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_UART_IRQHandler>:
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b0ba      	sub	sp, #232	; 0xe8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <HAL_UART_IRQHandler+0x66>
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_UART_IRQHandler+0x66>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_UART_IRQHandler+0x66>
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fb65 	bl	80064c6 <UART_Receive_IT>
 8005dfc:	e256      	b.n	80062ac <HAL_UART_IRQHandler+0x514>
 8005dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80de 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x22c>
 8005e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_UART_IRQHandler+0x8a>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80d1 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x22c>
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_UART_IRQHandler+0xae>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_UART_IRQHandler+0xae>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f043 0201 	orr.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_UART_IRQHandler+0xd2>
 8005e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_UART_IRQHandler+0xd2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f043 0202 	orr.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_UART_IRQHandler+0xf6>
 8005e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0xf6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d011      	beq.n	8005ebe <HAL_UART_IRQHandler+0x126>
 8005e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d105      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x11a>
 8005ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_UART_IRQHandler+0x126>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0208 	orr.w	r2, r3, #8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 81ed 	beq.w	80062a2 <HAL_UART_IRQHandler+0x50a>
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x14e>
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x14e>
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 faf0 	bl	80064c6 <UART_Receive_IT>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <HAL_UART_IRQHandler+0x17a>
 8005f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d04f      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x21a>
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9f8 	bl	8006308 <UART_EndRxTransfer>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d141      	bne.n	8005faa <HAL_UART_IRQHandler+0x212>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3314      	adds	r3, #20
 8005f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3314      	adds	r3, #20
 8005f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1d9      	bne.n	8005f26 <HAL_UART_IRQHandler+0x18e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d013      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x20a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	4a7d      	ldr	r2, [pc, #500]	; (8006174 <HAL_UART_IRQHandler+0x3dc>)
 8005f80:	651a      	str	r2, [r3, #80]	; 0x50
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fd f9b0 	bl	80032ec <HAL_DMA_Abort_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x228>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	e00e      	b.n	8005fc0 <HAL_UART_IRQHandler+0x228>
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f99a 	bl	80062dc <HAL_UART_ErrorCallback>
 8005fa8:	e00a      	b.n	8005fc0 <HAL_UART_IRQHandler+0x228>
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f996 	bl	80062dc <HAL_UART_ErrorCallback>
 8005fb0:	e006      	b.n	8005fc0 <HAL_UART_IRQHandler+0x228>
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f992 	bl	80062dc <HAL_UART_ErrorCallback>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8005fbe:	e170      	b.n	80062a2 <HAL_UART_IRQHandler+0x50a>
 8005fc0:	bf00      	nop
 8005fc2:	e16e      	b.n	80062a2 <HAL_UART_IRQHandler+0x50a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	f040 814a 	bne.w	8006262 <HAL_UART_IRQHandler+0x4ca>
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 8143 	beq.w	8006262 <HAL_UART_IRQHandler+0x4ca>
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 813c 	beq.w	8006262 <HAL_UART_IRQHandler+0x4ca>
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	f040 80b4 	bne.w	8006178 <HAL_UART_IRQHandler+0x3e0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800601c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8140 	beq.w	80062a6 <HAL_UART_IRQHandler+0x50e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800602a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800602e:	429a      	cmp	r2, r3
 8006030:	f080 8139 	bcs.w	80062a6 <HAL_UART_IRQHandler+0x50e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800603a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006046:	f000 8088 	beq.w	800615a <HAL_UART_IRQHandler+0x3c2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800607a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800607e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800608e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1d9      	bne.n	800604a <HAL_UART_IRQHandler+0x2b2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3314      	adds	r3, #20
 800609c:	677b      	str	r3, [r7, #116]	; 0x74
 800609e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	673b      	str	r3, [r7, #112]	; 0x70
 80060a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80060cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e1      	bne.n	8006096 <HAL_UART_IRQHandler+0x2fe>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	663b      	str	r3, [r7, #96]	; 0x60
 80060da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80060fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	667b      	str	r3, [r7, #100]	; 0x64
 8006104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e3      	bne.n	80060d2 <HAL_UART_IRQHandler+0x33a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
 8006128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612a:	f023 0310 	bic.w	r3, r3, #16
 800612e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800613c:	65ba      	str	r2, [r7, #88]	; 0x58
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
 8006140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	653b      	str	r3, [r7, #80]	; 0x50
 800614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e3      	bne.n	8006118 <HAL_UART_IRQHandler+0x380>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	4618      	mov	r0, r3
 8006156:	f7fd f859 	bl	800320c <HAL_DMA_Abort>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006162:	b29b      	uxth	r3, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	b29b      	uxth	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8c0 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 8006170:	e099      	b.n	80062a6 <HAL_UART_IRQHandler+0x50e>
 8006172:	bf00      	nop
 8006174:	080063cf 	.word	0x080063cf
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006180:	b29b      	uxth	r3, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 808b 	beq.w	80062aa <HAL_UART_IRQHandler+0x512>
 8006194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8086 	beq.w	80062aa <HAL_UART_IRQHandler+0x512>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	330c      	adds	r3, #12
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061c2:	647a      	str	r2, [r7, #68]	; 0x44
 80061c4:	643b      	str	r3, [r7, #64]	; 0x40
 80061c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e3      	bne.n	800619e <HAL_UART_IRQHandler+0x406>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061fa:	633a      	str	r2, [r7, #48]	; 0x30
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x43e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006240:	61fa      	str	r2, [r7, #28]
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e3      	bne.n	800621c <HAL_UART_IRQHandler+0x484>
 8006254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f848 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 8006260:	e023      	b.n	80062aa <HAL_UART_IRQHandler+0x512>
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_UART_IRQHandler+0x4ea>
 800626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x4ea>
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f8bb 	bl	80063f6 <UART_Transmit_IT>
 8006280:	e014      	b.n	80062ac <HAL_UART_IRQHandler+0x514>
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <HAL_UART_IRQHandler+0x514>
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_UART_IRQHandler+0x514>
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8fb 	bl	8006496 <UART_EndTransmit_IT>
 80062a0:	e004      	b.n	80062ac <HAL_UART_IRQHandler+0x514>
 80062a2:	bf00      	nop
 80062a4:	e002      	b.n	80062ac <HAL_UART_IRQHandler+0x514>
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <HAL_UART_IRQHandler+0x514>
 80062aa:	bf00      	nop
 80062ac:	37e8      	adds	r7, #232	; 0xe8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop

080062b4 <HAL_UART_TxCpltCallback>:
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_RxCpltCallback>:
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_ErrorCallback>:
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UARTEx_RxEventCallback>:
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_EndRxTransfer>:
 8006308:	b480      	push	{r7}
 800630a:	b095      	sub	sp, #84	; 0x54
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006330:	643a      	str	r2, [r7, #64]	; 0x40
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e5      	bne.n	8006310 <UART_EndRxTransfer+0x8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
 8006368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x3c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	2b01      	cmp	r3, #1
 800637e:	d119      	bne.n	80063b4 <UART_EndRxTransfer+0xac>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	647b      	str	r3, [r7, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a0:	61ba      	str	r2, [r7, #24]
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_EndRxTransfer+0x78>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
 80063c2:	bf00      	nop
 80063c4:	3754      	adds	r7, #84	; 0x54
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <UART_DMAAbortOnError>:
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	85da      	strh	r2, [r3, #46]	; 0x2e
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	84da      	strh	r2, [r3, #38]	; 0x26
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff ff77 	bl	80062dc <HAL_UART_ErrorCallback>
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_Transmit_IT>:
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b21      	cmp	r3, #33	; 0x21
 8006408:	d13e      	bne.n	8006488 <UART_Transmit_IT+0x92>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d114      	bne.n	800643e <UART_Transmit_IT+0x48>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d110      	bne.n	800643e <UART_Transmit_IT+0x48>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]
 800643c:	e008      	b.n	8006450 <UART_Transmit_IT+0x5a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6211      	str	r1, [r2, #32]
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4619      	mov	r1, r3
 800645e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10f      	bne.n	8006484 <UART_Transmit_IT+0x8e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006472:	60da      	str	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006482:	60da      	str	r2, [r3, #12]
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <UART_Transmit_IT+0x94>
 8006488:	2302      	movs	r3, #2
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <UART_EndTransmit_IT>:
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fefc 	bl	80062b4 <HAL_UART_TxCpltCallback>
 80064bc:	2300      	movs	r3, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <UART_Receive_IT>:
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08c      	sub	sp, #48	; 0x30
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b22      	cmp	r3, #34	; 0x22
 80064d8:	f040 80ab 	bne.w	8006632 <UART_Receive_IT+0x16c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d117      	bne.n	8006516 <UART_Receive_IT+0x50>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d113      	bne.n	8006516 <UART_Receive_IT+0x50>
 80064ee:	2300      	movs	r3, #0
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	b29a      	uxth	r2, r3
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28
 8006514:	e026      	b.n	8006564 <UART_Receive_IT+0x9e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651c:	2300      	movs	r3, #0
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d007      	beq.n	800653a <UART_Receive_IT+0x74>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <UART_Receive_IT+0x82>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <UART_Receive_IT+0x82>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e008      	b.n	800655a <UART_Receive_IT+0x94>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4619      	mov	r1, r3
 8006572:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006574:	2b00      	cmp	r3, #0
 8006576:	d15a      	bne.n	800662e <UART_Receive_IT+0x168>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0220 	bic.w	r2, r2, #32
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006596:	60da      	str	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	615a      	str	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d135      	bne.n	8006624 <UART_Receive_IT+0x15e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	623a      	str	r2, [r7, #32]
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	69f9      	ldr	r1, [r7, #28]
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_Receive_IT+0xf8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d10a      	bne.n	8006616 <UART_Receive_IT+0x150>
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fe67 	bl	80062f0 <HAL_UARTEx_RxEventCallback>
 8006622:	e002      	b.n	800662a <UART_Receive_IT+0x164>
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fe4f 	bl	80062c8 <HAL_UART_RxCpltCallback>
 800662a:	2300      	movs	r3, #0
 800662c:	e002      	b.n	8006634 <UART_Receive_IT+0x16e>
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <UART_Receive_IT+0x16e>
 8006632:	2302      	movs	r3, #2
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	; 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_SetConfig>:
 800663c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006640:	b0c0      	sub	sp, #256	; 0x100
 8006642:	af00      	add	r7, sp, #0
 8006644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	68d9      	ldr	r1, [r3, #12]
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	ea40 0301 	orr.w	r3, r0, r1
 8006664:	6113      	str	r3, [r2, #16]
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006694:	f021 010c 	bic.w	r1, r1, #12
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066a2:	430b      	orrs	r3, r1
 80066a4:	60d3      	str	r3, [r2, #12]
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	6999      	ldr	r1, [r3, #24]
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	ea40 0301 	orr.w	r3, r0, r1
 80066c2:	6153      	str	r3, [r2, #20]
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b8f      	ldr	r3, [pc, #572]	; (8006908 <UART_SetConfig+0x2cc>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d005      	beq.n	80066dc <UART_SetConfig+0xa0>
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b8d      	ldr	r3, [pc, #564]	; (800690c <UART_SetConfig+0x2d0>)
 80066d8:	429a      	cmp	r2, r3
 80066da:	d104      	bne.n	80066e6 <UART_SetConfig+0xaa>
 80066dc:	f7fe f83c 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 80066e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066e4:	e003      	b.n	80066ee <UART_SetConfig+0xb2>
 80066e6:	f7fe f823 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 80066ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f8:	f040 810c 	bne.w	8006914 <UART_SetConfig+0x2d8>
 80066fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006700:	2200      	movs	r2, #0
 8006702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800670a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800670e:	4622      	mov	r2, r4
 8006710:	462b      	mov	r3, r5
 8006712:	1891      	adds	r1, r2, r2
 8006714:	65b9      	str	r1, [r7, #88]	; 0x58
 8006716:	415b      	adcs	r3, r3
 8006718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800671e:	4621      	mov	r1, r4
 8006720:	eb12 0801 	adds.w	r8, r2, r1
 8006724:	4629      	mov	r1, r5
 8006726:	eb43 0901 	adc.w	r9, r3, r1
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800673a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800673e:	4690      	mov	r8, r2
 8006740:	4699      	mov	r9, r3
 8006742:	4623      	mov	r3, r4
 8006744:	eb18 0303 	adds.w	r3, r8, r3
 8006748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800674c:	462b      	mov	r3, r5
 800674e:	eb49 0303 	adc.w	r3, r9, r3
 8006752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800676a:	460b      	mov	r3, r1
 800676c:	18db      	adds	r3, r3, r3
 800676e:	653b      	str	r3, [r7, #80]	; 0x50
 8006770:	4613      	mov	r3, r2
 8006772:	eb42 0303 	adc.w	r3, r2, r3
 8006776:	657b      	str	r3, [r7, #84]	; 0x54
 8006778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800677c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006780:	f7fa f8cc 	bl	800091c <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4b61      	ldr	r3, [pc, #388]	; (8006910 <UART_SetConfig+0x2d4>)
 800678a:	fba3 2302 	umull	r2, r3, r3, r2
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	011c      	lsls	r4, r3, #4
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800679c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	1891      	adds	r1, r2, r2
 80067aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80067ac:	415b      	adcs	r3, r3
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067b4:	4641      	mov	r1, r8
 80067b6:	eb12 0a01 	adds.w	sl, r2, r1
 80067ba:	4649      	mov	r1, r9
 80067bc:	eb43 0b01 	adc.w	fp, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d4:	4692      	mov	sl, r2
 80067d6:	469b      	mov	fp, r3
 80067d8:	4643      	mov	r3, r8
 80067da:	eb1a 0303 	adds.w	r3, sl, r3
 80067de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e2:	464b      	mov	r3, r9
 80067e4:	eb4b 0303 	adc.w	r3, fp, r3
 80067e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006800:	460b      	mov	r3, r1
 8006802:	18db      	adds	r3, r3, r3
 8006804:	643b      	str	r3, [r7, #64]	; 0x40
 8006806:	4613      	mov	r3, r2
 8006808:	eb42 0303 	adc.w	r3, r2, r3
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
 800680e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006816:	f7fa f881 	bl	800091c <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4611      	mov	r1, r2
 8006820:	4b3b      	ldr	r3, [pc, #236]	; (8006910 <UART_SetConfig+0x2d4>)
 8006822:	fba3 2301 	umull	r2, r3, r3, r1
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2264      	movs	r2, #100	; 0x64
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	1acb      	subs	r3, r1, r3
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006836:	4b36      	ldr	r3, [pc, #216]	; (8006910 <UART_SetConfig+0x2d4>)
 8006838:	fba3 2302 	umull	r2, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006844:	441c      	add	r4, r3
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	1891      	adds	r1, r2, r2
 800685e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006860:	415b      	adcs	r3, r3
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006868:	4641      	mov	r1, r8
 800686a:	1851      	adds	r1, r2, r1
 800686c:	6339      	str	r1, [r7, #48]	; 0x30
 800686e:	4649      	mov	r1, r9
 8006870:	414b      	adcs	r3, r1
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006880:	4659      	mov	r1, fp
 8006882:	00cb      	lsls	r3, r1, #3
 8006884:	4651      	mov	r1, sl
 8006886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688a:	4651      	mov	r1, sl
 800688c:	00ca      	lsls	r2, r1, #3
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	4603      	mov	r3, r0
 8006894:	4642      	mov	r2, r8
 8006896:	189b      	adds	r3, r3, r2
 8006898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800689c:	464b      	mov	r3, r9
 800689e:	460a      	mov	r2, r1
 80068a0:	eb42 0303 	adc.w	r3, r2, r3
 80068a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068bc:	460b      	mov	r3, r1
 80068be:	18db      	adds	r3, r3, r3
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c2:	4613      	mov	r3, r2
 80068c4:	eb42 0303 	adc.w	r3, r2, r3
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068d2:	f7fa f823 	bl	800091c <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <UART_SetConfig+0x2d4>)
 80068dc:	fba3 1302 	umull	r1, r3, r3, r2
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	2164      	movs	r1, #100	; 0x64
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	3332      	adds	r3, #50	; 0x32
 80068ee:	4a08      	ldr	r2, [pc, #32]	; (8006910 <UART_SetConfig+0x2d4>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	f003 0207 	and.w	r2, r3, #7
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4422      	add	r2, r4
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	e105      	b.n	8006b12 <UART_SetConfig+0x4d6>
 8006906:	bf00      	nop
 8006908:	40011000 	.word	0x40011000
 800690c:	40011400 	.word	0x40011400
 8006910:	51eb851f 	.word	0x51eb851f
 8006914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800691e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	1891      	adds	r1, r2, r2
 800692c:	6239      	str	r1, [r7, #32]
 800692e:	415b      	adcs	r3, r3
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
 8006932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006936:	4641      	mov	r1, r8
 8006938:	1854      	adds	r4, r2, r1
 800693a:	4649      	mov	r1, r9
 800693c:	eb43 0501 	adc.w	r5, r3, r1
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	00eb      	lsls	r3, r5, #3
 800694a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800694e:	00e2      	lsls	r2, r4, #3
 8006950:	4614      	mov	r4, r2
 8006952:	461d      	mov	r5, r3
 8006954:	4643      	mov	r3, r8
 8006956:	18e3      	adds	r3, r4, r3
 8006958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800695c:	464b      	mov	r3, r9
 800695e:	eb45 0303 	adc.w	r3, r5, r3
 8006962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006982:	4629      	mov	r1, r5
 8006984:	008b      	lsls	r3, r1, #2
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698c:	4621      	mov	r1, r4
 800698e:	008a      	lsls	r2, r1, #2
 8006990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006994:	f7f9 ffc2 	bl	800091c <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4b60      	ldr	r3, [pc, #384]	; (8006b20 <UART_SetConfig+0x4e4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	011c      	lsls	r4, r3, #4
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	61b9      	str	r1, [r7, #24]
 80069c0:	415b      	adcs	r3, r3
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c8:	4641      	mov	r1, r8
 80069ca:	1851      	adds	r1, r2, r1
 80069cc:	6139      	str	r1, [r7, #16]
 80069ce:	4649      	mov	r1, r9
 80069d0:	414b      	adcs	r3, r1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e0:	4659      	mov	r1, fp
 80069e2:	00cb      	lsls	r3, r1, #3
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ea:	4651      	mov	r1, sl
 80069ec:	00ca      	lsls	r2, r1, #3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	4642      	mov	r2, r8
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069fc:	464b      	mov	r3, r9
 80069fe:	460a      	mov	r2, r1
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a20:	4649      	mov	r1, r9
 8006a22:	008b      	lsls	r3, r1, #2
 8006a24:	4641      	mov	r1, r8
 8006a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	008a      	lsls	r2, r1, #2
 8006a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a32:	f7f9 ff73 	bl	800091c <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	2164      	movs	r1, #100	; 0x64
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	3332      	adds	r3, #50	; 0x32
 8006a4e:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a5a:	441c      	add	r4, r3
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a60:	2200      	movs	r2, #0
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
 8006a64:	677a      	str	r2, [r7, #116]	; 0x74
 8006a66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	1891      	adds	r1, r2, r2
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	415b      	adcs	r3, r3
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	1851      	adds	r1, r2, r1
 8006a7e:	6039      	str	r1, [r7, #0]
 8006a80:	4649      	mov	r1, r9
 8006a82:	414b      	adcs	r3, r1
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a92:	4659      	mov	r1, fp
 8006a94:	00cb      	lsls	r3, r1, #3
 8006a96:	4651      	mov	r1, sl
 8006a98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	00ca      	lsls	r2, r1, #3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	189b      	adds	r3, r3, r2
 8006aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aac:	464b      	mov	r3, r9
 8006aae:	460a      	mov	r2, r1
 8006ab0:	eb42 0303 	adc.w	r3, r2, r3
 8006ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ace:	4649      	mov	r1, r9
 8006ad0:	008b      	lsls	r3, r1, #2
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad8:	4641      	mov	r1, r8
 8006ada:	008a      	lsls	r2, r1, #2
 8006adc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ae0:	f7f9 ff1c 	bl	800091c <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006aea:	fba3 1302 	umull	r1, r3, r3, r2
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2164      	movs	r1, #100	; 0x64
 8006af2:	fb01 f303 	mul.w	r3, r1, r3
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	3332      	adds	r3, #50	; 0x32
 8006afc:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4422      	add	r2, r4
 8006b10:	609a      	str	r2, [r3, #8]
 8006b12:	bf00      	nop
 8006b14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b1e:	bf00      	nop
 8006b20:	51eb851f 	.word	0x51eb851f

08006b24 <__errno>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	; (8006b2c <__errno+0x8>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000014 	.word	0x20000014

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4d0d      	ldr	r5, [pc, #52]	; (8006b68 <__libc_init_array+0x38>)
 8006b34:	4c0d      	ldr	r4, [pc, #52]	; (8006b6c <__libc_init_array+0x3c>)
 8006b36:	1b64      	subs	r4, r4, r5
 8006b38:	10a4      	asrs	r4, r4, #2
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	4d0b      	ldr	r5, [pc, #44]	; (8006b70 <__libc_init_array+0x40>)
 8006b42:	4c0c      	ldr	r4, [pc, #48]	; (8006b74 <__libc_init_array+0x44>)
 8006b44:	f000 fcea 	bl	800751c <_init>
 8006b48:	1b64      	subs	r4, r4, r5
 8006b4a:	10a4      	asrs	r4, r4, #2
 8006b4c:	2600      	movs	r6, #0
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	08007d9c 	.word	0x08007d9c
 8006b6c:	08007d9c 	.word	0x08007d9c
 8006b70:	08007d9c 	.word	0x08007d9c
 8006b74:	08007da0 	.word	0x08007da0

08006b78 <__itoa>:
 8006b78:	1e93      	subs	r3, r2, #2
 8006b7a:	2b22      	cmp	r3, #34	; 0x22
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	d904      	bls.n	8006b8c <__itoa+0x14>
 8006b82:	2300      	movs	r3, #0
 8006b84:	700b      	strb	r3, [r1, #0]
 8006b86:	461c      	mov	r4, r3
 8006b88:	4620      	mov	r0, r4
 8006b8a:	bd10      	pop	{r4, pc}
 8006b8c:	2a0a      	cmp	r2, #10
 8006b8e:	d109      	bne.n	8006ba4 <__itoa+0x2c>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	da07      	bge.n	8006ba4 <__itoa+0x2c>
 8006b94:	232d      	movs	r3, #45	; 0x2d
 8006b96:	700b      	strb	r3, [r1, #0]
 8006b98:	4240      	negs	r0, r0
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4421      	add	r1, r4
 8006b9e:	f000 f83b 	bl	8006c18 <__utoa>
 8006ba2:	e7f1      	b.n	8006b88 <__itoa+0x10>
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	e7f9      	b.n	8006b9c <__itoa+0x24>

08006ba8 <itoa>:
 8006ba8:	f7ff bfe6 	b.w	8006b78 <__itoa>

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <memset>:
 8006bc8:	4402      	add	r2, r0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memset+0xa>
 8006bd0:	4770      	bx	lr
 8006bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd6:	e7f9      	b.n	8006bcc <memset+0x4>

08006bd8 <siprintf>:
 8006bd8:	b40e      	push	{r1, r2, r3}
 8006bda:	b500      	push	{lr}
 8006bdc:	b09c      	sub	sp, #112	; 0x70
 8006bde:	ab1d      	add	r3, sp, #116	; 0x74
 8006be0:	9002      	str	r0, [sp, #8]
 8006be2:	9006      	str	r0, [sp, #24]
 8006be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be8:	4809      	ldr	r0, [pc, #36]	; (8006c10 <siprintf+0x38>)
 8006bea:	9107      	str	r1, [sp, #28]
 8006bec:	9104      	str	r1, [sp, #16]
 8006bee:	4909      	ldr	r1, [pc, #36]	; (8006c14 <siprintf+0x3c>)
 8006bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf4:	9105      	str	r1, [sp, #20]
 8006bf6:	6800      	ldr	r0, [r0, #0]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	a902      	add	r1, sp, #8
 8006bfc:	f000 f8aa 	bl	8006d54 <_svfiprintf_r>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	b01c      	add	sp, #112	; 0x70
 8006c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c0c:	b003      	add	sp, #12
 8006c0e:	4770      	bx	lr
 8006c10:	20000014 	.word	0x20000014
 8006c14:	ffff0208 	.word	0xffff0208

08006c18 <__utoa>:
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	4c1f      	ldr	r4, [pc, #124]	; (8006c98 <__utoa+0x80>)
 8006c1c:	b08b      	sub	sp, #44	; 0x2c
 8006c1e:	4605      	mov	r5, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	466e      	mov	r6, sp
 8006c24:	f104 0c20 	add.w	ip, r4, #32
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	6861      	ldr	r1, [r4, #4]
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	c703      	stmia	r7!, {r0, r1}
 8006c30:	3408      	adds	r4, #8
 8006c32:	4564      	cmp	r4, ip
 8006c34:	463e      	mov	r6, r7
 8006c36:	d1f7      	bne.n	8006c28 <__utoa+0x10>
 8006c38:	7921      	ldrb	r1, [r4, #4]
 8006c3a:	7139      	strb	r1, [r7, #4]
 8006c3c:	1e91      	subs	r1, r2, #2
 8006c3e:	6820      	ldr	r0, [r4, #0]
 8006c40:	6038      	str	r0, [r7, #0]
 8006c42:	2922      	cmp	r1, #34	; 0x22
 8006c44:	f04f 0100 	mov.w	r1, #0
 8006c48:	d904      	bls.n	8006c54 <__utoa+0x3c>
 8006c4a:	7019      	strb	r1, [r3, #0]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4618      	mov	r0, r3
 8006c50:	b00b      	add	sp, #44	; 0x2c
 8006c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c54:	1e58      	subs	r0, r3, #1
 8006c56:	4684      	mov	ip, r0
 8006c58:	fbb5 f7f2 	udiv	r7, r5, r2
 8006c5c:	fb02 5617 	mls	r6, r2, r7, r5
 8006c60:	3628      	adds	r6, #40	; 0x28
 8006c62:	446e      	add	r6, sp
 8006c64:	460c      	mov	r4, r1
 8006c66:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006c6a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006c6e:	462e      	mov	r6, r5
 8006c70:	42b2      	cmp	r2, r6
 8006c72:	f101 0101 	add.w	r1, r1, #1
 8006c76:	463d      	mov	r5, r7
 8006c78:	d9ee      	bls.n	8006c58 <__utoa+0x40>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	545a      	strb	r2, [r3, r1]
 8006c7e:	1919      	adds	r1, r3, r4
 8006c80:	1aa5      	subs	r5, r4, r2
 8006c82:	42aa      	cmp	r2, r5
 8006c84:	dae3      	bge.n	8006c4e <__utoa+0x36>
 8006c86:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006c8a:	780e      	ldrb	r6, [r1, #0]
 8006c8c:	7006      	strb	r6, [r0, #0]
 8006c8e:	3201      	adds	r2, #1
 8006c90:	f801 5901 	strb.w	r5, [r1], #-1
 8006c94:	e7f4      	b.n	8006c80 <__utoa+0x68>
 8006c96:	bf00      	nop
 8006c98:	08007d3c 	.word	0x08007d3c

08006c9c <__ssputs_r>:
 8006c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	688e      	ldr	r6, [r1, #8]
 8006ca2:	429e      	cmp	r6, r3
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	4690      	mov	r8, r2
 8006caa:	461f      	mov	r7, r3
 8006cac:	d838      	bhi.n	8006d20 <__ssputs_r+0x84>
 8006cae:	898a      	ldrh	r2, [r1, #12]
 8006cb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cb4:	d032      	beq.n	8006d1c <__ssputs_r+0x80>
 8006cb6:	6825      	ldr	r5, [r4, #0]
 8006cb8:	6909      	ldr	r1, [r1, #16]
 8006cba:	eba5 0901 	sub.w	r9, r5, r1
 8006cbe:	6965      	ldr	r5, [r4, #20]
 8006cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cc8:	3301      	adds	r3, #1
 8006cca:	444b      	add	r3, r9
 8006ccc:	106d      	asrs	r5, r5, #1
 8006cce:	429d      	cmp	r5, r3
 8006cd0:	bf38      	it	cc
 8006cd2:	461d      	movcc	r5, r3
 8006cd4:	0553      	lsls	r3, r2, #21
 8006cd6:	d531      	bpl.n	8006d3c <__ssputs_r+0xa0>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f000 fb55 	bl	8007388 <_malloc_r>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	b950      	cbnz	r0, 8006cf8 <__ssputs_r+0x5c>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	f8ca 3000 	str.w	r3, [sl]
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf8:	6921      	ldr	r1, [r4, #16]
 8006cfa:	464a      	mov	r2, r9
 8006cfc:	f7ff ff56 	bl	8006bac <memcpy>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	6126      	str	r6, [r4, #16]
 8006d0e:	6165      	str	r5, [r4, #20]
 8006d10:	444e      	add	r6, r9
 8006d12:	eba5 0509 	sub.w	r5, r5, r9
 8006d16:	6026      	str	r6, [r4, #0]
 8006d18:	60a5      	str	r5, [r4, #8]
 8006d1a:	463e      	mov	r6, r7
 8006d1c:	42be      	cmp	r6, r7
 8006d1e:	d900      	bls.n	8006d22 <__ssputs_r+0x86>
 8006d20:	463e      	mov	r6, r7
 8006d22:	6820      	ldr	r0, [r4, #0]
 8006d24:	4632      	mov	r2, r6
 8006d26:	4641      	mov	r1, r8
 8006d28:	f000 faa8 	bl	800727c <memmove>
 8006d2c:	68a3      	ldr	r3, [r4, #8]
 8006d2e:	1b9b      	subs	r3, r3, r6
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	4433      	add	r3, r6
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e7db      	b.n	8006cf4 <__ssputs_r+0x58>
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	f000 fb97 	bl	8007470 <_realloc_r>
 8006d42:	4606      	mov	r6, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d1e1      	bne.n	8006d0c <__ssputs_r+0x70>
 8006d48:	6921      	ldr	r1, [r4, #16]
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f000 fab0 	bl	80072b0 <_free_r>
 8006d50:	e7c7      	b.n	8006ce2 <__ssputs_r+0x46>
	...

08006d54 <_svfiprintf_r>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	4698      	mov	r8, r3
 8006d5a:	898b      	ldrh	r3, [r1, #12]
 8006d5c:	061b      	lsls	r3, r3, #24
 8006d5e:	b09d      	sub	sp, #116	; 0x74
 8006d60:	4607      	mov	r7, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	4614      	mov	r4, r2
 8006d66:	d50e      	bpl.n	8006d86 <_svfiprintf_r+0x32>
 8006d68:	690b      	ldr	r3, [r1, #16]
 8006d6a:	b963      	cbnz	r3, 8006d86 <_svfiprintf_r+0x32>
 8006d6c:	2140      	movs	r1, #64	; 0x40
 8006d6e:	f000 fb0b 	bl	8007388 <_malloc_r>
 8006d72:	6028      	str	r0, [r5, #0]
 8006d74:	6128      	str	r0, [r5, #16]
 8006d76:	b920      	cbnz	r0, 8006d82 <_svfiprintf_r+0x2e>
 8006d78:	230c      	movs	r3, #12
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	e0d1      	b.n	8006f26 <_svfiprintf_r+0x1d2>
 8006d82:	2340      	movs	r3, #64	; 0x40
 8006d84:	616b      	str	r3, [r5, #20]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8a:	2320      	movs	r3, #32
 8006d8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d94:	2330      	movs	r3, #48	; 0x30
 8006d96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f40 <_svfiprintf_r+0x1ec>
 8006d9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d9e:	f04f 0901 	mov.w	r9, #1
 8006da2:	4623      	mov	r3, r4
 8006da4:	469a      	mov	sl, r3
 8006da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006daa:	b10a      	cbz	r2, 8006db0 <_svfiprintf_r+0x5c>
 8006dac:	2a25      	cmp	r2, #37	; 0x25
 8006dae:	d1f9      	bne.n	8006da4 <_svfiprintf_r+0x50>
 8006db0:	ebba 0b04 	subs.w	fp, sl, r4
 8006db4:	d00b      	beq.n	8006dce <_svfiprintf_r+0x7a>
 8006db6:	465b      	mov	r3, fp
 8006db8:	4622      	mov	r2, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff ff6d 	bl	8006c9c <__ssputs_r>
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f000 80aa 	beq.w	8006f1c <_svfiprintf_r+0x1c8>
 8006dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dca:	445a      	add	r2, fp
 8006dcc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dce:	f89a 3000 	ldrb.w	r3, [sl]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80a2 	beq.w	8006f1c <_svfiprintf_r+0x1c8>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f04f 32ff 	mov.w	r2, #4294967295
 8006dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006de2:	f10a 0a01 	add.w	sl, sl, #1
 8006de6:	9304      	str	r3, [sp, #16]
 8006de8:	9307      	str	r3, [sp, #28]
 8006dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dee:	931a      	str	r3, [sp, #104]	; 0x68
 8006df0:	4654      	mov	r4, sl
 8006df2:	2205      	movs	r2, #5
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	4851      	ldr	r0, [pc, #324]	; (8006f40 <_svfiprintf_r+0x1ec>)
 8006dfa:	f7f9 fa09 	bl	8000210 <memchr>
 8006dfe:	9a04      	ldr	r2, [sp, #16]
 8006e00:	b9d8      	cbnz	r0, 8006e3a <_svfiprintf_r+0xe6>
 8006e02:	06d0      	lsls	r0, r2, #27
 8006e04:	bf44      	itt	mi
 8006e06:	2320      	movmi	r3, #32
 8006e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e0c:	0711      	lsls	r1, r2, #28
 8006e0e:	bf44      	itt	mi
 8006e10:	232b      	movmi	r3, #43	; 0x2b
 8006e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e16:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1c:	d015      	beq.n	8006e4a <_svfiprintf_r+0xf6>
 8006e1e:	9a07      	ldr	r2, [sp, #28]
 8006e20:	4654      	mov	r4, sl
 8006e22:	2000      	movs	r0, #0
 8006e24:	f04f 0c0a 	mov.w	ip, #10
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e2e:	3b30      	subs	r3, #48	; 0x30
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d94e      	bls.n	8006ed2 <_svfiprintf_r+0x17e>
 8006e34:	b1b0      	cbz	r0, 8006e64 <_svfiprintf_r+0x110>
 8006e36:	9207      	str	r2, [sp, #28]
 8006e38:	e014      	b.n	8006e64 <_svfiprintf_r+0x110>
 8006e3a:	eba0 0308 	sub.w	r3, r0, r8
 8006e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	46a2      	mov	sl, r4
 8006e48:	e7d2      	b.n	8006df0 <_svfiprintf_r+0x9c>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	9103      	str	r1, [sp, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfbb      	ittet	lt
 8006e56:	425b      	neglt	r3, r3
 8006e58:	f042 0202 	orrlt.w	r2, r2, #2
 8006e5c:	9307      	strge	r3, [sp, #28]
 8006e5e:	9307      	strlt	r3, [sp, #28]
 8006e60:	bfb8      	it	lt
 8006e62:	9204      	strlt	r2, [sp, #16]
 8006e64:	7823      	ldrb	r3, [r4, #0]
 8006e66:	2b2e      	cmp	r3, #46	; 0x2e
 8006e68:	d10c      	bne.n	8006e84 <_svfiprintf_r+0x130>
 8006e6a:	7863      	ldrb	r3, [r4, #1]
 8006e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e6e:	d135      	bne.n	8006edc <_svfiprintf_r+0x188>
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	1d1a      	adds	r2, r3, #4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	9203      	str	r2, [sp, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bfb8      	it	lt
 8006e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e80:	3402      	adds	r4, #2
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f50 <_svfiprintf_r+0x1fc>
 8006e88:	7821      	ldrb	r1, [r4, #0]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f7f9 f9bf 	bl	8000210 <memchr>
 8006e92:	b140      	cbz	r0, 8006ea6 <_svfiprintf_r+0x152>
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	eba0 000a 	sub.w	r0, r0, sl
 8006e9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	4303      	orrs	r3, r0
 8006ea2:	3401      	adds	r4, #1
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eaa:	4826      	ldr	r0, [pc, #152]	; (8006f44 <_svfiprintf_r+0x1f0>)
 8006eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eb0:	2206      	movs	r2, #6
 8006eb2:	f7f9 f9ad 	bl	8000210 <memchr>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d038      	beq.n	8006f2c <_svfiprintf_r+0x1d8>
 8006eba:	4b23      	ldr	r3, [pc, #140]	; (8006f48 <_svfiprintf_r+0x1f4>)
 8006ebc:	bb1b      	cbnz	r3, 8006f06 <_svfiprintf_r+0x1b2>
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	4433      	add	r3, r6
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	e767      	b.n	8006da2 <_svfiprintf_r+0x4e>
 8006ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	2001      	movs	r0, #1
 8006eda:	e7a5      	b.n	8006e28 <_svfiprintf_r+0xd4>
 8006edc:	2300      	movs	r3, #0
 8006ede:	3401      	adds	r4, #1
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f04f 0c0a 	mov.w	ip, #10
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eee:	3a30      	subs	r2, #48	; 0x30
 8006ef0:	2a09      	cmp	r2, #9
 8006ef2:	d903      	bls.n	8006efc <_svfiprintf_r+0x1a8>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0c5      	beq.n	8006e84 <_svfiprintf_r+0x130>
 8006ef8:	9105      	str	r1, [sp, #20]
 8006efa:	e7c3      	b.n	8006e84 <_svfiprintf_r+0x130>
 8006efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f00:	4604      	mov	r4, r0
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7f0      	b.n	8006ee8 <_svfiprintf_r+0x194>
 8006f06:	ab03      	add	r3, sp, #12
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <_svfiprintf_r+0x1f8>)
 8006f0e:	a904      	add	r1, sp, #16
 8006f10:	4638      	mov	r0, r7
 8006f12:	f3af 8000 	nop.w
 8006f16:	1c42      	adds	r2, r0, #1
 8006f18:	4606      	mov	r6, r0
 8006f1a:	d1d6      	bne.n	8006eca <_svfiprintf_r+0x176>
 8006f1c:	89ab      	ldrh	r3, [r5, #12]
 8006f1e:	065b      	lsls	r3, r3, #25
 8006f20:	f53f af2c 	bmi.w	8006d7c <_svfiprintf_r+0x28>
 8006f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f26:	b01d      	add	sp, #116	; 0x74
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	462a      	mov	r2, r5
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <_svfiprintf_r+0x1f8>)
 8006f34:	a904      	add	r1, sp, #16
 8006f36:	4638      	mov	r0, r7
 8006f38:	f000 f87a 	bl	8007030 <_printf_i>
 8006f3c:	e7eb      	b.n	8006f16 <_svfiprintf_r+0x1c2>
 8006f3e:	bf00      	nop
 8006f40:	08007d61 	.word	0x08007d61
 8006f44:	08007d6b 	.word	0x08007d6b
 8006f48:	00000000 	.word	0x00000000
 8006f4c:	08006c9d 	.word	0x08006c9d
 8006f50:	08007d67 	.word	0x08007d67

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4699      	mov	r9, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa0:	1e13      	subs	r3, r2, #0
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c0      	blx	r8
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	68e5      	ldr	r5, [r4, #12]
 8006fbe:	6832      	ldr	r2, [r6, #0]
 8006fc0:	f003 0306 	and.w	r3, r3, #6
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	bf08      	it	eq
 8006fc8:	1aad      	subeq	r5, r5, r2
 8006fca:	68a3      	ldr	r3, [r4, #8]
 8006fcc:	6922      	ldr	r2, [r4, #16]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c0      	blx	r8
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	; 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4649      	mov	r1, r9
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007038:	2f78      	cmp	r7, #120	; 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	; 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d8 	beq.w	8007202 <_printf_i+0x1d2>
 8007052:	2f58      	cmp	r7, #88	; 0x58
 8007054:	f000 80a3 	beq.w	800719e <_printf_i+0x16e>
 8007058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	; (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071e9 	.word	0x080071e9
 80070a0:	0800710d 	.word	0x0800710d
 80070a4:	080071cb 	.word	0x080071cb
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	0800720b 	.word	0x0800720b
 80070b4:	08007059 	.word	0x08007059
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	080071d3 	.word	0x080071d3
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	602a      	str	r2, [r5, #0]
 80070d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e0a3      	b.n	8007224 <_printf_i+0x1f4>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	6829      	ldr	r1, [r5, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	f101 0304 	add.w	r3, r1, #4
 80070e6:	d50a      	bpl.n	80070fe <_printf_i+0xce>
 80070e8:	680e      	ldr	r6, [r1, #0]
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	2e00      	cmp	r6, #0
 80070ee:	da03      	bge.n	80070f8 <_printf_i+0xc8>
 80070f0:	232d      	movs	r3, #45	; 0x2d
 80070f2:	4276      	negs	r6, r6
 80070f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f8:	485e      	ldr	r0, [pc, #376]	; (8007274 <_printf_i+0x244>)
 80070fa:	230a      	movs	r3, #10
 80070fc:	e019      	b.n	8007132 <_printf_i+0x102>
 80070fe:	680e      	ldr	r6, [r1, #0]
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007106:	bf18      	it	ne
 8007108:	b236      	sxthne	r6, r6
 800710a:	e7ef      	b.n	80070ec <_printf_i+0xbc>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1d19      	adds	r1, r3, #4
 8007112:	6029      	str	r1, [r5, #0]
 8007114:	0601      	lsls	r1, r0, #24
 8007116:	d501      	bpl.n	800711c <_printf_i+0xec>
 8007118:	681e      	ldr	r6, [r3, #0]
 800711a:	e002      	b.n	8007122 <_printf_i+0xf2>
 800711c:	0646      	lsls	r6, r0, #25
 800711e:	d5fb      	bpl.n	8007118 <_printf_i+0xe8>
 8007120:	881e      	ldrh	r6, [r3, #0]
 8007122:	4854      	ldr	r0, [pc, #336]	; (8007274 <_printf_i+0x244>)
 8007124:	2f6f      	cmp	r7, #111	; 0x6f
 8007126:	bf0c      	ite	eq
 8007128:	2308      	moveq	r3, #8
 800712a:	230a      	movne	r3, #10
 800712c:	2100      	movs	r1, #0
 800712e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007132:	6865      	ldr	r5, [r4, #4]
 8007134:	60a5      	str	r5, [r4, #8]
 8007136:	2d00      	cmp	r5, #0
 8007138:	bfa2      	ittt	ge
 800713a:	6821      	ldrge	r1, [r4, #0]
 800713c:	f021 0104 	bicge.w	r1, r1, #4
 8007140:	6021      	strge	r1, [r4, #0]
 8007142:	b90e      	cbnz	r6, 8007148 <_printf_i+0x118>
 8007144:	2d00      	cmp	r5, #0
 8007146:	d04d      	beq.n	80071e4 <_printf_i+0x1b4>
 8007148:	4615      	mov	r5, r2
 800714a:	fbb6 f1f3 	udiv	r1, r6, r3
 800714e:	fb03 6711 	mls	r7, r3, r1, r6
 8007152:	5dc7      	ldrb	r7, [r0, r7]
 8007154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007158:	4637      	mov	r7, r6
 800715a:	42bb      	cmp	r3, r7
 800715c:	460e      	mov	r6, r1
 800715e:	d9f4      	bls.n	800714a <_printf_i+0x11a>
 8007160:	2b08      	cmp	r3, #8
 8007162:	d10b      	bne.n	800717c <_printf_i+0x14c>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	07de      	lsls	r6, r3, #31
 8007168:	d508      	bpl.n	800717c <_printf_i+0x14c>
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	6861      	ldr	r1, [r4, #4]
 800716e:	4299      	cmp	r1, r3
 8007170:	bfde      	ittt	le
 8007172:	2330      	movle	r3, #48	; 0x30
 8007174:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007178:	f105 35ff 	addle.w	r5, r5, #4294967295
 800717c:	1b52      	subs	r2, r2, r5
 800717e:	6122      	str	r2, [r4, #16]
 8007180:	f8cd a000 	str.w	sl, [sp]
 8007184:	464b      	mov	r3, r9
 8007186:	aa03      	add	r2, sp, #12
 8007188:	4621      	mov	r1, r4
 800718a:	4640      	mov	r0, r8
 800718c:	f7ff fee2 	bl	8006f54 <_printf_common>
 8007190:	3001      	adds	r0, #1
 8007192:	d14c      	bne.n	800722e <_printf_i+0x1fe>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	b004      	add	sp, #16
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	4835      	ldr	r0, [pc, #212]	; (8007274 <_printf_i+0x244>)
 80071a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ac:	6029      	str	r1, [r5, #0]
 80071ae:	061d      	lsls	r5, r3, #24
 80071b0:	d514      	bpl.n	80071dc <_printf_i+0x1ac>
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	bf44      	itt	mi
 80071b6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ba:	6023      	strmi	r3, [r4, #0]
 80071bc:	b91e      	cbnz	r6, 80071c6 <_printf_i+0x196>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f023 0320 	bic.w	r3, r3, #32
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	2310      	movs	r3, #16
 80071c8:	e7b0      	b.n	800712c <_printf_i+0xfc>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f043 0320 	orr.w	r3, r3, #32
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	2378      	movs	r3, #120	; 0x78
 80071d4:	4828      	ldr	r0, [pc, #160]	; (8007278 <_printf_i+0x248>)
 80071d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071da:	e7e3      	b.n	80071a4 <_printf_i+0x174>
 80071dc:	0659      	lsls	r1, r3, #25
 80071de:	bf48      	it	mi
 80071e0:	b2b6      	uxthmi	r6, r6
 80071e2:	e7e6      	b.n	80071b2 <_printf_i+0x182>
 80071e4:	4615      	mov	r5, r2
 80071e6:	e7bb      	b.n	8007160 <_printf_i+0x130>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	6826      	ldr	r6, [r4, #0]
 80071ec:	6961      	ldr	r1, [r4, #20]
 80071ee:	1d18      	adds	r0, r3, #4
 80071f0:	6028      	str	r0, [r5, #0]
 80071f2:	0635      	lsls	r5, r6, #24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0x1cc>
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	e002      	b.n	8007202 <_printf_i+0x1d2>
 80071fc:	0670      	lsls	r0, r6, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0x1c8>
 8007200:	8019      	strh	r1, [r3, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	4615      	mov	r5, r2
 8007208:	e7ba      	b.n	8007180 <_printf_i+0x150>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	2100      	movs	r1, #0
 8007216:	4628      	mov	r0, r5
 8007218:	f7f8 fffa 	bl	8000210 <memchr>
 800721c:	b108      	cbz	r0, 8007222 <_printf_i+0x1f2>
 800721e:	1b40      	subs	r0, r0, r5
 8007220:	6060      	str	r0, [r4, #4]
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	6123      	str	r3, [r4, #16]
 8007226:	2300      	movs	r3, #0
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722c:	e7a8      	b.n	8007180 <_printf_i+0x150>
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	462a      	mov	r2, r5
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d0ab      	beq.n	8007194 <_printf_i+0x164>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	079b      	lsls	r3, r3, #30
 8007240:	d413      	bmi.n	800726a <_printf_i+0x23a>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	4298      	cmp	r0, r3
 8007248:	bfb8      	it	lt
 800724a:	4618      	movlt	r0, r3
 800724c:	e7a4      	b.n	8007198 <_printf_i+0x168>
 800724e:	2301      	movs	r3, #1
 8007250:	4632      	mov	r2, r6
 8007252:	4649      	mov	r1, r9
 8007254:	4640      	mov	r0, r8
 8007256:	47d0      	blx	sl
 8007258:	3001      	adds	r0, #1
 800725a:	d09b      	beq.n	8007194 <_printf_i+0x164>
 800725c:	3501      	adds	r5, #1
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	9903      	ldr	r1, [sp, #12]
 8007262:	1a5b      	subs	r3, r3, r1
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcf2      	bgt.n	800724e <_printf_i+0x21e>
 8007268:	e7eb      	b.n	8007242 <_printf_i+0x212>
 800726a:	2500      	movs	r5, #0
 800726c:	f104 0619 	add.w	r6, r4, #25
 8007270:	e7f5      	b.n	800725e <_printf_i+0x22e>
 8007272:	bf00      	nop
 8007274:	08007d72 	.word	0x08007d72
 8007278:	08007d83 	.word	0x08007d83

0800727c <memmove>:
 800727c:	4288      	cmp	r0, r1
 800727e:	b510      	push	{r4, lr}
 8007280:	eb01 0402 	add.w	r4, r1, r2
 8007284:	d902      	bls.n	800728c <memmove+0x10>
 8007286:	4284      	cmp	r4, r0
 8007288:	4623      	mov	r3, r4
 800728a:	d807      	bhi.n	800729c <memmove+0x20>
 800728c:	1e43      	subs	r3, r0, #1
 800728e:	42a1      	cmp	r1, r4
 8007290:	d008      	beq.n	80072a4 <memmove+0x28>
 8007292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800729a:	e7f8      	b.n	800728e <memmove+0x12>
 800729c:	4402      	add	r2, r0
 800729e:	4601      	mov	r1, r0
 80072a0:	428a      	cmp	r2, r1
 80072a2:	d100      	bne.n	80072a6 <memmove+0x2a>
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ae:	e7f7      	b.n	80072a0 <memmove+0x24>

080072b0 <_free_r>:
 80072b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d044      	beq.n	8007340 <_free_r+0x90>
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	9001      	str	r0, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f1a1 0404 	sub.w	r4, r1, #4
 80072c2:	bfb8      	it	lt
 80072c4:	18e4      	addlt	r4, r4, r3
 80072c6:	f000 f913 	bl	80074f0 <__malloc_lock>
 80072ca:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <_free_r+0x94>)
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	b933      	cbnz	r3, 80072e0 <_free_r+0x30>
 80072d2:	6063      	str	r3, [r4, #4]
 80072d4:	6014      	str	r4, [r2, #0]
 80072d6:	b003      	add	sp, #12
 80072d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072dc:	f000 b90e 	b.w	80074fc <__malloc_unlock>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d908      	bls.n	80072f6 <_free_r+0x46>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf01      	itttt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	1949      	addeq	r1, r1, r5
 80072f2:	6021      	streq	r1, [r4, #0]
 80072f4:	e7ed      	b.n	80072d2 <_free_r+0x22>
 80072f6:	461a      	mov	r2, r3
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b10b      	cbz	r3, 8007300 <_free_r+0x50>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d9fa      	bls.n	80072f6 <_free_r+0x46>
 8007300:	6811      	ldr	r1, [r2, #0]
 8007302:	1855      	adds	r5, r2, r1
 8007304:	42a5      	cmp	r5, r4
 8007306:	d10b      	bne.n	8007320 <_free_r+0x70>
 8007308:	6824      	ldr	r4, [r4, #0]
 800730a:	4421      	add	r1, r4
 800730c:	1854      	adds	r4, r2, r1
 800730e:	42a3      	cmp	r3, r4
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	d1e0      	bne.n	80072d6 <_free_r+0x26>
 8007314:	681c      	ldr	r4, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	6053      	str	r3, [r2, #4]
 800731a:	4421      	add	r1, r4
 800731c:	6011      	str	r1, [r2, #0]
 800731e:	e7da      	b.n	80072d6 <_free_r+0x26>
 8007320:	d902      	bls.n	8007328 <_free_r+0x78>
 8007322:	230c      	movs	r3, #12
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	e7d6      	b.n	80072d6 <_free_r+0x26>
 8007328:	6825      	ldr	r5, [r4, #0]
 800732a:	1961      	adds	r1, r4, r5
 800732c:	428b      	cmp	r3, r1
 800732e:	bf04      	itt	eq
 8007330:	6819      	ldreq	r1, [r3, #0]
 8007332:	685b      	ldreq	r3, [r3, #4]
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	bf04      	itt	eq
 8007338:	1949      	addeq	r1, r1, r5
 800733a:	6021      	streq	r1, [r4, #0]
 800733c:	6054      	str	r4, [r2, #4]
 800733e:	e7ca      	b.n	80072d6 <_free_r+0x26>
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}
 8007344:	20000738 	.word	0x20000738

08007348 <sbrk_aligned>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0e      	ldr	r6, [pc, #56]	; (8007384 <sbrk_aligned+0x3c>)
 800734c:	460c      	mov	r4, r1
 800734e:	6831      	ldr	r1, [r6, #0]
 8007350:	4605      	mov	r5, r0
 8007352:	b911      	cbnz	r1, 800735a <sbrk_aligned+0x12>
 8007354:	f000 f8bc 	bl	80074d0 <_sbrk_r>
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	4621      	mov	r1, r4
 800735c:	4628      	mov	r0, r5
 800735e:	f000 f8b7 	bl	80074d0 <_sbrk_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d00a      	beq.n	800737c <sbrk_aligned+0x34>
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d007      	beq.n	8007380 <sbrk_aligned+0x38>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f8ac 	bl	80074d0 <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d101      	bne.n	8007380 <sbrk_aligned+0x38>
 800737c:	f04f 34ff 	mov.w	r4, #4294967295
 8007380:	4620      	mov	r0, r4
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	2000073c 	.word	0x2000073c

08007388 <_malloc_r>:
 8007388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	1ccd      	adds	r5, r1, #3
 800738e:	f025 0503 	bic.w	r5, r5, #3
 8007392:	3508      	adds	r5, #8
 8007394:	2d0c      	cmp	r5, #12
 8007396:	bf38      	it	cc
 8007398:	250c      	movcc	r5, #12
 800739a:	2d00      	cmp	r5, #0
 800739c:	4607      	mov	r7, r0
 800739e:	db01      	blt.n	80073a4 <_malloc_r+0x1c>
 80073a0:	42a9      	cmp	r1, r5
 80073a2:	d905      	bls.n	80073b0 <_malloc_r+0x28>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	2600      	movs	r6, #0
 80073aa:	4630      	mov	r0, r6
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	4e2e      	ldr	r6, [pc, #184]	; (800746c <_malloc_r+0xe4>)
 80073b2:	f000 f89d 	bl	80074f0 <__malloc_lock>
 80073b6:	6833      	ldr	r3, [r6, #0]
 80073b8:	461c      	mov	r4, r3
 80073ba:	bb34      	cbnz	r4, 800740a <_malloc_r+0x82>
 80073bc:	4629      	mov	r1, r5
 80073be:	4638      	mov	r0, r7
 80073c0:	f7ff ffc2 	bl	8007348 <sbrk_aligned>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	4604      	mov	r4, r0
 80073c8:	d14d      	bne.n	8007466 <_malloc_r+0xde>
 80073ca:	6834      	ldr	r4, [r6, #0]
 80073cc:	4626      	mov	r6, r4
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	d140      	bne.n	8007454 <_malloc_r+0xcc>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	4631      	mov	r1, r6
 80073d6:	4638      	mov	r0, r7
 80073d8:	eb04 0803 	add.w	r8, r4, r3
 80073dc:	f000 f878 	bl	80074d0 <_sbrk_r>
 80073e0:	4580      	cmp	r8, r0
 80073e2:	d13a      	bne.n	800745a <_malloc_r+0xd2>
 80073e4:	6821      	ldr	r1, [r4, #0]
 80073e6:	3503      	adds	r5, #3
 80073e8:	1a6d      	subs	r5, r5, r1
 80073ea:	f025 0503 	bic.w	r5, r5, #3
 80073ee:	3508      	adds	r5, #8
 80073f0:	2d0c      	cmp	r5, #12
 80073f2:	bf38      	it	cc
 80073f4:	250c      	movcc	r5, #12
 80073f6:	4629      	mov	r1, r5
 80073f8:	4638      	mov	r0, r7
 80073fa:	f7ff ffa5 	bl	8007348 <sbrk_aligned>
 80073fe:	3001      	adds	r0, #1
 8007400:	d02b      	beq.n	800745a <_malloc_r+0xd2>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	442b      	add	r3, r5
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e00e      	b.n	8007428 <_malloc_r+0xa0>
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	1b52      	subs	r2, r2, r5
 800740e:	d41e      	bmi.n	800744e <_malloc_r+0xc6>
 8007410:	2a0b      	cmp	r2, #11
 8007412:	d916      	bls.n	8007442 <_malloc_r+0xba>
 8007414:	1961      	adds	r1, r4, r5
 8007416:	42a3      	cmp	r3, r4
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	bf18      	it	ne
 800741c:	6059      	strne	r1, [r3, #4]
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	bf08      	it	eq
 8007422:	6031      	streq	r1, [r6, #0]
 8007424:	5162      	str	r2, [r4, r5]
 8007426:	604b      	str	r3, [r1, #4]
 8007428:	4638      	mov	r0, r7
 800742a:	f104 060b 	add.w	r6, r4, #11
 800742e:	f000 f865 	bl	80074fc <__malloc_unlock>
 8007432:	f026 0607 	bic.w	r6, r6, #7
 8007436:	1d23      	adds	r3, r4, #4
 8007438:	1af2      	subs	r2, r6, r3
 800743a:	d0b6      	beq.n	80073aa <_malloc_r+0x22>
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	50a3      	str	r3, [r4, r2]
 8007440:	e7b3      	b.n	80073aa <_malloc_r+0x22>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	42a3      	cmp	r3, r4
 8007446:	bf0c      	ite	eq
 8007448:	6032      	streq	r2, [r6, #0]
 800744a:	605a      	strne	r2, [r3, #4]
 800744c:	e7ec      	b.n	8007428 <_malloc_r+0xa0>
 800744e:	4623      	mov	r3, r4
 8007450:	6864      	ldr	r4, [r4, #4]
 8007452:	e7b2      	b.n	80073ba <_malloc_r+0x32>
 8007454:	4634      	mov	r4, r6
 8007456:	6876      	ldr	r6, [r6, #4]
 8007458:	e7b9      	b.n	80073ce <_malloc_r+0x46>
 800745a:	230c      	movs	r3, #12
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4638      	mov	r0, r7
 8007460:	f000 f84c 	bl	80074fc <__malloc_unlock>
 8007464:	e7a1      	b.n	80073aa <_malloc_r+0x22>
 8007466:	6025      	str	r5, [r4, #0]
 8007468:	e7de      	b.n	8007428 <_malloc_r+0xa0>
 800746a:	bf00      	nop
 800746c:	20000738 	.word	0x20000738

08007470 <_realloc_r>:
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	4680      	mov	r8, r0
 8007476:	4614      	mov	r4, r2
 8007478:	460e      	mov	r6, r1
 800747a:	b921      	cbnz	r1, 8007486 <_realloc_r+0x16>
 800747c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	4611      	mov	r1, r2
 8007482:	f7ff bf81 	b.w	8007388 <_malloc_r>
 8007486:	b92a      	cbnz	r2, 8007494 <_realloc_r+0x24>
 8007488:	f7ff ff12 	bl	80072b0 <_free_r>
 800748c:	4625      	mov	r5, r4
 800748e:	4628      	mov	r0, r5
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	f000 f838 	bl	8007508 <_malloc_usable_size_r>
 8007498:	4284      	cmp	r4, r0
 800749a:	4607      	mov	r7, r0
 800749c:	d802      	bhi.n	80074a4 <_realloc_r+0x34>
 800749e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074a2:	d812      	bhi.n	80074ca <_realloc_r+0x5a>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4640      	mov	r0, r8
 80074a8:	f7ff ff6e 	bl	8007388 <_malloc_r>
 80074ac:	4605      	mov	r5, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0ed      	beq.n	800748e <_realloc_r+0x1e>
 80074b2:	42bc      	cmp	r4, r7
 80074b4:	4622      	mov	r2, r4
 80074b6:	4631      	mov	r1, r6
 80074b8:	bf28      	it	cs
 80074ba:	463a      	movcs	r2, r7
 80074bc:	f7ff fb76 	bl	8006bac <memcpy>
 80074c0:	4631      	mov	r1, r6
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff fef4 	bl	80072b0 <_free_r>
 80074c8:	e7e1      	b.n	800748e <_realloc_r+0x1e>
 80074ca:	4635      	mov	r5, r6
 80074cc:	e7df      	b.n	800748e <_realloc_r+0x1e>
	...

080074d0 <_sbrk_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d06      	ldr	r5, [pc, #24]	; (80074ec <_sbrk_r+0x1c>)
 80074d4:	2300      	movs	r3, #0
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	f7fa fbea 	bl	8001cb4 <_sbrk>
 80074e0:	1c43      	adds	r3, r0, #1
 80074e2:	d102      	bne.n	80074ea <_sbrk_r+0x1a>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	b103      	cbz	r3, 80074ea <_sbrk_r+0x1a>
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	20000740 	.word	0x20000740

080074f0 <__malloc_lock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__malloc_lock+0x8>)
 80074f2:	f000 b811 	b.w	8007518 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	20000744 	.word	0x20000744

080074fc <__malloc_unlock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_unlock+0x8>)
 80074fe:	f000 b80c 	b.w	800751a <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	20000744 	.word	0x20000744

08007508 <_malloc_usable_size_r>:
 8007508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750c:	1f18      	subs	r0, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bfbc      	itt	lt
 8007512:	580b      	ldrlt	r3, [r1, r0]
 8007514:	18c0      	addlt	r0, r0, r3
 8007516:	4770      	bx	lr

08007518 <__retarget_lock_acquire_recursive>:
 8007518:	4770      	bx	lr

0800751a <__retarget_lock_release_recursive>:
 800751a:	4770      	bx	lr

0800751c <_init>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr

08007528 <_fini>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	bf00      	nop
 800752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752e:	bc08      	pop	{r3}
 8007530:	469e      	mov	lr, r3
 8007532:	4770      	bx	lr
>>>>>>> Stashed changes
